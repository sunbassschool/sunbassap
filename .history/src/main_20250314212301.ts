import { createApp } from "vue";
import { createPinia } from "pinia";
import App from "./App.vue";
import router from "./router";
import "./assets/main.css";
import "bootstrap/dist/css/bootstrap.min.css";
import "@fortawesome/fontawesome-free/css/all.css";
import "bootstrap-icons/font/bootstrap-icons.css";

import { 
  scheduleJwtRefresh,
  checkAndRestoreTokens, 
  getToken,
  openIndexedDB,
  shouldRefreshJwt,
  preventIndexedDBCleanup, 
  syncRefreshToken,
  resetIndexedDB,
  hasUserEverLoggedIn,
  updateTokens 
} from "@/utils/api.ts";

// ‚úÖ √âvite plusieurs suppressions simultan√©es de IndexedDB
let indexedDBResetInProgress = false;

// ‚úÖ D√©marrer Vue imm√©diatement pour √©viter un √©cran blanc
async function initApp() {
  console.log("üöÄ Initialisation de l'application...");

  const app = createApp(App);
  app.use(createPinia());
  app.use(router);
  app.mount("#app");

  // ‚úÖ V√©rifier et corriger le logo (ex√©cut√© en parall√®le)
  checkAndFixLogo();

  // ‚úÖ V√©rification et initialisation d'IndexedDB + Auth
  await initIndexedDB();
  await initAuth();
}

// ‚úÖ V√©rification et initialisation d'IndexedDB
async function initIndexedDB(): Promise<void> {
  console.log("üîÑ V√©rification d'IndexedDB...");

  try {
    const db = await openIndexedDB("AuthDB", 1);
    if (!db.objectStoreNames.contains("authStore")) {
      console.warn("‚ö†Ô∏è IndexedDB corrompue, suppression et recr√©ation...");
      await resetIndexedDB();
    }

    console.log("‚úÖ IndexedDB pr√™te !");
  } catch (error) {
    console.error("‚ùå Erreur IndexedDB :", error);
  }
}

// ‚úÖ Gestion de l'authentification
async function initAuth() {
  console.log("üîÑ Initialisation de l'authentification...");

  try {
    preventIndexedDBCleanup();
    
    const userExists = await hasUserEverLoggedIn();
    console.log(`üßê Connexion pr√©c√©dente : ${userExists ? "Oui" : "Non"}`);

    if (userExists) {
      await syncRefreshToken();
    } else {
      console.log("üöÄ Premi√®re connexion d√©tect√©e.");
    }

    const tokensRestored = await checkAndRestoreTokens();
    if (!tokensRestored) {
      console.log("üöÄ Aucun JWT trouv√©, redirection vers login.");
      router.replace("/login");
    } else {
      console.log("‚è≥ Planification du rafra√Æchissement du JWT...");
      scheduleJwtRefresh();
    }
  } catch (error) {
    console.error("‚ùå Erreur d'authentification :", error);
  }
}

// ‚úÖ V√©rification des tokens au r√©veil
let lastVisibilityCheck = 0;
document.addEventListener("visibilitychange", async () => {
  if (document.visibilityState !== "visible") return;
  if (Date.now() - lastVisibilityCheck < 60_000) return;

  lastVisibilityCheck = Date.now();
  console.log("üîÑ V√©rification des tokens apr√®s r√©veil...");

  try {
    const jwt = await getToken();
    const refreshToken = localStorage.getItem("refreshToken");

    if (jwt && refreshToken) {
      console.log("üîÑ Mise √† jour des tokens apr√®s r√©veil...");
      await updateTokens(jwt, refreshToken);
    } else {
      console.warn("‚ö†Ô∏è Tokens manquants apr√®s r√©veil.");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la v√©rification des tokens apr√®s r√©veil :", error);
  }
});

// ‚úÖ Masquer l'√©cran de chargement
function hideLoadingScreen() {
  const loadingScreen = document.getElementById("loading-screen");
  if (loadingScreen) {
    loadingScreen.style.transition = "opacity 0.5s ease-out";
    loadingScreen.style.opacity = "0";
    setTimeout(() => (loadingScreen.style.display = "none"), 500);
  }
}

// ‚úÖ V√©rifier et corriger le logo si n√©cessaire
async function checkAndFixLogo() {
  console.log("üîç V√©rification du logo...");

  const logoElement = document.getElementById("loading-logo") as HTMLImageElement;
  if (!logoElement) return;

  const baseUrl = import.meta.env.VITE_BASE_URL || "/";
  const newLogoPath = `${baseUrl}images/logo.png`;

  try {
    const response = await fetch(logoElement.src, { method: "HEAD" });
    if (!response.ok) {
      console.warn("‚ö†Ô∏è Logo invalide, mise √† jour...");
      logoElement.src = newLogoPath;
    }
  } catch {
    console.warn("‚ö†Ô∏è √âchec du chargement du logo, mise √† jour...");
    logoElement.src = newLogoPath;
  }
}

// ‚úÖ D√©marrage de l'application
initApp();
