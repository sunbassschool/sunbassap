import { createApp } from "vue";
import "font-awesome/css/font-awesome.min.css";
import { createPinia } from "pinia";
import App from "@/App.vue";
import router from "./router";
import "./assets/main.css";
import "bootstrap/dist/css/bootstrap.min.css";
import "@fortawesome/fontawesome-free/css/all.css";
import "bootstrap-icons/font/bootstrap-icons.css";

import { verifyIndexedDBSetup, preventIndexedDBCleanup, checkIndexedDBStatus } from "@/utils/api";
import { getCache } from "@/utils/cacheManager";

const loadingScreen = document.getElementById("loading-screen");
const appContainer = document.getElementById("app");

// ‚úÖ Fonction pour cacher l'√©cran de chargement
function finalizeApp() {
  console.log("üéâ Application pr√™te !");

  setTimeout(() => {
    if (loadingScreen) {
      loadingScreen.style.transition = "opacity 0.6s ease-out";
      loadingScreen.style.opacity = "0";
      setTimeout(() => {
        loadingScreen.style.display = "none";
      }, 600);
    }

    if (appContainer) {
      appContainer.classList.add("app-visible");
    }
  }, 300);
}

// ‚úÖ Initialisation principale
(async () => {
  console.log("üöÄ Initialisation de l'application...");

  const dbReady = await verifyIndexedDBSetup();
  if (!dbReady) {
    console.error("‚ùå √âchec de la pr√©paration d'IndexedDB. Abandon.");
    return;
  }

  // üîê Protection session : garder IndexedDB vivante
  preventIndexedDBCleanup();
  checkIndexedDBStatus();

  // üåê Mode offline + donn√©es en cache ?
  if (!navigator.onLine && getCache("userData_sunny")) {
    console.warn("‚ö†Ô∏è Mode hors ligne d√©tect√©. Utilisation du cache...");
    // (optionnel : afficher une banni√®re ou toast)
  }

  const app = createApp(App);
  app.use(createPinia());
  app.use(router);

  app.mount("#app");
  router.isReady().then(() => {
    requestAnimationFrame(() => {
      // ‚è≥ Attendre pour lire la citation
      setTimeout(() => {
        finalizeApp();
      }, 5000);
    });
  });
  import { registerSW } from 'virtual:pwa-register'

  const updateSW = registerSW({
    onNeedRefresh() {
      console.log('‚ö†Ô∏è Nouvelle version dispo ! Recharge recommand√©e.')
      // Tu peux afficher un toast ou forcer un reload si tu veux
      // window.location.reload();
    },
    onOfflineReady() {
      console.log('‚úÖ App pr√™te pour le mode hors-ligne !')
    },
  });




})();
