import { createApp } from "vue";
import "font-awesome/css/font-awesome.min.css";
import { createPinia } from "pinia";
import App from "@/App.vue"; // S'assurer que l'import est bien absolu
import router from "./router";
import "./assets/main.css";
import "bootstrap/dist/css/bootstrap.min.css";
import "@fortawesome/fontawesome-free/css/all.css";
import "bootstrap-icons/font/bootstrap-icons.css";
import { jwtDecode } from "jwt-decode"; // ‚úÖ Correct pour Vite et ES Modules

import { 
  scheduleJwtRefresh,
  restoreTokensIfNeeded,
  getValidToken,
  verifyIndexedDBSetup,
  handleRefreshToken,
  isJwtExpired
} from "@/utils/api.ts";

const app = createApp(App);
app.use(createPinia());
app.use(router);

// ‚úÖ Gestion am√©lior√©e du chargement
const loadingScreen = document.getElementById("loading-screen");
const appContainer = document.getElementById("app");

async function initApp() {
  console.log("üöÄ Initialisation de l'application...");

  if (loadingScreen) loadingScreen.style.display = "flex";
  if (appContainer) appContainer.style.opacity = "0"; // On cache l'interface au d√©but

  let isDBReady = await verifyIndexedDBSetup();
  if (!isDBReady) {
    console.warn("‚ö†Ô∏è IndexedDB absente !");
    let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
    let storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

    if (!jwt && !storedRefreshToken) {
      console.warn("üö® Aucun token trouv√© et IndexedDB absente, affichage du login !");
      if (loadingScreen) loadingScreen.style.display = "none";
      showLoginScreen(); // ‚ö†Ô∏è V√©rifie que cette fonction est bien d√©finie !
      return;
    }
  }

  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

  if (jwt && !isJwtExpired(jwt)) {
    console.log("‚úÖ JWT valide trouv√© en m√©moire, pas besoin de restaurer.");
  } else if (isDBReady) {
    console.log("üîÑ Aucun JWT valide en m√©moire, tentative de restauration des tokens...");
    await restoreTokensIfNeeded();
    jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
    console.log("üîç Apr√®s restauration, JWT en m√©moire :", jwt);
  }

  if (!jwt || isJwtExpired(jwt)) {
    console.warn("‚ö†Ô∏è JWT expir√© ou inexistant, tentative de refresh...");
    jwt = null;
    let storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

    if (!storedRefreshToken) {
      console.warn("‚ùå Aucun refreshToken disponible, redirection vers login.");
      showLoginScreen(); // ‚ö†Ô∏è V√©rifie que cette fonction est bien d√©finie !
      return;
    }

    await handleRefreshToken();
    jwt = await getValidToken();
    console.log("üîÑ Apr√®s refresh, nouveau JWT :", jwt);
  }

  if (!jwt || isJwtExpired(jwt)) {
    console.warn("‚ùå JWT toujours expir√© apr√®s tentative de refresh, suppression...");
    localStorage.removeItem("jwt");
    sessionStorage.removeItem("jwt");
    showLoginScreen(); // ‚ö†Ô∏è V√©rifie que cette fonction est bien d√©finie !
    return;
  }

  console.log("‚úÖ JWT valide, affichage de l'interface !");
  
  // ‚úÖ V√©rifie que `finalizeApp` est bien d√©finie avant de l'appeler
  if (typeof finalizeApp === "function") {
    finalizeApp();
  } else {
    console.warn("‚ö†Ô∏è `finalizeApp` n'est pas d√©finie.");
  }
}

// ‚úÖ Fonction manquante : assure-toi qu'elle est bien d√©clar√©e
function showLoginScreen() {
  console.log("üîê Affichage de l'√©cran de connexion...");
  window.location.href = "/login"; // Ou toute autre logique pour afficher le login
}

// ‚úÖ D√©marrage de l'application
initApp();
app.mount("#app");
