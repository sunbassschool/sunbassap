import { getValidToken, refreshToken } from "@/utils/authService.ts";
import { openDB } from "idb"; // üìå Assure-toi d'avoir "idb" install√©
export async function fetchWithAuth(url: string, options: RequestInit = {}): Promise<Response> {
  let jwt = await getValidToken(); // ‚úÖ R√©cup√®re le JWT valide ou tente un refresh

  if (!jwt) {
    console.error("‚ùå Aucun token valide, d√©connexion forc√©e.");
    throw new Error("Session expir√©e. Veuillez vous reconnecter.");
  }

  const headers = new Headers(options.headers);
  headers.set("Authorization", `Bearer ${jwt}`);

  console.log(`üì° [API] Requ√™te envoy√©e : ${url}`);

  let response = await fetch(url, { ...options, headers });

  // üîÑ Gestion automatique du refresh si l‚ÄôAPI retourne 401
  if (response.status === 401) {
    console.warn("‚ö†Ô∏è JWT expir√©, tentative de rafra√Æchissement...");

    jwt = await refreshToken(); // üîÑ Tentative de refresh
    if (!jwt) {
      console.error("‚ùå Impossible de rafra√Æchir le token. D√©connexion.");
      throw new Error("Session expir√©e.");
    }

    headers.set("Authorization", `Bearer ${jwt}`);
    response = await fetch(url, { ...options, headers }); // üîÑ R√©p√®te la requ√™te avec le nouveau token
  }

  return response;
}
export async function logoutUser() {
  console.log("üö® D√©connexion en cours...");

  try {
    // ‚úÖ Marquer la session comme expir√©e
    localStorage.setItem("session_expired", "true");

    // ‚úÖ Supprimer les tokens et les donn√©es utilisateur
    sessionStorage.removeItem("jwt");
    sessionStorage.removeItem("refreshToken");
    localStorage.removeItem("jwt");
    localStorage.removeItem("refreshToken");

    // ‚úÖ Nettoyage IndexedDB
    await clearIndexedDBData();

    // ‚úÖ Suppression des cookies (JWT & refreshToken)
    document.cookie = "jwt=; path=/; max-age=0";
    document.cookie = "refreshToken=; path=/; max-age=0";
    
    // ‚úÖ Informer l‚Äôapplication que l‚Äôutilisateur est d√©connect√©
    window.dispatchEvent(new Event("logout"));

    // ‚úÖ Rediriger vers la page de connexion apr√®s un court d√©lai
    setTimeout(() => {
      console.log("üîÑ Redirection vers /login...");
      router.replace("/login"); // üî• Redirection sans recharger la page
    }, 1000);

  } catch (error) {
    console.error("‚ùå Erreur lors de la d√©connexion :", error);
  }
}
export async function clearIndexedDBData() {
  if (!window.indexedDB) {
    console.warn("‚ö†Ô∏è IndexedDB non support√© sur ce navigateur.");
    return;
  }

  try {
    const db = await openDB("AuthDB", 1);

    // V√©rifie si le store "authStore" existe
    if (!db.objectStoreNames.contains("authStore")) {
      console.warn("‚ö†Ô∏è IndexedDB 'authStore' introuvable, aucune donn√©e √† nettoyer.");
      return;
    }

    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.clear(); // Efface toutes les donn√©es dans le store
    await tx.done; // üî• Assure la fermeture propre de la transaction

    console.log("‚úÖ IndexedDB nettoy√©e !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de IndexedDB :", error);
  }
}