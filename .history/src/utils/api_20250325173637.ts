declare global {
  interface Window {
    latestJWT?: string;
    jwtRefreshScheduled?: boolean;
  }
}


import { openDB } from "idb";
import { jwtDecode } from "jwt-decode";
import type { UserInfo } from "@/utils/types"; // üìå Adapte le chemin si n√©cessaire
import Cookies from "js-cookie";
import { getAuthDB } from '@/utils/indexedDbUtils'; // chemin selon ton projet

import axios from "axios";
import router from "@/router/index.ts"
let refreshInProgress: Promise<string | null> | null = null;
let resolvePromise: ((value: string | null) => void) | null = null;
let storedRefreshToken: string | undefined = undefined;




// Fonction pour v√©rifier si l'utilisateur est connect√©
export function isUserLoggedIn(): boolean {
// V√©rifie la pr√©sence du JWT dans localStorage ou sessionStorage
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

// Si le JWT est trouv√©, l'utilisateur est connect√©
return !!jwt;
}

// Fonction pour v√©rifier si l'utilisateur est un administrateur
export function isUserAdmin(): boolean {
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

if (!jwt) {
  console.warn("‚ùå Aucun JWT trouv√©, l'utilisateur n'est pas authentifi√©.");
  return false; // Si aucun JWT n'est trouv√©, l'utilisateur n'est pas un admin
}

try {
  // D√©codage du JWT pour extraire le payload
  const decoded = JSON.parse(atob(jwt.split(".")[1]));
  
  // V√©rification du r√¥le dans le payload
  return decoded.role === "admin"; // Retourne true si l'utilisateur est admin
} catch (error) {
  console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
  return false; // Si le JWT est invalide ou malform√©, on consid√®re que l'utilisateur n'est pas admin
}
}

let refreshAttempts = 0; // Compteur de tentatives de refresh
const MAX_REFRESH_ATTEMPTS = 3; // Limite anti-boucle
let isSyncing = false; // Verrou global pour √©viter les boucles infinies
// Fonction pour r√©cup√©rer le token depuis localStorage, sessionStorage, IndexedDB ou cookies
// D√©clare l'interface TokenObject quelque part avant de l'utiliser
export interface TokenObject {
  jwt?: string;
  [key: string]: any;
}
export async function getStoredJWT() {
  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

  // üîç V√©rifier dans les cookies
  if (!jwt) {
    const cookies = document.cookie.split("; ");
    const jwtCookie = cookies.find(row => row.startsWith("jwt="));
    if (jwtCookie) jwt = jwtCookie.split("=")[1];
  }

  // üîç V√©rifier dans IndexedDB de mani√®re asynchrone
  if (!jwt) {
    try {
      jwt = await getJWTFromIndexedDB();
    } catch (error) {
      console.error("‚ö†Ô∏è Erreur lors de l'acc√®s √† IndexedDB :", error);
    }
  }

  return jwt;
}
export async function getToken(): Promise<string | null> {
  console.log("üîÑ Tentative de r√©cup√©ration du JWT...");

  // 1. V√©rification dans localStorage/sessionStorage
  let token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

  if (token) {
    console.log("‚úÖ JWT trouv√© dans localStorage ou sessionStorage.");
  } else {
    console.log("üîç Aucun JWT trouv√© dans localStorage ou sessionStorage.");
  }

  // 2. V√©rification dans les cookies si le token n'est pas trouv√©
  if (!token) {
    console.log("üîç Tentative de r√©cup√©ration du JWT depuis les cookies...");
    token = document.cookie
      .split("; ")
      .find(row => row.startsWith("jwt="))
      ?.split("=")[1] || null;

    if (token) {
      console.log("‚úÖ JWT trouv√© dans les cookies.");
    } else {
      console.log("üîç Aucun JWT trouv√© dans les cookies.");
    }
  }

  // 3. V√©rification finale dans IndexedDB si aucune donn√©e n'est trouv√©e
  if (!token) {
    console.log("üîç Tentative de r√©cup√©ration du JWT depuis IndexedDB...");
    const fromDb: string | null = await getJWTFromIndexedDB();


    if (fromDb && typeof fromDb === "object") {
      token = fromDb ?? null;
    } else {
      token = typeof fromDb === "string" ? fromDb : null;
    }

    if (token) {
      console.log("‚úÖ JWT trouv√© dans IndexedDB.");
    } else {
      console.log("üîç Aucun JWT trouv√© dans IndexedDB.");
    }
  }

  if (!token) {
    console.warn("‚ö†Ô∏è Aucun JWT trouv√© apr√®s toutes les v√©rifications.");
  }

  return token;
}




export async function resetIndexedDB(): Promise<void> {
  if (!window.indexedDB) {
    console.error("‚ùå Impossible de supprimer IndexedDB : non support√©e !");
    return;
  }

  try {
    console.log("üîç V√©rification de IndexedDB avant suppression...");

    const dbs: { name?: string }[] = await indexedDB.databases();
    if (!dbs.some(db => db.name === "AuthDB")) {
      console.log("‚ÑπÔ∏è AuthDB n'existe pas, rien √† supprimer.");
      return;
    }

    console.log("üóëÔ∏è Suppression de la base AuthDB...");
    await new Promise<void>((resolve, reject) => {
      const deleteRequest = indexedDB.deleteDatabase("AuthDB");
      deleteRequest.onsuccess = () => resolve();
      deleteRequest.onerror = () => reject(deleteRequest.error);
    });

    console.log("‚úÖ AuthDB supprim√©e avec succ√®s.");
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de IndexedDB :", error);
  }
}


export async function hasUserEverLoggedIn(): Promise<boolean> {
  const userInfo: UserInfo | null = await restoreUserInfo();

  if (userInfo && typeof userInfo === "object" && "email" in userInfo) {
    console.log("‚úÖ Un utilisateur a d√©j√† √©t√© connect√© :", userInfo.email);
    return true;
  }
  console.log("üöÄ Aucun utilisateur enregistr√©, c'est une premi√®re connexion.");
  return false;
}

// Fonction pour r√©cup√©rer une valeur dans IndexedDB
export function getFromIndexedDB(key: string): Promise<any> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("AuthDB", 1);

    request.onupgradeneeded = function (event) {
      console.warn("‚ö†Ô∏è IndexedDB mis √† jour, v√©rification des stores...");
      const db = (event.target as IDBRequest<IDBDatabase >)?.result;
      if (!db.objectStoreNames.contains("authStore")) {
        db.createObjectStore("authStore", { keyPath: "key" });
        console.log("‚úÖ 'authStore' cr√©√© !");
      }
    };

    request.onsuccess = function (event) {
      const db = (event.target as IDBRequest<IDBDatabase >)?.result;
      if (!db) {
        throw new Error("IndexedDB inaccessible");
      }
      const tx = db.transaction("authStore", "readwrite");
      
      if (!db.objectStoreNames.contains("authStore")) {
        reject("‚ùå Object store 'authStore' introuvable !");
        return;
      }

      const transaction = db.transaction("authStore", "readonly");
      const store = transaction.objectStore("authStore");
      const getRequest = store.get(key);

      getRequest.onsuccess = function () {
        resolve(getRequest.result ? getRequest.result.value : null);
      };

      getRequest.onerror = function () {
        reject("‚ùå Erreur lors de la r√©cup√©ration de la cl√© dans IndexedDB");
      };
    };

    request.onerror = function () {
      reject("‚ùå Erreur de connexion √† IndexedDB");
    };
  });
}



// Fonction pour sauvegarder une valeur dans IndexedDB
export function saveToIndexedDB(key: string, value: any): Promise<void> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("myDatabase", 1);

    request.onsuccess = (evt) => {
      const dbRequest = evt.target as IDBRequest<IDBDatabase >;
      if (!dbRequest) {
        reject("Erreur : impossible d‚Äôouvrir la DB");
        return;
      }
      const db = dbRequest.result;
      if (!db) {
        throw new Error("IndexedDB inaccessible");
      }
      const tx = db.transaction("authStore", "readwrite");
      

      const transaction = db.transaction("authStore", "readwrite");
      const store = transaction.objectStore("authStore");
      const putRequest = store.put(value, key);

      putRequest.onsuccess = () => {
        resolve();
      };
      putRequest.onerror = () => {
        reject("Erreur lors de la sauvegarde dans IndexedDB");
      };
    };

    request.onerror = () => {
      reject("Erreur de connexion √† IndexedDB");
    };
  });
}



export async function getPrenomFromIndexedDB(): Promise<string | null> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("AuthDB", 1);

    request.onerror = () => {
      console.error("‚ùå [getPrenomFromIndexedDB] Impossible d‚Äôouvrir IndexedDB.");
      reject(null);
    };

    request.onsuccess = () => {
      const db = request.result;

      if (!db.objectStoreNames.contains("authStore")) {
        console.warn("‚ö†Ô∏è [getPrenomFromIndexedDB] Store 'authStore' absent.");
        return resolve(null);
      }

      const tx = db.transaction("authStore", "readonly");
      const store = tx.objectStore("authStore");
      const getRequest = store.get("prenom");

      getRequest.onsuccess = () => {
        const result = getRequest.result;
        resolve(typeof result === "object" && result?.value ? result.value : null);
      };

      getRequest.onerror = () => {
        console.error("‚ùå [getPrenomFromIndexedDB] Erreur lors de la r√©cup√©ration.");
        reject(null);
      };
    };
  });
}
// Dans api.ts
export function extractErrorMessage(error: unknown): string {
  if (error instanceof Error) {
    return error.message;
  }
  return "Une erreur inconnue est survenue";
}



export function getUserInfoFromJWT(jwt?: string): { email: string; prenom: string; role: string; abonnement: string } {
  // Si aucun jwt n'est pass√© en argument, on le r√©cup√®re des stockages
  if (!jwt) {
      jwt = sessionStorage.getItem("jwt") || 
            localStorage.getItem("jwt") || 
            document.cookie.split('; ').find(row => row.startsWith('jwt='))?.split('=')[1];
  }

  if (!jwt || typeof jwt !== 'string') { // V√©rifie que jwt est bien une cha√Æne
      console.warn("‚ö†Ô∏è Aucun JWT trouv√© !");
      return { email: "", prenom: "", role: "", abonnement: "" }; // ‚úÖ Toujours des strings
  }

  try {
      const decoded: any = jwtDecode(jwt);
      return {
          email: decoded.email || "", // ‚úÖ Remplace `null` par `""`
          prenom: decoded.prenom || decoded.name || "",
          role: decoded.role || "",
          abonnement: decoded.abonnement || ""
      };
  } catch (error) {
      console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
      return { email: "", prenom: "", role: "", abonnement: "" }; // ‚úÖ Toujours des valeurs valides
  }
}


export function isTokenExpired(token: string): boolean {
  try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.exp * 1000 < Date.now();
  } catch (e) {
      return true; // ‚ö†Ô∏è Si erreur, on consid√®re le token expir√©
  }
}


export async function getValidToken(): Promise<string | null> {
  console.log("üîç V√©rification des tokens en cours...");

  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  if (jwt && !isJwtExpired(jwt)) {
    console.log("‚úÖ JWT valide trouv√© dans localStorage !");
    return jwt;
  }

  jwt = await getToken();
  console.log("üìå [DEBUG] JWT brut r√©cup√©r√© depuis IndexedDB :", jwt);
  if (jwt && !isJwtExpired(jwt)) {
    console.log("‚úÖ JWT valide trouv√© dans IndexedDB !");
    return jwt;
  }

  console.warn("üö® JWT expir√© ou absent, tentative de refresh...");

  // üõë Nouveau : protection contre un refresh interrompu par un reload
  if (sessionStorage.getItem("refreshInProgress")) {
    console.log("üß± Refresh d√©tect√© via sessionStorage, attente s√©curis√©e...");
    await new Promise(resolve => setTimeout(resolve, 1000)); // ou 1500ms
    jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
    if (jwt && !isJwtExpired(jwt)) {
      console.log("‚úÖ JWT r√©cup√©r√© apr√®s d√©lai de s√©curit√©.");
      return jwt;
    }
    console.warn("‚ö†Ô∏è Toujours pas de JWT apr√®s d√©lai d'attente.");
  }

  // üîÑ Refresh propre
  if (isRefreshing) {
    console.log("‚è≥ Refresh d√©j√† en cours, on attend...");
    return await isRefreshing;
  }

  try {
    sessionStorage.setItem("refreshInProgress", "true");
    isRefreshing = refreshToken(); // ‚úÖ
    const newJwt = await isRefreshing;

    if (newJwt) {
      console.log("‚úÖ Refresh r√©ussi, nouveau JWT obtenu.");
      localStorage.setItem("lastRefreshAt", Date.now().toString()); // facultatif
      return newJwt;
    } else {
      console.error("‚ùå Refresh √©chou√©, JWT non r√©cup√©r√© !");
      return null;
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du rafra√Æchissement du JWT :", error);
    return null;
  } finally {
    isRefreshing = null;
    sessionStorage.removeItem("refreshInProgress");
  }
}


async function waitForRefresh(timeout = 5000): Promise<string | null> {
  const start = Date.now();
  while (isRefreshing && Date.now() - start < timeout) {
    await new Promise(r => setTimeout(r, 100));
  }

  const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  return jwt && !isJwtExpired(jwt) ? jwt : null;
}


export function setToken(token: string) {
  if (!token) return;

  // üåç Sauvegarde dans LocalStorage
  localStorage.setItem("jwt", token);

  // üîê Sauvegarde dans les cookies (HTTP-only si c√¥t√© serveur)
  Cookies.set("jwt", token, { secure: true, sameSite: "Strict", expires: 7 });

  // üñ•Ô∏è Sauvegarde dans SessionStorage
  sessionStorage.setItem("jwt", token);

  console.log("‚úÖ Token sauvegard√© partout !");
}
// Fonction pour r√©cup√©rer le JWT depuis IndexedDB
export async function getJWTFromIndexedDB(): Promise<string | null> {
  try {
    const db = await getAuthDB();

    
    if (!db.objectStoreNames.contains("authStore")) {
      console.warn("‚ö†Ô∏è 'authStore' absent, impossible de r√©cup√©rer le JWT !");
      return null;
    }

    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");
    const result = await store.get("jwt");

    console.log("üîç JWT r√©cup√©r√© depuis IndexedDB :", result);

    return result?.value ?? null;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
    return null;
  }
}







export async function storeUserInfo(userData: { prenom: string; email: string }) {
  if (!userData?.prenom || !userData?.email) {
    console.warn("‚ö†Ô∏è Informations utilisateur incompl√®tes, stockage annul√©.");
    return;
  }

  try {
    const db = await getAuthDB();

    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    // üî• V√©rifie si le store utilise un keyPath ou non
    const hasKeyPath = store.keyPath !== null;

    if (hasKeyPath) {
      await store.put({ key: "prenom", value: userData.prenom });
      await store.put({ key: "email", value: userData.email });
    } else {
      await store.put({ value: userData.prenom }, "prenom");
      await store.put({ value: userData.email }, "email");
    }

    console.log("‚úÖ Infos utilisateur enregistr√©es dans IndexedDB.");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'enregistrement des infos utilisateur :", error);
  }
}


export async function restoreUserInfo(): Promise<UserInfo | null> {
  console.log("üîÑ Restauration des infos utilisateur...");

  // V√©rifier si les donn√©es existent d√©j√†
  const prenomExists = localStorage.getItem("prenom") || sessionStorage.getItem("prenom");
  const emailExists = localStorage.getItem("email") || sessionStorage.getItem("email");

  if (prenomExists && emailExists) {
    console.log("‚úÖ Infos utilisateur d√©j√† pr√©sentes, aucune restauration n√©cessaire.");
    return null; // ‚úÖ Ajout d'un `return null;` explicite pour √©viter l'erreur
  }

  try {
    const db = await getAuthDB();

    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");

    const prenomData = await store.get("prenom");
    const emailData = await store.get("email");

    let prenom = prenomData?.value || null;
    let email = emailData?.value || null;

    if (prenom) {
      localStorage.setItem("prenom", prenom);
      sessionStorage.setItem("prenom", prenom);
    }

    if (email) {
      localStorage.setItem("email", email);
      sessionStorage.setItem("email", email);
    }

    console.log("‚úÖ Infos utilisateur restaur√©es !");
    
    // ‚úÖ Retourne un objet `UserInfo` si les donn√©es sont valides
    if (prenom && email) {
      return { prenom, email } as UserInfo;
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des infos utilisateur :", error);
  }

  return null; // ‚úÖ Ajout d'un `return null;` explicite si aucune donn√©e n'est trouv√©e
}


// V√©rifie et rafra√Æchit le JWT au r√©veil de l'application (quand l'application revient en premier plan)
export async function checkAndRefreshOnWakeUp() {
  console.log("‚è∞ V√©rification du refresh au r√©veil...");

  const now = Date.now();
  const lastRefresh = Number(localStorage.getItem("lastRefreshTime")) || 0;

  if (now - lastRefresh < 5 * 60 * 1000) {
    console.log("üõë Refresh d√©j√† fait r√©cemment, on attend.");
    return;
  }

  console.log("üîç V√©rification de IndexedDB avant de restaurer les tokens...");
  const isDBReady = await verifyIndexedDBSetup();
  if (!isDBReady) {
    console.warn("‚ö†Ô∏è IndexedDB non disponible, tentative de restauration depuis localStorage...");
  }

  console.log("üõ†Ô∏è R√©cup√©ration des tokens depuis IndexedDB...");
  let storedRefreshToken = await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.warn("‚ö†Ô∏è Aucun refresh token dans IndexedDB, restauration depuis LocalStorage...");
    storedRefreshToken = localStorage.getItem("refreshToken");
    const storedJWT = localStorage.getItem("jwt");

    if (storedRefreshToken && storedJWT) {
      console.log("‚úÖ Tokens trouv√©s dans LocalStorage, sauvegarde dans IndexedDB...");
      await saveTokensToIndexedDB(storedJWT, storedRefreshToken);
    } else {
      console.warn("‚ùå Aucun token valide en IndexedDB ni LocalStorage !");
      return;
    }
  }

  // V√©rifier si le JWT est encore valide
  const jwt = await getJWTFromIndexedDB();
  if (jwt && !isJwtExpired(jwt)) {
    console.log("‚úÖ JWT encore valide, pas besoin de refresh.");
    return;
  }

  console.log("üîÑ JWT expir√©, on tente un refresh...");
  const newJwt = await (refreshToken()); // ‚úÖ Ajoute des parenth√®ses pour lever toute ambigu√Øt√©

  if (newJwt) {
    localStorage.setItem("lastRefreshTime", now.toString());
    console.log("‚úÖ JWT rafra√Æchi avec succ√®s !");
  } else {
    console.warn("‚ùå √âchec du refresh token.");
  }
}
async function saveTokensToIndexedDB(jwt: string, refreshToken: string) {
  try {
    const db = await getAuthDB();

    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.put({ key: "jwt", value: jwt });
    await store.put({ key: "refreshToken", value: refreshToken });

    console.log("‚úÖ Tokens enregistr√©s dans IndexedDB !");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'enregistrement des tokens dans IndexedDB :", error);
  }
}


export function shouldRefreshJwt(jwt: string | null): boolean {
  if (!jwt || !jwt.includes(".")) {
    console.error("üö® JWT invalide ou manquant :", jwt);
    return false;
  }

  try {
    const payload = JSON.parse(atob(jwt.split(".")[1])); // D√©codage du payload
    const exp = payload.exp * 1000; // Convertir en millisecondes
    const now = Date.now();
    const bufferTime = 2 * 60 * 1000; // üîÑ Marge de 2 min avant expiration

    if (now >= exp - bufferTime) {
      console.log("üîÑ Le JWT doit √™tre rafra√Æchi !");
      return true;
    }

    console.log("‚úÖ JWT encore valide.");
    return false;
  } catch (error) {
    console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
    return false;
  }
}




// Fonction pour obtenir le r√¥le de l'utilisateur √† partir du JWT
export function getUserRole(): string | null {
const token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

if (!token) {
  console.warn("‚ùå Aucun JWT trouv√©, l'utilisateur n'est pas authentifi√©.");
  return null; // Si aucun JWT n'est trouv√©, l'utilisateur n'est pas authentifi√©
}

try {
  // D√©codage du JWT pour extraire le payload
  const decoded = JSON.parse(atob(token.split(".")[1]));
  
  // Retourne le r√¥le de l'utilisateur, ou null s'il n'existe pas
  return decoded.role || null; 
} catch (error) {
  console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
  return null; // Si le JWT est malform√©, retourne null
}
}
export function deleteDB(dbName: string): void {
  const dbRequest = indexedDB.deleteDatabase(dbName);

  dbRequest.onsuccess = () => {
    console.log(`Base de donn√©es ${dbName} supprim√©e avec succ√®s.`);
  };

  dbRequest.onerror = (error) => {
    console.error(`Erreur lors de la suppression de la base de donn√©es ${dbName}:`, error);
  };
}


// Fonction pour restaurer les tokens dans IndexedDB


export async function restoreTokensToIndexedDB() {
  console.log("üîÑ V√©rification et restauration des tokens dans IndexedDB...");

  try {
    const db = await getAuthDB();

    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    // ‚úÖ Timeout pour √©viter de rester bloqu√©
    const timeout = new Promise((resolve) => setTimeout(resolve, 5000, "timeout"));

    // üîç V√©rification si les tokens existent d√©j√† en IndexedDB
    const checkTokens = async () => {
      const jwtInDB = await store.get("jwt");
      const refreshTokenInDB = await store.get("refreshToken");
      return jwtInDB && refreshTokenInDB;
    };

    const result = await Promise.race([checkTokens(), timeout]);

    if (result === "timeout") {
      console.warn("‚ö†Ô∏è Temps d'attente trop long, on continue sans bloquer l‚Äôutilisateur.");
      return;
    }

    if (result) {
      console.log("‚úÖ Tokens d√©j√† pr√©sents en IndexedDB, pas besoin de restauration.");
      return;
    }

    // ‚úÖ R√©cup√©ration des tokens depuis d‚Äôautres stockages
    let storedJwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
    let storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

    // ‚úÖ V√©rification des cookies en fallback
    if (!storedJwt) {
      storedJwt = document.cookie.split("; ").find(row => row.startsWith("jwt="))?.split("=")[1] || null;
      if (storedJwt) {
        storedJwt = decodeURIComponent(storedJwt);
        console.log("üç™ JWT restaur√© depuis les cookies !");
      }
    }

    if (!storedRefreshToken) {
      storedRefreshToken = document.cookie.split("; ").find(row => row.startsWith("refreshToken="))?.split("=")[1] || null;
      if (storedRefreshToken) {
        storedRefreshToken = decodeURIComponent(storedRefreshToken);
        console.log("üç™ Refresh Token restaur√© depuis les cookies !");
      }
    }

    if (!storedJwt || !storedRefreshToken) {
      console.warn("‚ö†Ô∏è Impossible de restaurer IndexedDB : tokens manquants.");
      return;
    }

    console.log("üì• Restauration des tokens dans IndexedDB...");

    // ‚úÖ Stockage s√©curis√© dans IndexedDB
    await store.put({ key: "jwt", value: storedJwt });
    await store.put({ key: "refreshToken", value: storedRefreshToken });

    console.log("‚úÖ Tokens mis √† jour dans IndexedDB !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des tokens dans IndexedDB :", error);
  }
}


export async function restoreTokensToIndexedDBIfMissing(): Promise<void> {
  console.log("üîÑ V√©rification et restauration des tokens dans IndexedDB...");

  try {
    const db = await getAuthDB();

    // V√©rifie si IndexedDB contient d√©j√† les tokens
    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");
    
    const jwtEntry = await store.get("jwt");
    const refreshTokenEntry = await store.get("refreshToken");

    const jwtInDB = jwtEntry?.value || null;
    const refreshTokenInDB = refreshTokenEntry?.value || null;

    if (jwtInDB && refreshTokenInDB) {
      console.log("‚úÖ IndexedDB contient d√©j√† les tokens, aucune restauration n√©cessaire.");
      return;
    }

    // üîç V√©rification dans localStorage / sessionStorage
    let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt") || null;
    let refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken") || null;

    // üîç V√©rification dans les cookies si absent ailleurs
    if (!jwt) {
      jwt = document.cookie
        .split("; ")
        .find(row => row.startsWith("jwt="))
        ?.split("=")[1] || null;
      if (jwt) console.log("üç™ JWT restaur√© depuis les cookies !");
    }

    if (!refreshToken) {
      refreshToken = document.cookie
        .split("; ")
        .find(row => row.startsWith("refreshToken="))
        ?.split("=")[1] || null;
      if (refreshToken) console.log("üç™ Refresh Token restaur√© depuis les cookies !");
    }

    // ‚úÖ Si on a trouv√© des tokens ailleurs, on les restaure dans IndexedDB
    if (jwt && refreshToken) {
      console.log("üì• Restauration des tokens dans IndexedDB...");

      const writeTx = db.transaction("authStore", "readwrite");
      const writeStore = writeTx.objectStore("authStore");

      await writeStore.put({ key: "jwt", value: jwt });
      await writeStore.put({ key: "refreshToken", value: refreshToken });

      console.log("‚úÖ Tokens restaur√©s dans IndexedDB !");
    } else {
      console.warn("‚ö†Ô∏è Aucun token valide trouv√© pour restauration.");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des tokens en IndexedDB :", error);
  }
}

// Fonction pour d√©finir les cookies pour le JWT et le refreshToken
export function setTokenCookies(jwt: string | undefined, refreshToken: string | undefined) {
  if (refreshToken) {
    const maxAge = 30 * 24 * 60 * 60; // 30 jours

    // üî• iOS PWA bloque "SameSite=Strict", on le met √† "None"
    if (jwt) {
      document.cookie = `jwt=${jwt}; Max-Age=${maxAge}; Secure; SameSite=None; path=/`;
      console.log("‚úÖ Cookie JWT d√©fini avec expiration longue !");
    }

    document.cookie = `refreshToken=${refreshToken}; Max-Age=${maxAge}; Secure; SameSite=None; path=/`;

    console.log("‚úÖ Cookie Refresh Token d√©fini avec expiration longue !");
  } else {
    console.warn("‚ùå Le refreshToken est undefined ou null, cookie non cr√©√©.");
  }
}


export async function restoreAllTokens() {
  console.log("üîÑ Tentative de restauration compl√®te des tokens...");

  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  let refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  // üîç Si JWT et RefreshToken sont absents, essayer les cookies
  if (!jwt) jwt = document.cookie.split("; ").find(row => row.startsWith("jwt="))?.split("=")[1] || null;
  if (!refreshToken) refreshToken = document.cookie.split("; ").find(row => row.startsWith("refreshToken="))?.split("=")[1] || null;

  // üîç Si toujours rien, essayer IndexedDB
  if (!jwt) jwt = await getJWTFromIndexedDB();
  if (!refreshToken) refreshToken = await getRefreshTokenFromDB();

  if (jwt && refreshToken) {
    console.log("‚úÖ Tokens retrouv√©s, synchronisation de tous les stockages...");
    syncAllStorages(jwt, refreshToken);
  } else {
    console.warn("‚ö†Ô∏è Aucun JWT ou Refresh Token valide trouv√© !");
  }
}



// Fonction pour v√©rifier si le JWT a expir√©
// V√©rifie si le JWT est expir√© ou invalide
export function isJwtExpired(token: string | { key: string; value: string } | null): boolean {
  if (!token) {
    console.warn("‚ö†Ô∏è [isJwtExpired] Aucun token fourni (null/undefined).");
    return true;
  }

  const jwtString = typeof token === "object" && token.value ? token.value : token;

  if (typeof jwtString !== "string" || !jwtString.includes(".") || jwtString.split(".").length !== 3) {
    console.warn("‚ö†Ô∏è [isJwtExpired] Token malform√© ou non-JWT d√©tect√© :", jwtString);
    return true;
  }

  try {
    console.log("üîç [isJwtExpired] D√©codage du token...");

    function base64UrlDecode(str: string): string {
      str = str.replace(/-/g, "+").replace(/_/g, "/");
      while (str.length % 4) str += "=";
      return atob(str);
    }

    const decodedPayload = JSON.parse(base64UrlDecode(jwtString.split(".")[1]));

    if (typeof decodedPayload.exp !== "number") {
      console.warn("‚ö†Ô∏è [isJwtExpired] Champ 'exp' absent ou malform√© :", decodedPayload);
      return true;
    }

    const now = Date.now();
    const leeway = 10 * 1000; // en ms
    const exp = decodedPayload.exp * 1000;

    console.log(`üïí [isJwtExpired] Exp = ${exp} (${new Date(exp).toISOString()})`);
    console.log(`üïí [isJwtExpired] Now = ${now} (${new Date(now).toISOString()})`);
    console.log(`‚è≥ [isJwtExpired] Leeway = ${leeway} ms`);

    if (exp < now + leeway) {
      console.warn("‚ö†Ô∏è [isJwtExpired] Token expir√© avec leeway.");
      return true;
    }

    console.log("‚úÖ [isJwtExpired] Token encore valide.");
    return false;
  } catch (error) {
    console.error("‚ùå [isJwtExpired] Erreur lors du d√©codage du JWT :", error);
    return true;
  }
}




// Fonction pour obtenir un JWT valide (en cas de token expir√© ou malform√©, rafra√Æchit avec le refresh token)






// ‚úÖ Fonction de d√©codage Base64 robuste
function decodeBase64(str: string): string {
  try {
    return atob(str);
  } catch (error) {
    console.error("‚ùå Erreur lors du d√©codage Base64 :", error);
    return "";
  }
}



// V√©rifie et restaure les tokens depuis les diff√©rents stockages
export async function checkAndRestoreTokens(): Promise<"valid" | "expired" | "unauthenticated"> {
  console.log("üîÑ V√©rification des tokens...");

  if (localStorage.getItem("session_expired") === "true") {
    console.warn("üö® Session marqu√©e comme expir√©e, arr√™t de la r√©cup√©ration des tokens.");
    return "expired"; // üö® Session explicitement expir√©e
  }

  // ‚úÖ Unification de la r√©cup√©ration du refreshToken
  let storedRefreshToken =
  localStorage.getItem("refreshToken") ||
  sessionStorage.getItem("refreshToken") ||
  await getRefreshTokenFromDB();


  if (!storedRefreshToken) {
    console.warn("‚ö†Ô∏è Aucun refreshToken trouv√©, v√©rification du JWT...");

    let jwt = await getValidToken();
    if (jwt && !isJwtExpired(jwt)) {
      console.log("‚úÖ JWT encore valide, utilisateur toujours authentifi√©.");
      return "valid"; // ‚úÖ L'utilisateur est encore connect√© avec un JWT valide
    }

    console.warn("‚ùå Aucun JWT valide trouv√©, l'utilisateur n'a jamais √©t√© authentifi√©.");
    return "unauthenticated"; // üö® Aucune trace d'authentification
  }

  // ‚úÖ Restaurer le refreshToken dans tous les stockages si absent
  if (!document.cookie.includes("refreshToken=")) {
    document.cookie = `refreshToken=${storedRefreshToken}; Secure; SameSite=Strict; path=/`;
    console.log("üç™ Refresh token restaur√© dans les cookies.");
  }
  if (!localStorage.getItem("refreshToken")) {
    localStorage.setItem("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans LocalStorage.");
  }
  if (!sessionStorage.getItem("refreshToken")) {
    sessionStorage.setItem("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans SessionStorage.");
  }

  // ‚úÖ V√©rification du JWT
  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  if (!jwt || isJwtExpired(jwt)) {
    console.warn("üö® JWT manquant ou expir√©, tentative de rafra√Æchissement...");

    const newJwt = await (refreshToken()); // ‚úÖ Ajoute des parenth√®ses pour lever toute ambigu√Øt√©
    if (!newJwt) {
      console.error("‚ùå Refresh √©chou√©, session expir√©e.");
      return "expired"; // üö® Session expir√©e car le refreshToken est soit invalide, soit refus√©
    }

    console.log("‚úÖ Nouveau JWT restaur√© avec succ√®s.");
    return "valid"; // ‚úÖ Nouveau JWT valide apr√®s refresh
  }

  console.log("‚úÖ JWT valide, aucun rafra√Æchissement n√©cessaire.");
  return "valid";
}




// Fonction centralis√©e pour interagir avec les diff√©rents stockages (localStorage, sessionStorage, cookies, IndexedDB)
const storageManager = {
  async getTokenFromAllStorages(key: string): Promise<string | null> {
    const storedToken = sessionStorage.getItem(key) || localStorage.getItem(key);
    if (storedToken) return storedToken;

    const dbToken = await getJWTFromIndexedDB();  // √Ä d√©finir plus tard
    if (dbToken) return dbToken;

    const cookieToken = document.cookie.split("; ").find(row => row.startsWith(`${key}=`))?.split("=")[1];
    return cookieToken || null;
  },

  setTokenInAllStorages(key: string, token: string) {
    sessionStorage.setItem(key, token);
    localStorage.setItem(key, token);
    document.cookie = `${key}=${token}; Secure; SameSite=Strict; path=/`;
    console.log(`üì¶ Token "${key}" mis √† jour dans tous les stockages`);
  },

  removeTokenFromAllStorages(key: string) {
    sessionStorage.removeItem(key);
    localStorage.removeItem(key);
    document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;
    console.log(`üóëÔ∏è Token "${key}" supprim√© de tous les stockages`);
  }
};

export async function getRefreshTokenFromDB(): Promise<string | null> {
  console.log("üîÑ R√©cup√©ration du refresh token...");

  // 1. V√©rification de localStorage
  let storedRefreshToken = localStorage.getItem("refreshToken")?.trim();
  
  if (storedRefreshToken) {
    console.log("‚úÖ Refresh token trouv√© dans localStorage.");
  } else {
    console.log("üîç Aucun refresh token trouv√© dans localStorage.");
  }

  if (!storedRefreshToken) {
    console.log("üîç Aucun refresh token trouv√© dans localStorage, v√©rification dans sessionStorage...");
    // 2. Si non trouv√©, v√©rifie sessionStorage
    storedRefreshToken = sessionStorage.getItem("refreshToken")?.trim();

    if (storedRefreshToken) {
      console.log("‚úÖ Refresh token trouv√© dans sessionStorage.");
    } else {
      console.log("üîç Aucun refresh token trouv√© dans sessionStorage.");
    }
  }

  if (!storedRefreshToken) {
    console.log("üîç Aucun refresh token trouv√© dans localStorage ou sessionStorage, v√©rification dans IndexedDB...");
    // 3. Si toujours pas trouv√©, v√©rifie IndexedDB
    try {
      const db = await getAuthDB();

      const tx = db.transaction("authStore", "readonly");
      const store = tx.objectStore("authStore");
      const result = await store.get("refreshToken"); // ‚úÖ Utilisation correcte avec transaction

      storedRefreshToken = result?.value || null;
      return storedRefreshToken ?? null; // garantit un retour type `string | null`

      if (storedRefreshToken) {
        console.log("‚úÖ Refresh token trouv√© dans IndexedDB.");
      } else {
        console.log("üîç Aucun refresh token trouv√© dans IndexedDB.");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
      storedRefreshToken = null;
    }
  }

  if (storedRefreshToken) {
    console.log("‚úÖ Refresh token r√©cup√©r√© :", storedRefreshToken);
  } else {
    console.log("‚ö†Ô∏è Aucun refresh token trouv√© apr√®s v√©rification dans tous les stockages.");
  }

  return storedRefreshToken ?? null;
}





export async function isAuthStoreReady(): Promise<boolean> {
  try {
    const db = await getAuthDB();

    return db.objectStoreNames.contains("authStore");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
    return false;
  }
}


async function deleteIndexedDB(): Promise<void> {
  return new Promise((resolve, reject) => {
    const deleteRequest = indexedDB.deleteDatabase("AuthDB");

    deleteRequest.onsuccess = () => {
      console.log("‚úÖ IndexedDB supprim√©e avec succ√®s.");
      resolve();
    };

    deleteRequest.onerror = (event) => {
      console.error("‚ùå Erreur lors de la suppression d'IndexedDB :", event);
      reject(event);
    };
  });
}

async function restoreTokensAfterDBReset() {
  console.log("üîç V√©rification : restoreTokensAfterDBReset() appel√©e !");
  
  const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  const refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  if (!jwt && !refreshToken) {
    console.warn("‚ö†Ô∏è Aucun token trouv√© en localStorage/sessionStorage, restauration ignor√©e.");
    return;
  }

  try {
    console.log("üîÑ Sauvegarde des tokens dans IndexedDB...");
    const db = await openIndexedDB("AuthDB", 1);
    const transaction = db.transaction("authStore", "readwrite");
    const store = transaction.objectStore("authStore");

    if (jwt) {
      console.log("‚úÖ JWT restaur√© :", jwt);
      store.put({ key: "jwt", token: jwt });
    }
    if (refreshToken) {
      console.log("‚úÖ Refresh Token restaur√© :", refreshToken);
      store.put({ key: "refreshToken", token: refreshToken });
    }

    transaction.oncomplete = () => {
      console.log("‚úÖ Transaction IndexedDB termin√©e !");
    };

    transaction.onerror = () => {
      console.error("‚ùå Erreur lors de la transaction IndexedDB !");
    };

  } catch (error) {
    console.error("‚ùå √âchec de la restauration des tokens dans IndexedDB :", error);
  }
}




export async function verifyIndexedDBSetup(): Promise<boolean> {
  return new Promise((resolve) => {
    const request = indexedDB.open("AuthDB", 1);

    request.onsuccess = async () => {
      const db = request.result;

      if (!db.objectStoreNames.contains("authStore")) {
        console.warn("‚ö†Ô∏è 'authStore' manquant ! Suppression et recr√©ation...");
        db.close();

        try {
          await deleteIndexedDB();
          console.log("üîÑ IndexedDB supprim√©e, recr√©ation en cours...");

          const isRecreated = await verifyIndexedDBSetup();

          if (isRecreated) {
            console.log("‚úÖ IndexedDB recr√©√©e, restauration des tokens...");
            setTimeout(async () => {
              await restoreTokensAfterDBReset();
            }, 100);
          }

          resolve(isRecreated);
        } catch (error) {
          console.error("‚ùå √âchec de la suppression de IndexedDB :", error);
          resolve(false);
        }
      } else {
        console.log("‚úÖ IndexedDB et 'authStore' pr√™ts.");
        resolve(true);
      }
    };

    request.onerror = () => {
      console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB !");
      resolve(false);
    };

    request.onupgradeneeded = (event) => {
      console.log("üìå Mise √† niveau IndexedDB : cr√©ation de 'authStore'...");

      const db = (event.target as IDBOpenDBRequest).result;
      if (!db.objectStoreNames.contains("authStore")) {
        db.createObjectStore("authStore", { keyPath: "key" });
      }
    };
  });
}








export async function getItemFromStore(storeName: string, key: string): Promise<string | null> {
  try {
    console.log(`üîç [DEBUG] Tentative de r√©cup√©ration de ${key} dans ${storeName}...`);

    // ‚úÖ Ouverture de la base sans gestion d'upgrade ici !
    const db = await openIndexedDB("AuthDB", 1);

    // üö® V√©rification que le store existe
    if (!db.objectStoreNames.contains(storeName)) {
      console.warn(`‚ö†Ô∏è Store ${storeName} absent. IndexedDB pourrait √™tre corrompu.`);
      return null;
    }

    // ‚úÖ Lecture du store
    const tx = db.transaction(storeName, "readonly");
    const store = tx.objectStore(storeName);
    const request = store.get(key);

    return new Promise((resolve) => {
      request.onsuccess = async () => {
        if (request.result) {
          console.log(`‚úÖ [DEBUG] ${key} r√©cup√©r√© depuis IndexedDB :`, request.result);
          resolve(request.result.value ?? request.result);
        } else {
          console.warn(`‚ö†Ô∏è Cl√© ${key} absente dans IndexedDB.`);

          // üîÑ V√©rification dans localStorage et sessionStorage
          const fallbackValue = localStorage.getItem(key) || sessionStorage.getItem(key);
          if (fallbackValue) {
            console.log(`üîÑ ${key} trouv√© en stockage local, restauration dans IndexedDB...`);
            await saveItemToStore(storeName, key, fallbackValue);
            resolve(fallbackValue);
          } else {
            console.warn(`üö® Aucun ${key} trouv√© dans IndexedDB, localStorage ou sessionStorage.`);
            resolve(null);
          }
        }
      };

      request.onerror = () => {
        console.error(`‚ùå Erreur lors de la r√©cup√©ration de ${key} dans IndexedDB.`);
        resolve(null);
      };
    });
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'acc√®s √† IndexedDB (${storeName} - ${key}) :`, error);
    return null;
  }
}

export async function saveItemToStore(storeName: string, key: string, value: string): Promise<void> {
  try {
    console.log(`üíæ [DEBUG] Sauvegarde de ${key} dans IndexedDB...`);

    const db = await openIndexedDB("AuthDB", 1);

    if (!db.objectStoreNames.contains(storeName)) {
      console.warn(`‚ö†Ô∏è Impossible de sauvegarder ${key} : le store ${storeName} est absent.`);
      return;
    }

    const tx = db.transaction(storeName, "readwrite");
    const store = tx.objectStore(storeName);
    store.put({ key, value });

    tx.oncomplete = () => console.log(`‚úÖ ${key} enregistr√© avec succ√®s dans IndexedDB.`);
    tx.onerror = () => console.error(`‚ùå Erreur lors de l'enregistrement de ${key} dans IndexedDB.`);
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'acc√®s √† IndexedDB pour sauvegarder ${key} :`, error);
  }
}



export function openIndexedDB(dbName: string, version: number): Promise<IDBDatabase > {
  return new Promise<IDBDatabase>((resolve, reject) => {
   const request = indexedDB.open(dbName, version);

   request.onupgradeneeded = (event) => {
     const db = request.result;
     console.log("‚ö° Mise √† jour d'IndexedDB, v√©rification des object stores...");

     if (!db.objectStoreNames.contains("authStore")) {
       console.log("üõ†Ô∏è Cr√©ation de l'object store 'authStore'...");
       db.createObjectStore("authStore", { keyPath: "key" }); // ‚úÖ Tr√®s important !
     }
   };

   request.onsuccess = () => {
     console.log("‚úÖ IndexedDB ouverte avec succ√®s !");
     resolve(request.result);
   };

   request.onerror = () => {
     console.error("‚ùå Erreur d'ouverture IndexedDB :", request.error);
     reject(request.error);
   };
 });
}

export function putItemInStore(store: IDBObjectStore, key: string, value: string): Promise<void> {
  return new Promise((resolve, reject) => {
    const request = store.put({ key, value });
    request.onsuccess = () => resolve();
    request.onerror = () => reject(request.error);
  });
}

// Fonction pour prot√©ger IndexedDB contre un nettoyage automatique
let indexedDBCleanupRunning = false; // üî• V√©rifie si la fonction tourne d√©j√†

let isRestoringTokens = false;

export async function restoreTokensIfNeeded(): Promise<boolean> {
  if (isRestoringTokens) {
    console.warn("‚ö†Ô∏è Restauration d√©j√† en cours, on ignore !");
    return false;
  }
  isRestoringTokens = true;

  console.log("üîÑ V√©rification IndexedDB pour restaurer les tokens...");

  // ‚úÖ Timeout pour √©viter un blocage si IndexedDB est lente
  const indexedDBAvailable = await Promise.race([
    verifyIndexedDBSetup(),
    new Promise((resolve) => setTimeout(() => resolve(false), 5000))
  ]);

  if (!indexedDBAvailable) {
    console.warn("‚ö†Ô∏è IndexedDB non disponible ou trop lente, arr√™t de la r√©cup√©ration.");
    isRestoringTokens = false;
    return false;
  }

  try {
    const jwtFromDB = await Promise.race([
      getItemFromStore("authStore", "jwt"),
      new Promise((resolve) => setTimeout(() => resolve(null), 5000))
    ]);

    const refreshTokenFromDB = await Promise.race([
      getItemFromStore("authStore", "refreshToken"),
      new Promise((resolve) => setTimeout(() => resolve(null), 5000))
    ]);

    const jwtFromStorage = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

    if (!jwtFromDB && !refreshTokenFromDB) {
      console.warn("‚ö†Ô∏è Aucun token trouv√©, inutile de continuer.");
      isRestoringTokens = false;
      return false;
    }

    if (typeof jwtFromDB === "string" && jwtFromDB.trim() !== "") {
      const storedJwtValid = jwtFromStorage && !isJwtExpired(jwtFromStorage);
      if (!storedJwtValid) {
        console.log("‚úÖ Mise √† jour du JWT depuis IndexedDB...");
        localStorage.setItem("jwt", jwtFromDB);
        sessionStorage.setItem("jwt", jwtFromDB);
        document.cookie = `jwt=${jwtFromDB}; Secure; SameSite=Strict; path=/`;
      } else {
        console.log("üöÄ JWT actuel d√©j√† valide, aucune mise √† jour n√©cessaire.");
      }
    }

    if (typeof refreshTokenFromDB === "string" && refreshTokenFromDB.trim() !== "") {
      console.log("‚úÖ Mise √† jour du Refresh Token depuis IndexedDB...");
      localStorage.setItem("refreshToken", refreshTokenFromDB);
      sessionStorage.setItem("refreshToken", refreshTokenFromDB);
      document.cookie = `refreshToken=${refreshTokenFromDB}; Secure; SameSite=Strict; path=/`;
    }

    isRestoringTokens = false;
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des tokens :", error);
    isRestoringTokens = false;
    return false;
  }
}






export async function preventIndexedDBCleanup() {
  if (indexedDBCleanupRunning) return; // üöÄ √âvite plusieurs instances simultan√©es
  indexedDBCleanupRunning = true;

  console.log("üõ°Ô∏è Protection contre la suppression d'IndexedDB...");

  try {
    // üî• V√©rifie si `authStore` existe bien
    const db = await openDB("AuthDB", 1, {
      upgrade(db) {
        if (!db.objectStoreNames.contains("authStore")) {
          console.warn("‚ö†Ô∏è `authStore` manquant, recr√©ation en cours...");
          db.createObjectStore("authStore", { keyPath: "key" }); // ‚úÖ Harmonisation avec "id"
        }
      },
    });

    // ‚úÖ Maintenant qu'on est s√ªr que `authStore` existe, on continue
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    // ‚úÖ Harmonisation : Cl√© "id" au lieu de "key"
    await store.put({ key: "keepAlive", value: Date.now() });

    console.log("‚úÖ IndexedDB maintenu en vie.");
  } catch (error) {
    const err = error as Error;

    console.error("‚ùå Impossible de prot√©ger IndexedDB :", err);

    // üîÑ Si IndexedDB est corrompue, la supprimer et forcer une nouvelle cr√©ation
    if (err.name === "NotFoundError" || err.name === "QuotaExceededError") {
      console.warn("‚ö†Ô∏è IndexedDB corrompue, suppression et recr√©ation...");
      await deleteDB("AuthDB");

      console.log("üîÑ R√©essai apr√®s suppression...");
      await new Promise((resolve) => setTimeout(resolve, 1000)); // üî• Attendre 1 seconde avant de relancer

      await preventIndexedDBCleanup(); // üîÑ Re-tente apr√®s recr√©ation
    }
  }

  // üîÑ Relance la fonction uniquement si IndexedDB est bien active
  setTimeout(async () => {
    indexedDBCleanupRunning = false;
    const isDBReady = await verifyIndexedDBSetup();
    if (isDBReady) {
      preventIndexedDBCleanup();
    }
  }, 24 * 60 * 60 * 1000);
}

export let isRefreshingNow = false; // ‚úÖ Ajout de `export`

let isRefreshing: Promise<string | null> | null = null;







// Variables globales √† d√©finir hors de la fonction
// let isRefreshing: Promise<string | null> | null = null;
// let resolvePromise: ((value: string | null) => void) | null = null;
/**
 * V√©rifie si le JWT et le refresh token sont toujours pr√©sents dans IndexedDB apr√®s plusieurs heures.
 */
export async function checkIndexedDBStatus(): Promise<void> {
  try {
    // üî• V√©rifie si `authStore` existe et le recr√©e si besoin
    const db = await openDB("AuthDB", 1, {
      upgrade(db) {
        if (!db.objectStoreNames.contains("authStore")) {
          console.warn("‚ö†Ô∏è `authStore` manquant, recr√©ation en cours...");
          db.createObjectStore("authStore", { keyPath: "key" });
        }
      },
    });

    // ‚úÖ V√©rification apr√®s recr√©ation
    if (!db.objectStoreNames.contains("authStore")) {
      console.warn("‚ùå `authStore` n'existe toujours pas apr√®s tentative de recr√©ation !");
      return;
    }

    // ‚úÖ Maintenant qu'on est s√ªr que `authStore` existe, on peut acc√©der aux donn√©es
    const jwt = await db.get("authStore", "jwt");
    const refreshToken = await db.get("authStore", "refreshToken");

    console.log("üîç V√©rification IndexedDB :");
    console.log("üìå JWT :", jwt ? jwt.value : "‚ùå Perdu !");
    console.log("üìå Refresh Token :", refreshToken ? refreshToken.value : "‚ùå Perdu !");
  } catch (error) {
    const err = error as Error; // ‚úÖ Correction du typage
  
    console.error("‚ùå Erreur lors de la v√©rification d'IndexedDB :", err);
  
    if (err.name === "NotFoundError") {
      console.warn("‚ö†Ô∏è IndexedDB corrompue, suppression et recr√©ation...");
      await deleteDB("AuthDB");
    }
  }
}

import { useAuthStore } from "@/stores/authStore"; // ‚úÖ Ajout de Pinia



export async function refreshToken(): Promise<string | null> {
  if (isRefreshing) {
    console.warn("‚è≥ Un rafra√Æchissement est d√©j√† en cours...");
    return await isRefreshing;
  }

  console.log("üîí Activation du verrou de rafra√Æchissement...");
  isRefreshing = new Promise<string | null>((resolve) => {
    resolvePromise = resolve;
  });

  try {
    let token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
    if (token && !isJwtExpired(token)) {
      console.log("‚úÖ Token valide trouv√© dans local/session !");
      resolvePromise?.(token);
      return token;
    }

    // üß† LOGS COMPLETS POUR DEBUG
    console.log("üîé CONTENU STOCKAGE AVANT REFRESH");
    console.log("üßæ localStorage.refreshToken :", localStorage.getItem("refreshToken"));
    console.log("üßæ sessionStorage.refreshToken :", sessionStorage.getItem("refreshToken"));
    
    // 1. Priorit√© √† localStorage
    let storedRefreshToken = localStorage.getItem("refreshToken")?.trim();

    // 2. Si non trouv√©, v√©rifier sessionStorage
    if (!storedRefreshToken) {
      console.log("üîç Aucun refresh token trouv√© dans localStorage, v√©rification dans sessionStorage...");
      storedRefreshToken = sessionStorage.getItem("refreshToken")?.trim();
    }

    // 3. Si toujours pas trouv√©, v√©rifier IndexedDB
    if (!storedRefreshToken) {
      console.log("üîç Aucun refresh token trouv√© dans localStorage ou sessionStorage, v√©rification dans IndexedDB...");
      const fromDb = await getRefreshTokenFromDB();
      storedRefreshToken = fromDb?.trim();
      console.log("üßæ IndexedDB.refreshToken :", storedRefreshToken);
    }

    console.log("üìå Refresh token final utilis√© :", storedRefreshToken);

    if (!storedRefreshToken || storedRefreshToken === "undefined") {
      console.warn("üö® Refresh token absent, vide ou invalide :", storedRefreshToken);
      await handleRefreshFailure();
      resolvePromise?.(null);
      return null;
    }

    // üåê URL
    const url = `https://cors-proxy-37yu.onrender.com/https://script.google.com/macros/s/AKfycbykYySA5D4taWYaICxCHt6l3WmOM5RNg4P_rCoJowfxusXpSy5D-ZuGFao9UjGWHD86AA/exec?route=refresh&refreshtoken=${encodeURIComponent(storedRefreshToken)}`;
    console.log("üåê URL de refresh construite :", url);
    const overlay = document.getElementById("reconnecting-overlay");
    if (overlay) overlay.style.display = "flex";
    let data;
    try {
      console.time("‚è≥ Dur√©e du fetch de refresh");
      data = await Promise.race([
        fetch(url, { method: "GET" }).then((response) => {
          if (!response.ok) throw new Error(`HTTP ${response.status}`);
          return response.json();
        }),
        new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), 35000)),
      ]);
      console.timeEnd("‚è≥ Dur√©e du fetch de refresh");
    } catch (error) {
      if (error instanceof Error && error.message === "Timeout") {
        console.warn("‚è≥ Timeout d√©tect√©. Tentative de retry unique...");
        try {
          data = await Promise.race([
            fetch(url, { method: "GET" }).then((response) => {
              if (!response.ok) throw new Error(`HTTP ${response.status}`);
              return response.json();
            }),
            new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), 15000)),
          ]);
          console.log("‚úÖ Retry r√©ussi !");
        } catch (retryError) {
          console.error("‚ùå √âchec m√™me apr√®s retry :", retryError);
          throw retryError;
        }
      } else {
        throw error;
      }
    }
    finally {
      // ‚õî Cache l'overlay m√™me en cas d'erreur
      if (overlay) overlay.style.display = "none";
    }
    console.log("üì• R√©ponse brute de l'API :", data);

    if (data?.jwt && data?.refreshToken) {
      const jwt = data.jwt;
      localStorage.setItem("jwt", jwt);
      sessionStorage.setItem("jwt", jwt);

      // Mise √† jour du refreshToken dans localStorage
      localStorage.setItem("refreshToken", data.refreshToken);
      const newExp = Date.now() + 7 * 24 * 60 * 60 * 1000;
      localStorage.setItem("refreshToken_exp", newExp.toString());
      sessionStorage.setItem("refreshToken_exp", newExp.toString());

      const authStore = useAuthStore();
      authStore.setUserToken(jwt);
      authStore.user = {
        email: data.email,
        prenom: data.prenom,
        role: data.role,
        abonnement: data.abonnement,
      };

      console.log("üîÑ Store mis √† jour avec les nouvelles infos :", authStore.user);
     
      await syncAllStorages(jwt, data.refreshToken);

      window.dispatchEvent(new Event("jwt-refreshed"));

      resolvePromise?.(jwt);
      return jwt;
    } else {
      throw new Error("R√©ponse API invalide");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du refresh :", error);
    await handleRefreshFailure();
    resolvePromise?.(null);
    return null;
  } finally {
    console.log("üîì Lib√©ration du verrou de rafra√Æchissement...");
    isRefreshing = null;
    sessionStorage.removeItem("refreshInProgress");
  }
}



// üî• Fonction pour supprimer un item du localStorage/sessionStorage
function removeItemFromStore(key: string, subKey?: string) {
  if (subKey) {
    // Suppression d'un sous-√©l√©ment JSON s'il existe
    const storedValue = window.localStorage.getItem(key);
    if (storedValue) {
      let parsedValue = JSON.parse(storedValue);
      if (typeof parsedValue === "object" && subKey in parsedValue) {
        delete parsedValue[subKey];
        window.localStorage.setItem(key, JSON.stringify(parsedValue));
      }
    }

    const sessionValue = window.sessionStorage.getItem(key);
    if (sessionValue) {
      let parsedSession = JSON.parse(sessionValue);
      if (typeof parsedSession === "object" && subKey in parsedSession) {
        delete parsedSession[subKey];
        window.sessionStorage.setItem(key, JSON.stringify(parsedSession));
      }
    }
  } else {
    // Suppression compl√®te de la cl√©
    window.localStorage.removeItem(key);
    window.sessionStorage.removeItem(key);
  }
}



// Fonction pour g√©rer le rafra√Æchissement du JWT



export async function handleRefreshToken() {
  if (isRefreshing) {
    return; // Si une tentative de rafra√Æchissement est d√©j√† en cours, ne rien faire
  }

  isRefreshing = new Promise<string>((resolve, reject) => {
    resolve("nouveau JWT");
  });  // Utilisation de la variable globale en tant que promesse

  const storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  // Si le refresh token est valide
  if (storedRefreshToken) {
    try {
      const response = await refreshToken(); // Appel API

      // V√©rification et parse de la r√©ponse
      let responseData;
      try {
        // V√©rifier si la r√©ponse est vide ou mal format√©e
        if (!response) {
          throw new Error("R√©ponse du serveur vide ou mal format√©e");
        }
        responseData = JSON.parse(response); // G√®re le cas de `null`
      } catch (error) {
        throw new Error("R√©ponse du serveur invalide ou mal form√©e");
      }
      console.log("üî• refreshToken - r√©ponse : ", responseData);

      // V√©rification de la r√©ponse
      if (responseData.status === "success") {
        const newJwt = responseData.jwt;
        const newRefreshToken = responseData.refreshToken;

        // Mettre √† jour les tokens
        localStorage.setItem("jwt", newJwt);
        sessionStorage.setItem("jwt", newJwt);
        localStorage.setItem("refreshToken", newRefreshToken);
        sessionStorage.setItem("refreshToken", newRefreshToken);

        console.log("‚úÖ Nouveau JWT et Refresh Token r√©cup√©r√©s !");
      } else {
        console.warn("‚ö†Ô∏è √âchec du rafra√Æchissement du token", responseData);
        
      }
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error("‚ùå Erreur lors du rafra√Æchissement du token :", error.message);
      } else {
        console.error("‚ùå Erreur inconnue lors du rafra√Æchissement du token");
      }
      
    } finally {
      isRefreshing = null; // Lib√®re la promesse en la r√©initialisant √† null
    }
  } else {
    console.warn("‚ö†Ô∏è Aucun refresh token trouv√© !");
    
    isRefreshing = null; // Lib√®re la promesse en la r√©initialisant √† null
  }
}




async function syncAllStorages(jwt: string, refreshToken: string) {
  console.log("üîÑ Synchronisation des tokens dans tous les stockages...");

  localStorage.setItem("jwt", jwt);
  sessionStorage.setItem("jwt", jwt);
  localStorage.setItem("refreshToken", refreshToken);
  sessionStorage.setItem("refreshToken", refreshToken);

  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();
  document.cookie = `jwt=${jwt}; expires=${expires}; Secure; SameSite=None; path=/`;
  document.cookie = `refreshToken=${refreshToken}; expires=${expires}; Secure; SameSite=None; path=/`;

  // ‚úÖ S'assurer que la base est bien pr√™te avant d'√©crire dedans
  const db = await getAuthDB(); // attend que l‚Äôupgrade se termine

  await updateJWTInIndexedDB(jwt, db);
  await updateRefreshTokenInDB(refreshToken, db);

  console.log("‚úÖ Tokens restaur√©s et synchronis√©s !");
}




// Fonction pour mettre √† jour les tokens dans tous les stockages
// Fonction pour mettre √† jour les tokens dans tous les stockages
export async function updateTokens(newJwt: string | null, newRefreshToken: string | null) {
  if (!newJwt || !newRefreshToken) {
    console.warn("‚ùå Token manquant, mise √† jour impossible.");
    return;
  }

  console.log("üîÑ Mise √† jour des tokens...");

  try {
    // ‚úÖ Comparaison avec l'ancien refreshToken pour d√©tecter les incoh√©rences
    const oldRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
    if (oldRefreshToken && oldRefreshToken !== newRefreshToken) {
      console.warn("‚ö†Ô∏è Diff√©rence d√©tect√©e dans les refresh tokens ! Mise √† jour forc√©e...");
    }

    // ‚úÖ Stockage dans localStorage et sessionStorage
    localStorage.setItem("jwt", newJwt);
    sessionStorage.setItem("jwt", newJwt);
    localStorage.setItem("refreshToken", newRefreshToken);
    sessionStorage.setItem("refreshToken", newRefreshToken);

    console.log("üì¶ Tokens mis √† jour en localStorage et sessionStorage.");

    // ‚úÖ Stockage dans les cookies (attention, pas HttpOnly)
    document.cookie = `jwt=${newJwt}; Secure; SameSite=None; path=/`;
    document.cookie = `refreshToken=${newRefreshToken}; Secure; SameSite=None; path=/`;

    console.log("üç™ JWT et Refresh Token mis √† jour dans les cookies.");

    // ‚úÖ Mise √† jour dans IndexedDB
    await updateJWTInIndexedDB(newJwt);
    await updateRefreshTokenInDB(newRefreshToken);

    console.log("‚úÖ Tokens mis √† jour partout (LocalStorage, SessionStorage, IndexedDB, Cookie) !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour des tokens :", error);
  }
}





// ‚úÖ Mise √† jour du refreshToken dans IndexedDB

export async function updateRefreshTokenInDB(newRefreshToken: string | null, db?: IDBPDatabase<any>) {

  if (!newRefreshToken) return;
  try {
    db = db || await getAuthDB();
    if (!db) throw new Error("IndexedDB non disponible");

    const tx = db.transaction("authStore", "readwrite");
    await tx.objectStore("authStore").put({ key: "refreshToken", value: newRefreshToken });
    await new Promise((resolve, reject) => {
      tx.oncomplete = () => resolve(null);
      tx.onerror = () => reject(tx.error);
    });
    
    console.log("‚úÖ Refresh token mis √† jour dans IndexedDB :", newRefreshToken);
  } catch (err) {
    console.warn("‚ö†Ô∏è Erreur refreshToken ‚Üí", err);
  }
}




// ‚úÖ Mise √† jour du JWT dans IndexedDB

Travaux maison
Aujourd‚Äôhui
Chargement √©cran PWA
V√©rification refresh JWT PWA
Micro flash vue solution
Optimisation code Apps Script
√âchecs appels API Apps Script
Traitement r√©ponse API
Hier
JWT refresh timeout error
New chat
VS Code Help
New chat
New chat
Probl√®me build Vite
Installer PWA v√©rification
V√©rification expiration JWT
Afficher les plans
Acc√®s illimit√©, fonctionnalit√©s pour les √©quipes, et bien plus encore
Vous avez dit :
regarde les logs de ma pwa : 

api.ts:1491 üîí Activation du verrou de rafra√Æchissement...
api.ts:1505 üîé CONTENU STOCKAGE AVANT REFRESH
api.ts:1506 üßæ localStorage.refreshToken : 8frEAiS6ZwH67mPiD9PuitS9CrDwji8aFLqk8y9a
api.ts:1507 üßæ sessionStorage.refreshToken : null
api.ts:1526 üìå Refresh token final utilis√© : 8frEAiS6ZwH67mPiD9PuitS9CrDwji8aFLqk8y9a
api.ts:1537 üåê URL de refresh construite : https://cors-proxy-37yu.onrender.com/https://script.google.com/macros/s/AKfycbykYySA5D4taWYaICxCHt6l3WmOM5RNg4P_rCoJowfxusXpSy5D-ZuGFao9UjGWHD86AA/exec?route=refresh&refreshtoken=8frEAiS6ZwH67mPiD9PuitS9CrDwji8aFLqk8y9a
api.ts:1550 ‚è≥ Dur√©e du fetch de refresh: 2849.7001953125 ms
api.ts:1575 üì• R√©ponse brute de l'API : {jwt: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6I‚Ä¶Y3OH0.GHvn1k4gyyj+lVxEx9qJj9RMBXOtD3lPQ1rw+EpOB2A', refreshToken: '1Frs4SkjMOin9TESIy7dJAfkrSgvYzak1RKtnhj5', email: 'zaza@zaza.com', prenom: 'Zaza', role: 'user', ‚Ä¶}
authStore.js:39 JWT mis √† jour :  eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InphemFAemF6YS5jb20iLCJwcmVub20iOiJaYXphIiwicm9sZSI6InVzZXIiLCJhYm9ubmVtZW50IjoiZ3JhdHVpdCIsImV4cCI6MTc0MjkxODY3OH0.GHvn1k4gyyj+lVxEx9qJj9RMBXOtD3lPQ1rw+EpOB2A
api.ts:1597 üîÑ Store mis √† jour avec les nouvelles infos : Proxy(Object) {email: 'zaza@zaza.com', prenom: 'Zaza', role: 'user', abonnement: 'gratuit'}
api.ts:1722 üîÑ Synchronisation des tokens dans tous les stockages...
api.ts:1818 ‚ö†Ô∏è Erreur JWT ‚Üí NotFoundError: Failed to execute 'transaction' on 'IDBDatabase': One of the specified object stores was not found.
    at Proxy.<anonymous> (idb.js?v=329f3367:102:22)
    at updateJWTInIndexedDB (api.ts:1813:19)
    at syncAllStorages (api.ts:1736:9)
    at async refreshToken (api.ts:1599:7)
    at async getValidToken (api.ts:381:20)
    at async Proxy.fetchFromAPI (Dashboard.vue:539:15)
    at async Dashboard.vue:168:9
updateJWTInIndexedDB @ api.ts:1818
syncAllStorages @ api.ts:1736
await in syncAllStorages
refreshToken @ api.ts:1599
await in refreshToken
getValidToken @ api.ts:380
await in getValidToken
fetchFromAPI @ Dashboard.vue:539
(anonyme) @ Dashboard.vue:168Comprendre cet avertissementAI
api.ts:1801 ‚ö†Ô∏è Erreur refreshToken ‚Üí NotFoundError: Failed to execute 'transaction' on 'IDBDatabase': One of the specified object stores was not found.
    at Proxy.<anonymous> (idb.js?v=329f3367:102:22)
    at updateRefreshTokenInDB (api.ts:1796:19)
    at syncAllStorages (api.ts:1737:9)
    at async refreshToken (api.ts:1599:7)
    at async getValidToken (api.ts:381:20)
    at async Proxy.fetchFromAPI (Dashboard.vue:539:15)
    at async Dashboard.vue:168:9
updateRefreshTokenInDB @ api.ts:1801
syncAllStorages @ api.ts:1737
await in syncAllStorages
refreshToken @ api.ts:1599
await in refreshToken
getValidToken @ api.ts:380
await in getValidToken
fetchFromAPI @ Dashboard.vue:539
(anonyme) @ Dashboard.vue:168Comprendre cet avertissementAI
api.ts:1739 ‚úÖ Tokens restaur√©s et synchronis√©s !
api.ts:1614 üîì Lib√©ration du verrou de rafra√Æchissement...
api.ts:384 ‚úÖ Refresh r√©ussi, nouveau JWT obtenu.
Dashboard.vue:548 üì° URL API : https://cors-proxy-37yu.onrender.com/https://script.google.com/macros/s/AKfycbz-K2F1WavlIe5pxTaXwnirV1pw9pjiq6Q776zui50scu7qNaJZBVCUFfh3frkw7GVhWg/exec?route=planning&jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InphemFAemF6YS5jb20iLCJwcmVub20iOiJaYXphIiwicm9sZSI6InVzZXIiLCJhYm9ubmVtZW50IjoiZ3JhdHVpdCIsImV4cCI6MTc0MjkxODY3OH0.GHvn1k4gyyj%2BlVxEx9qJj9RMBXOtD3lPQ1rw%2BEpOB2A&email=zaza@zaza.com&prenom=Zaza
Dashboard.vue:557 üì° Data payload re√ßue : {error: '√âl√®ve non inscrit', logs: Array(3)}
Dashboard.vue:560 ‚ÑπÔ∏è √âl√®ve connect√© mais pas encore inscrit √† un cours.
fetchFromAPI @ Dashboard.vue:560
await in fetchFromAPI
(anonyme) @ Dashboard.vue:168Comprendre cet avertissementAI
index.ts:74 ‚û°Ô∏è Navigation vers : /mon-espace
index.ts:82 üîê Page prot√©g√©e d√©tect√©e, v√©rification du JWT...
api.ts:343 üîç V√©rification des tokens en cours...

aide moi
ChatGPT a dit :
Tu as deux erreurs principales dans les logs :

‚ùå Erreur IndexedDB (NotFoundError)
NotFoundError: Failed to execute 'transaction' on 'IDBDatabase': One of the specified object stores was not found.
Cause : Ton code essaie d‚Äô√©crire dans un object store (table) d‚ÄôIndexedDB qui n‚Äôexiste pas.

üí° Solution : V√©rifie la cr√©ation de ta base IndexedDB et les stores utilis√©s. Tu dois d‚Äôabord les cr√©er dans onupgradeneeded :

const request = indexedDB.open("MaDB", 1);

request.onupgradeneeded = function (event) {
  const db = event.target.result;
  if (!db.objectStoreNames.contains("jwtStore")) {
    db.createObjectStore("jwtStore", { keyPath: "id" });
  }
  if (!db.objectStoreNames.contains("refreshStore")) {
    db.createObjectStore("refreshStore", { keyPath: "id" });
  }
};
Et bien s√ªr, tes fonctions updateJWTInIndexedDB ou updateRefreshTokenInDB doivent utiliser le bon nom de store : "jwtStore" ou "refreshStore" selon ton cas.

‚ùå Erreur API planning : "√âl√®ve non inscrit"
{error: '√âl√®ve non inscrit'}
Cause : Ton backend Google Sheets ne trouve pas l‚Äô√©l√®ve "zaza@zaza.com" dans la feuille concern√©e ("Cours" ? "Planning" ?).

üí° Solution : V√©rifie dans ton Google Sheets :

Que l‚Äôemail zaza@zaza.com est bien pr√©sent dans la bonne feuille

Que ton script c√¥t√© App Script lit la bonne colonne pour matcher les emails

Que tu fais un toLowerCase() pour comparer les emails sans casse

‚úÖ Le reste est OK :
Le refresh token fonctionne

Le nouveau JWT est bien stock√© et utilis√©

Tu veux que je t‚Äôaide √† corriger les fonctions IndexedDB dans ton code directement ?

Vous avez dit :
j'ai bien √ßa : 
   request.onupgradeneeded = function (event) {
      console.warn("‚ö†Ô∏è IndexedDB mis √† jour, v√©rification des stores...");
      const db = (event.target as IDBRequest<IDBDatabase>)?.result;
      if (!db.objectStoreNames.contains("authStore")) {
        db.createObjectStore("authStore", { keyPath: "key" });
        console.log("‚úÖ 'authStore' cr√©√© !");
      }
    };
ChatGPT a dit :
Parfait, ton authStore est bien cr√©√© dans onupgradeneeded.

Mais dans les erreurs, tu as :

Failed to execute 'transaction' on 'IDBDatabase': One of the specified object stores was not found.
Donc ton code essaie probablement d'acc√©der √† un autre store que "authStore".

üîç V√©rifie dans updateJWTInIndexedDB ou updateRefreshTokenInDB :
Cherche un truc du genre :

const tx = db.transaction("jwtStore", "readwrite");
ou

const tx = db.transaction("refreshStore", "readwrite");
‚û°Ô∏è Et remplace-le par :

const tx = db.transaction("authStore", "readwrite");
Et pareil pour store.put(...), assure-toi qu‚Äôil utilise bien "authStore".

üß™ Pour confirmer rapidement :
Ajoute un console.log("üè∑Ô∏è Store utilis√© :", storeName) avant chaque transaction().

Tu verras lequel est √† l‚Äôorigine du bug.

Tu veux que je te relise la fonction concern√©e si tu me la colles ici ?

Vous avez dit :
j'ai √ßa moi : 
export async function updateJWTInIndexedDB(newJwt: string | null, db?: IDBPDatabase) {
  if (!newJwt) return;
  try {
    db = db || await getAuthDB();
    const tx = db.transaction("authStore", "readwrite");
    await tx.objectStore("authStore").put({ key: "jwt", value: newJwt });
    await tx.done;
    console.log("‚úÖ JWT mis √† jour dans IndexedDB :", newJwt);
  } catch (err) {
    console.warn("‚ö†Ô∏è Erreur JWT ‚Üí", err);
  }
}
ChatGPT a dit :
Ton code est clean ‚úÖ ‚Äî tu utilises bien "authStore" partout.

Donc le souci vient s√ªrement de ta fonction getAuthDB() ‚Üí elle ouvre peut-√™tre une version diff√©rente de la DB sans passer par le onupgradeneeded.

üîç V√©rifie getAuthDB()
Tu devrais avoir un truc comme :

export async function getAuthDB() {
  return await openDB("AuthDB", 1, {
    upgrade(db) {
      if (!db.objectStoreNames.contains("authStore")) {
        db.createObjectStore("authStore", { keyPath: "key" });
      }
    },
  });
}
üõë Si tu fais juste un openDB("AuthDB", 1) sans upgrade, le store ne sera jamais cr√©√© s‚Äôil n‚Äôexiste pas d√©j√† ‚Üí ce qui expliquerait l'erreur.

üí° Solution rapide : assure-toi que ton openDB()

Vous avez dit :
j'ai √ßa : 

import { openDB } from "idb";

let dbInstance: IDBPDatabase<any> | null = null;

export async function getAuthDB() {
  if (dbInstance) return dbInstance;

  dbInstance = await ensureAuthStoreReady();

  return dbInstance;
}
export async function ensureAuthStoreReady() {
    const db = await openDB("AuthDB", 1, {
      upgrade(db) {
        if (!db.objectStoreNames.contains("authStore")) {
          db.createObjectStore("authStore", { keyPath: "key" });
          console.log("‚úÖ Object store 'authStore' cr√©√© !");
        }
      }
    });
  
    return db;
  }
ChatGPT a dit :
Ton code est parfait üëå. ensureAuthStoreReady() fait bien le taf avec l'upgrade.

Donc l‚Äôerreur "One of the specified object stores was not found" vient d‚Äôun autre endroit dans ton code, qui :

appelle indexedDB.open() directement sans upgrade

ou tente une transaction("autreStore")

‚úÖ √âtapes √† faire pour identifier l'erreur :
Recherche dans ton code tous les db.transaction("...")

V√©rifie que tous utilisent "authStore" uniquement.

Si tu trouves "jwtStore" ou "refreshStore" ‚Üí c‚Äôest √ßa le bug.

Exemple fautif :
const tx = db.transaction("refreshStore", "readwrite"); // ‚ùå pas d√©fini
‚û°Ô∏è Doit devenir :

const tx = db.transaction("authStore", "readwrite"); // ‚úÖ
Tu veux que je cherche avec toi si tu me colles aussi la fonction updateRefreshTokenInDB ? C‚Äôest elle qui est aussi dans l‚Äôerreur du log.

Vous avez dit :
v√©rifie : 
declare global {
  interface Window {
    latestJWT?: string;
    jwtRefreshScheduled?: boolean;
  }
}


import { openDB } from "idb";
import { jwtDecode } from "jwt-decode";
import type { UserInfo } from "@/utils/types"; // üìå Adapte le chemin si n√©cessaire
import Cookies from "js-cookie";
import { getAuthDB } from '@/utils/indexedDbUtils'; // chemin selon ton projet

import axios from "axios";
import router from "@/router/index.ts"
let refreshInProgress: Promise<string | null> | null = null;
let resolvePromise: ((value: string | null) => void) | null = null;



// Fonction pour v√©rifier si l'utilisateur est connect√©
export function isUserLoggedIn(): boolean {
// V√©rifie la pr√©sence du JWT dans localStorage ou sessionStorage
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

// Si le JWT est trouv√©, l'utilisateur est connect√©
return !!jwt;
}

// Fonction pour v√©rifier si l'utilisateur est un administrateur
export function isUserAdmin(): boolean {
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

if (!jwt) {
  console.warn("‚ùå Aucun JWT trouv√©, l'utilisateur n'est pas authentifi√©.");
  return false; // Si aucun JWT n'est trouv√©, l'utilisateur n'est pas un admin
}

try {
  // D√©codage du JWT pour extraire le payload
  const decoded = JSON.parse(atob(jwt.split(".")[1]));
  
  // V√©rification du r√¥le dans le payload
  return decoded.role === "admin"; // Retourne true si l'utilisateur est admin
} catch (error) {
  console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
  return false; // Si le JWT est invalide ou malform√©, on consid√®re que l'utilisateur n'est pas admin
}
}

let refreshAttempts = 0; // Compteur de tentatives de refresh
const MAX_REFRESH_ATTEMPTS = 3; // Limite anti-boucle
let isSyncing = false; // Verrou global pour √©viter les boucles infinies
// Fonction pour r√©cup√©rer le token depuis localStorage, sessionStorage, IndexedDB ou cookies
// D√©clare l'interface TokenObject quelque part avant de l'utiliser
export interface TokenObject {
  jwt?: string;
  [key: string]: any;
}
export async function getStoredJWT() {
  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

  // üîç V√©rifier dans les cookies
  if (!jwt) {
    const cookies = document.cookie.split("; ");
    const jwtCookie = cookies.find(row => row.startsWith("jwt="));
    if (jwtCookie) jwt = jwtCookie.split("=")[1];
  }

  // üîç V√©rifier dans IndexedDB de mani√®re asynchrone
  if (!jwt) {
    try {
      jwt = await getJWTFromIndexedDB();
    } catch (error) {
      console.error("‚ö†Ô∏è Erreur lors de l'acc√®s √† IndexedDB :", error);
    }
  }

  return jwt;
}
export async function getToken(): Promise<string | null> {
  console.log("üîÑ Tentative de r√©cup√©ration du JWT...");

  // 1. V√©rification dans localStorage/sessionStorage
  let token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

  if (token) {
    console.log("‚úÖ JWT trouv√© dans localStorage ou sessionStorage.");
  } else {
    console.log("üîç Aucun JWT trouv√© dans localStorage ou sessionStorage.");
  }

  // 2. V√©rification dans les cookies si le token n'est pas trouv√©
  if (!token) {
    console.log("üîç Tentative de r√©cup√©ration du JWT depuis les cookies...");
    token = document.cookie
      .split("; ")
      .find(row => row.startsWith("jwt="))
      ?.split("=")[1] || null;

    if (token) {
      console.log("‚úÖ JWT trouv√© dans les cookies.");
    } else {
      console.log("üîç Aucun JWT trouv√© dans les cookies.");
    }
  }

  // 3. V√©rification finale dans IndexedDB si aucune donn√©e n'est trouv√©e
  if (!token) {
    console.log("üîç Tentative de r√©cup√©ration du JWT depuis IndexedDB...");
    const fromDb = await getJWTFromIndexedDB();

    if (fromDb && typeof fromDb === "object") {
      token = fromDb.jwt ?? null;
    } else {
      token = fromDb; // Assurez-vous que fromDb est une cha√Æne ou null
    }

    if (token) {
      console.log("‚úÖ JWT trouv√© dans IndexedDB.");
    } else {
      console.log("üîç Aucun JWT trouv√© dans IndexedDB.");
    }
  }

  if (!token) {
    console.warn("‚ö†Ô∏è Aucun JWT trouv√© apr√®s toutes les v√©rifications.");
  }

  return token;
}




export async function resetIndexedDB(): Promise<void> {
  if (!window.indexedDB) {
    console.error("‚ùå Impossible de supprimer IndexedDB : non support√©e !");
    return;
  }

  try {
    console.log("üîç V√©rification de IndexedDB avant suppression...");

    const dbs: { name?: string }[] = await indexedDB.databases();
    if (!dbs.some(db => db.name === "AuthDB")) {
      console.log("‚ÑπÔ∏è AuthDB n'existe pas, rien √† supprimer.");
      return;
    }

    console.log("üóëÔ∏è Suppression de la base AuthDB...");
    await new Promise<void>((resolve, reject) => {
      const deleteRequest = indexedDB.deleteDatabase("AuthDB");
      deleteRequest.onsuccess = () => resolve();
      deleteRequest.onerror = () => reject(deleteRequest.error);
    });

    console.log("‚úÖ AuthDB supprim√©e avec succ√®s.");
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de IndexedDB :", error);
  }
}


export async function hasUserEverLoggedIn(): Promise<boolean> {
  const userInfo: UserInfo | null = await restoreUserInfo();

  if (userInfo && typeof userInfo === "object" && "email" in userInfo) {
    console.log("‚úÖ Un utilisateur a d√©j√† √©t√© connect√© :", userInfo.email);
    return true;
  }
  console.log("üöÄ Aucun utilisateur enregistr√©, c'est une premi√®re connexion.");
  return false;
}

// Fonction pour r√©cup√©rer une valeur dans IndexedDB
export function getFromIndexedDB(key: string): Promise<any> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("AuthDB", 1);

    request.onupgradeneeded = function (event) {
      console.warn("‚ö†Ô∏è IndexedDB mis √† jour, v√©rification des stores...");
      const db = (event.target as IDBRequest<IDBDatabase>)?.result;
      if (!db.objectStoreNames.contains("authStore")) {
        db.createObjectStore("authStore", { keyPath: "key" });
        console.log("‚úÖ 'authStore' cr√©√© !");
      }
    };

    request.onsuccess = function (event) {
      const db = (event.target as IDBRequest<IDBDatabase>)?.result;
      if (!db) {
        reject("‚ö†Ô∏è IndexedDB non accessible");
        return;
      }

      if (!db.objectStoreNames.contains("authStore")) {
        reject("‚ùå Object store 'authStore' introuvable !");
        return;
      }

      const transaction = db.transaction("authStore", "readonly");
      const store = transaction.objectStore("authStore");
      const getRequest = store.get(key);

      getRequest.onsuccess = function () {
        resolve(getRequest.result ? getRequest.result.value : null);
      };

      getRequest.onerror = function () {
        reject("‚ùå Erreur lors de la r√©cup√©ration de la cl√© dans IndexedDB");
      };
    };

    request.onerror = function () {
      reject("‚ùå Erreur de connexion √† IndexedDB");
    };
  });
}



// Fonction pour sauvegarder une valeur dans IndexedDB
export function saveToIndexedDB(key: string, value: any): Promise<void> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("myDatabase", 1);

    request.onsuccess = (evt) => {
      const dbRequest = evt.target as IDBRequest<IDBDatabase>;
      if (!dbRequest) {
        reject("Erreur : impossible d‚Äôouvrir la DB");
        return;
      }
      const db = dbRequest.result;
      if (!db) {
        reject("Erreur : IndexedDB non accessible");
        return;
      }

      const transaction = db.transaction("authStore", "readwrite");
      const store = transaction.objectStore("authStore");
      const putRequest = store.put(value, key);

      putRequest.onsuccess = () => {
        resolve();
      };
      putRequest.onerror = () => {
        reject("Erreur lors de la sauvegarde dans IndexedDB");
      };
    };

    request.onerror = () => {
      reject("Erreur de connexion √† IndexedDB");
    };
  });
}



export async function getPrenomFromIndexedDB(): Promise<string | null> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("AuthDB", 1);

    request.onerror = () => {
      console.error("‚ùå [getPrenomFromIndexedDB] Impossible d‚Äôouvrir IndexedDB.");
      reject(null);
    };

    request.onsuccess = () => {
      const db = request.result;

      if (!db.objectStoreNames.contains("authStore")) {
        console.warn("‚ö†Ô∏è [getPrenomFromIndexedDB] Store 'authStore' absent.");
        return resolve(null);
      }

      const tx = db.transaction("authStore", "readonly");
      const store = tx.objectStore("authStore");
      const getRequest = store.get("prenom");

      getRequest.onsuccess = () => {
        const result = getRequest.result;
        resolve(typeof result === "object" && result?.value ? result.value : null);
      };

      getRequest.onerror = () => {
        console.error("‚ùå [getPrenomFromIndexedDB] Erreur lors de la r√©cup√©ration.");
        reject(null);
      };
    };
  });
}
// Dans api.ts
export function extractErrorMessage(error: unknown): string {
  if (error instanceof Error) {
    return error.message;
  }
  return "Une erreur inconnue est survenue";
}



export function getUserInfoFromJWT(jwt?: string): { email: string; prenom: string; role: string; abonnement: string } {
  // Si aucun jwt n'est pass√© en argument, on le r√©cup√®re des stockages
  if (!jwt) {
      jwt = sessionStorage.getItem("jwt") || 
            localStorage.getItem("jwt") || 
            document.cookie.split('; ').find(row => row.startsWith('jwt='))?.split('=')[1];
  }

  if (!jwt || typeof jwt !== 'string') { // V√©rifie que jwt est bien une cha√Æne
      console.warn("‚ö†Ô∏è Aucun JWT trouv√© !");
      return { email: "", prenom: "", role: "", abonnement: "" }; // ‚úÖ Toujours des strings
  }

  try {
      const decoded: any = jwtDecode(jwt);
      return {
          email: decoded.email || "", // ‚úÖ Remplace null par ""
          prenom: decoded.prenom || decoded.name || "",
          role: decoded.role || "",
          abonnement: decoded.abonnement || ""
      };
  } catch (error) {
      console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
      return { email: "", prenom: "", role: "", abonnement: "" }; // ‚úÖ Toujours des valeurs valides
  }
}


export function isTokenExpired(token: string): boolean {
  try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.exp * 1000 < Date.now();
  } catch (e) {
      return true; // ‚ö†Ô∏è Si erreur, on consid√®re le token expir√©
  }
}


export async function getValidToken(): Promise<string | null> {
  console.log("üîç V√©rification des tokens en cours...");

  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  if (jwt && !isJwtExpired(jwt)) {
    console.log("‚úÖ JWT valide trouv√© dans localStorage !");
    return jwt;
  }

  jwt = await getToken();
  console.log("üìå [DEBUG] JWT brut r√©cup√©r√© depuis IndexedDB :", jwt);
  if (jwt && !isJwtExpired(jwt)) {
    console.log("‚úÖ JWT valide trouv√© dans IndexedDB !");
    return jwt;
  }

  console.warn("üö® JWT expir√© ou absent, tentative de refresh...");

  // üõë Nouveau : protection contre un refresh interrompu par un reload
  if (sessionStorage.getItem("refreshInProgress")) {
    console.log("üß± Refresh d√©tect√© via sessionStorage, attente s√©curis√©e...");
    await new Promise(resolve => setTimeout(resolve, 1000)); // ou 1500ms
    jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
    if (jwt && !isJwtExpired(jwt)) {
      console.log("‚úÖ JWT r√©cup√©r√© apr√®s d√©lai de s√©curit√©.");
      return jwt;
    }
    console.warn("‚ö†Ô∏è Toujours pas de JWT apr√®s d√©lai d'attente.");
  }

  // üîÑ Refresh propre
  if (isRefreshing) {
    console.log("‚è≥ Refresh d√©j√† en cours, on attend...");
    return await isRefreshing;
  }

  try {
    sessionStorage.setItem("refreshInProgress", "true");
    isRefreshing = refreshToken(); // ‚úÖ
    const newJwt = await isRefreshing;

    if (newJwt) {
      console.log("‚úÖ Refresh r√©ussi, nouveau JWT obtenu.");
      localStorage.setItem("lastRefreshAt", Date.now().toString()); // facultatif
      return newJwt;
    } else {
      console.error("‚ùå Refresh √©chou√©, JWT non r√©cup√©r√© !");
      return null;
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du rafra√Æchissement du JWT :", error);
    return null;
  } finally {
    isRefreshing = null;
    sessionStorage.removeItem("refreshInProgress");
  }
}


async function waitForRefresh(timeout = 5000): Promise<string | null> {
  const start = Date.now();
  while (isRefreshing && Date.now() - start < timeout) {
    await new Promise(r => setTimeout(r, 100));
  }

  const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  return jwt && !isJwtExpired(jwt) ? jwt : null;
}


export function setToken(token: string) {
  if (!token) return;

  // üåç Sauvegarde dans LocalStorage
  localStorage.setItem("jwt", token);

  // üîê Sauvegarde dans les cookies (HTTP-only si c√¥t√© serveur)
  Cookies.set("jwt", token, { secure: true, sameSite: "Strict", expires: 7 });

  // üñ•Ô∏è Sauvegarde dans SessionStorage
  sessionStorage.setItem("jwt", token);

  console.log("‚úÖ Token sauvegard√© partout !");
}
// Fonction pour r√©cup√©rer le JWT depuis IndexedDB
export async function getJWTFromIndexedDB(): Promise<string | null> {
  try {
    const db = await openDB("AuthDB", 1);
    
    if (!db.objectStoreNames.contains("authStore")) {
      console.warn("‚ö†Ô∏è 'authStore' absent, impossible de r√©cup√©rer le JWT !");
      return null;
    }

    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");
    const result = await store.get("jwt");

    console.log("üîç JWT r√©cup√©r√© depuis IndexedDB :", result);

    return result?.value ?? null;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
    return null;
  }
}







export async function storeUserInfo(userData: { prenom: string; email: string }) {
  if (!userData?.prenom || !userData?.email) {
    console.warn("‚ö†Ô∏è Informations utilisateur incompl√®tes, stockage annul√©.");
    return;
  }

  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    // üî• V√©rifie si le store utilise un keyPath ou non
    const hasKeyPath = store.keyPath !== null;

    if (hasKeyPath) {
      await store.put({ key: "prenom", value: userData.prenom });
      await store.put({ key: "email", value: userData.email });
    } else {
      await store.put({ value: userData.prenom }, "prenom");
      await store.put({ value: userData.email }, "email");
    }

    console.log("‚úÖ Infos utilisateur enregistr√©es dans IndexedDB.");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'enregistrement des infos utilisateur :", error);
  }
}


export async function restoreUserInfo(): Promise<UserInfo | null> {
  console.log("üîÑ Restauration des infos utilisateur...");

  // V√©rifier si les donn√©es existent d√©j√†
  const prenomExists = localStorage.getItem("prenom") || sessionStorage.getItem("prenom");
  const emailExists = localStorage.getItem("email") || sessionStorage.getItem("email");

  if (prenomExists && emailExists) {
    console.log("‚úÖ Infos utilisateur d√©j√† pr√©sentes, aucune restauration n√©cessaire.");
    return null; // ‚úÖ Ajout d'un return null; explicite pour √©viter l'erreur
  }

  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");

    const prenomData = await store.get("prenom");
    const emailData = await store.get("email");

    let prenom = prenomData?.value || null;
    let email = emailData?.value || null;

    if (prenom) {
      localStorage.setItem("prenom", prenom);
      sessionStorage.setItem("prenom", prenom);
    }

    if (email) {
      localStorage.setItem("email", email);
      sessionStorage.setItem("email", email);
    }

    console.log("‚úÖ Infos utilisateur restaur√©es !");
    
    // ‚úÖ Retourne un objet UserInfo si les donn√©es sont valides
    if (prenom && email) {
      return { prenom, email } as UserInfo;
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des infos utilisateur :", error);
  }

  return null; // ‚úÖ Ajout d'un return null; explicite si aucune donn√©e n'est trouv√©e
}


// V√©rifie et rafra√Æchit le JWT au r√©veil de l'application (quand l'application revient en premier plan)
export async function checkAndRefreshOnWakeUp() {
  console.log("‚è∞ V√©rification du refresh au r√©veil...");

  const now = Date.now();
  const lastRefresh = Number(localStorage.getItem("lastRefreshTime")) || 0;

  if (now - lastRefresh < 5 * 60 * 1000) {
    console.log("üõë Refresh d√©j√† fait r√©cemment, on attend.");
    return;
  }

  console.log("üîç V√©rification de IndexedDB avant de restaurer les tokens...");
  const isDBReady = await verifyIndexedDBSetup();
  if (!isDBReady) {
    console.warn("‚ö†Ô∏è IndexedDB non disponible, tentative de restauration depuis localStorage...");
  }

  console.log("üõ†Ô∏è R√©cup√©ration des tokens depuis IndexedDB...");
  let storedRefreshToken = await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.warn("‚ö†Ô∏è Aucun refresh token dans IndexedDB, restauration depuis LocalStorage...");
    storedRefreshToken = localStorage.getItem("refreshToken");
    const storedJWT = localStorage.getItem("jwt");

    if (storedRefreshToken && storedJWT) {
      console.log("‚úÖ Tokens trouv√©s dans LocalStorage, sauvegarde dans IndexedDB...");
      await saveTokensToIndexedDB(storedJWT, storedRefreshToken);
    } else {
      console.warn("‚ùå Aucun token valide en IndexedDB ni LocalStorage !");
      return;
    }
  }

  // V√©rifier si le JWT est encore valide
  const jwt = await getJWTFromIndexedDB();
  if (jwt && !isJwtExpired(jwt)) {
    console.log("‚úÖ JWT encore valide, pas besoin de refresh.");
    return;
  }

  console.log("üîÑ JWT expir√©, on tente un refresh...");
  const newJwt = await (refreshToken()); // ‚úÖ Ajoute des parenth√®ses pour lever toute ambigu√Øt√©

  if (newJwt) {
    localStorage.setItem("lastRefreshTime", now.toString());
    console.log("‚úÖ JWT rafra√Æchi avec succ√®s !");
  } else {
    console.warn("‚ùå √âchec du refresh token.");
  }
}
async function saveTokensToIndexedDB(jwt: string, refreshToken: string) {
  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.put({ key: "jwt", value: jwt });
    await store.put({ key: "refreshToken", value: refreshToken });

    console.log("‚úÖ Tokens enregistr√©s dans IndexedDB !");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'enregistrement des tokens dans IndexedDB :", error);
  }
}


export function shouldRefreshJwt(jwt: string | null): boolean {
  if (!jwt || !jwt.includes(".")) {
    console.error("üö® JWT invalide ou manquant :", jwt);
    return false;
  }

  try {
    const payload = JSON.parse(atob(jwt.split(".")[1])); // D√©codage du payload
    const exp = payload.exp * 1000; // Convertir en millisecondes
    const now = Date.now();
    const bufferTime = 2 * 60 * 1000; // üîÑ Marge de 2 min avant expiration

    if (now >= exp - bufferTime) {
      console.log("üîÑ Le JWT doit √™tre rafra√Æchi !");
      return true;
    }

    console.log("‚úÖ JWT encore valide.");
    return false;
  } catch (error) {
    console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
    return false;
  }
}




// Fonction pour obtenir le r√¥le de l'utilisateur √† partir du JWT
export function getUserRole(): string | null {
const token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

if (!token) {
  console.warn("‚ùå Aucun JWT trouv√©, l'utilisateur n'est pas authentifi√©.");
  return null; // Si aucun JWT n'est trouv√©, l'utilisateur n'est pas authentifi√©
}

try {
  // D√©codage du JWT pour extraire le payload
  const decoded = JSON.parse(atob(token.split(".")[1]));
  
  // Retourne le r√¥le de l'utilisateur, ou null s'il n'existe pas
  return decoded.role || null; 
} catch (error) {
  console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
  return null; // Si le JWT est malform√©, retourne null
}
}
export function deleteDB(dbName: string): void {
  const dbRequest = indexedDB.deleteDatabase(dbName);

  dbRequest.onsuccess = () => {
    console.log(Base de donn√©es ${dbName} supprim√©e avec succ√®s.);
  };

  dbRequest.onerror = (error) => {
    console.error(Erreur lors de la suppression de la base de donn√©es ${dbName}:, error);
  };
}


// Fonction pour restaurer les tokens dans IndexedDB


export async function restoreTokensToIndexedDB() {
  console.log("üîÑ V√©rification et restauration des tokens dans IndexedDB...");

  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    // ‚úÖ Timeout pour √©viter de rester bloqu√©
    const timeout = new Promise((resolve) => setTimeout(resolve, 5000, "timeout"));

    // üîç V√©rification si les tokens existent d√©j√† en IndexedDB
    const checkTokens = async () => {
      const jwtInDB = await store.get("jwt");
      const refreshTokenInDB = await store.get("refreshToken");
      return jwtInDB && refreshTokenInDB;
    };

    const result = await Promise.race([checkTokens(), timeout]);

    if (result === "timeout") {
      console.warn("‚ö†Ô∏è Temps d'attente trop long, on continue sans bloquer l‚Äôutilisateur.");
      return;
    }

    if (result) {
      console.log("‚úÖ Tokens d√©j√† pr√©sents en IndexedDB, pas besoin de restauration.");
      return;
    }

    // ‚úÖ R√©cup√©ration des tokens depuis d‚Äôautres stockages
    let storedJwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
    let storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

    // ‚úÖ V√©rification des cookies en fallback
    if (!storedJwt) {
      storedJwt = document.cookie.split("; ").find(row => row.startsWith("jwt="))?.split("=")[1] || null;
      if (storedJwt) {
        storedJwt = decodeURIComponent(storedJwt);
        console.log("üç™ JWT restaur√© depuis les cookies !");
      }
    }

    if (!storedRefreshToken) {
      storedRefreshToken = document.cookie.split("; ").find(row => row.startsWith("refreshToken="))?.split("=")[1] || null;
      if (storedRefreshToken) {
        storedRefreshToken = decodeURIComponent(storedRefreshToken);
        console.log("üç™ Refresh Token restaur√© depuis les cookies !");
      }
    }

    if (!storedJwt || !storedRefreshToken) {
      console.warn("‚ö†Ô∏è Impossible de restaurer IndexedDB : tokens manquants.");
      return;
    }

    console.log("üì• Restauration des tokens dans IndexedDB...");

    // ‚úÖ Stockage s√©curis√© dans IndexedDB
    await store.put({ key: "jwt", value: storedJwt });
    await store.put({ key: "refreshToken", value: storedRefreshToken });

    console.log("‚úÖ Tokens mis √† jour dans IndexedDB !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des tokens dans IndexedDB :", error);
  }
}


export async function restoreTokensToIndexedDBIfMissing(): Promise<void> {
  console.log("üîÑ V√©rification et restauration des tokens dans IndexedDB...");

  try {
    const db = await openDB("AuthDB", 1);

    // V√©rifie si IndexedDB contient d√©j√† les tokens
    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");
    
    const jwtEntry = await store.get("jwt");
    const refreshTokenEntry = await store.get("refreshToken");

    const jwtInDB = jwtEntry?.value || null;
    const refreshTokenInDB = refreshTokenEntry?.value || null;

    if (jwtInDB && refreshTokenInDB) {
      console.log("‚úÖ IndexedDB contient d√©j√† les tokens, aucune restauration n√©cessaire.");
      return;
    }

    // üîç V√©rification dans localStorage / sessionStorage
    let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt") || null;
    let refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken") || null;

    // üîç V√©rification dans les cookies si absent ailleurs
    if (!jwt) {
      jwt = document.cookie
        .split("; ")
        .find(row => row.startsWith("jwt="))
        ?.split("=")[1] || null;
      if (jwt) console.log("üç™ JWT restaur√© depuis les cookies !");
    }

    if (!refreshToken) {
      refreshToken = document.cookie
        .split("; ")
        .find(row => row.startsWith("refreshToken="))
        ?.split("=")[1] || null;
      if (refreshToken) console.log("üç™ Refresh Token restaur√© depuis les cookies !");
    }

    // ‚úÖ Si on a trouv√© des tokens ailleurs, on les restaure dans IndexedDB
    if (jwt && refreshToken) {
      console.log("üì• Restauration des tokens dans IndexedDB...");

      const writeTx = db.transaction("authStore", "readwrite");
      const writeStore = writeTx.objectStore("authStore");

      await writeStore.put({ key: "jwt", value: jwt });
      await writeStore.put({ key: "refreshToken", value: refreshToken });

      console.log("‚úÖ Tokens restaur√©s dans IndexedDB !");
    } else {
      console.warn("‚ö†Ô∏è Aucun token valide trouv√© pour restauration.");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des tokens en IndexedDB :", error);
  }
}

// Fonction pour d√©finir les cookies pour le JWT et le refreshToken
export function setTokenCookies(jwt: string | undefined, refreshToken: string | undefined) {
  if (refreshToken) {
    const maxAge = 30 * 24 * 60 * 60; // 30 jours

    // üî• iOS PWA bloque "SameSite=Strict", on le met √† "None"
    if (jwt) {
      document.cookie = jwt=${jwt}; Max-Age=${maxAge}; Secure; SameSite=None; path=/;
      console.log("‚úÖ Cookie JWT d√©fini avec expiration longue !");
    }

    document.cookie = refreshToken=${refreshToken}; Max-Age=${maxAge}; Secure; SameSite=None; path=/;

    console.log("‚úÖ Cookie Refresh Token d√©fini avec expiration longue !");
  } else {
    console.warn("‚ùå Le refreshToken est undefined ou null, cookie non cr√©√©.");
  }
}


export async function restoreAllTokens() {
  console.log("üîÑ Tentative de restauration compl√®te des tokens...");

  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  let refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  // üîç Si JWT et RefreshToken sont absents, essayer les cookies
  if (!jwt) jwt = document.cookie.split("; ").find(row => row.startsWith("jwt="))?.split("=")[1] || null;
  if (!refreshToken) refreshToken = document.cookie.split("; ").find(row => row.startsWith("refreshToken="))?.split("=")[1] || null;

  // üîç Si toujours rien, essayer IndexedDB
  if (!jwt) jwt = await getJWTFromIndexedDB();
  if (!refreshToken) refreshToken = await getRefreshTokenFromDB();

  if (jwt && refreshToken) {
    console.log("‚úÖ Tokens retrouv√©s, synchronisation de tous les stockages...");
    syncAllStorages(jwt, refreshToken);
  } else {
    console.warn("‚ö†Ô∏è Aucun JWT ou Refresh Token valide trouv√© !");
  }
}



// Fonction pour v√©rifier si le JWT a expir√©
// V√©rifie si le JWT est expir√© ou invalide
export function isJwtExpired(token: string | { key: string; value: string } | null): boolean {
  if (!token) {
    console.warn("‚ö†Ô∏è [isJwtExpired] Aucun token fourni (null/undefined).");
    return true;
  }

  const jwtString = typeof token === "object" && token.value ? token.value : token;

  if (typeof jwtString !== "string" || !jwtString.includes(".") || jwtString.split(".").length !== 3) {
    console.warn("‚ö†Ô∏è [isJwtExpired] Token malform√© ou non-JWT d√©tect√© :", jwtString);
    return true;
  }

  try {
    console.log("üîç [isJwtExpired] D√©codage du token...");

    function base64UrlDecode(str: string): string {
      str = str.replace(/-/g, "+").replace(/_/g, "/");
      while (str.length % 4) str += "=";
      return atob(str);
    }

    const decodedPayload = JSON.parse(base64UrlDecode(jwtString.split(".")[1]));

    if (typeof decodedPayload.exp !== "number") {
      console.warn("‚ö†Ô∏è [isJwtExpired] Champ 'exp' absent ou malform√© :", decodedPayload);
      return true;
    }

    const now = Date.now();
    const leeway = 10 * 1000; // en ms
    const exp = decodedPayload.exp * 1000;

    console.log(üïí [isJwtExpired] Exp = ${exp} (${new Date(exp).toISOString()}));
    console.log(üïí [isJwtExpired] Now = ${now} (${new Date(now).toISOString()}));
    console.log(‚è≥ [isJwtExpired] Leeway = ${leeway} ms);

    if (exp < now + leeway) {
      console.warn("‚ö†Ô∏è [isJwtExpired] Token expir√© avec leeway.");
      return true;
    }

    console.log("‚úÖ [isJwtExpired] Token encore valide.");
    return false;
  } catch (error) {
    console.error("‚ùå [isJwtExpired] Erreur lors du d√©codage du JWT :", error);
    return true;
  }
}




// Fonction pour obtenir un JWT valide (en cas de token expir√© ou malform√©, rafra√Æchit avec le refresh token)






// ‚úÖ Fonction de d√©codage Base64 robuste
function decodeBase64(str: string): string {
  try {
    return atob(str);
  } catch (error) {
    console.error("‚ùå Erreur lors du d√©codage Base64 :", error);
    return "";
  }
}



// V√©rifie et restaure les tokens depuis les diff√©rents stockages
export async function checkAndRestoreTokens(): Promise<"valid" | "expired" | "unauthenticated"> {
  console.log("üîÑ V√©rification des tokens...");

  if (localStorage.getItem("session_expired") === "true") {
    console.warn("üö® Session marqu√©e comme expir√©e, arr√™t de la r√©cup√©ration des tokens.");
    return "expired"; // üö® Session explicitement expir√©e
  }

  // ‚úÖ Unification de la r√©cup√©ration du refreshToken
  let storedRefreshToken =
  localStorage.getItem("refreshToken") ||
  sessionStorage.getItem("refreshToken") ||
  await getRefreshTokenFromDB();


  if (!storedRefreshToken) {
    console.warn("‚ö†Ô∏è Aucun refreshToken trouv√©, v√©rification du JWT...");

    let jwt = await getValidToken();
    if (jwt && !isJwtExpired(jwt)) {
      console.log("‚úÖ JWT encore valide, utilisateur toujours authentifi√©.");
      return "valid"; // ‚úÖ L'utilisateur est encore connect√© avec un JWT valide
    }

    console.warn("‚ùå Aucun JWT valide trouv√©, l'utilisateur n'a jamais √©t√© authentifi√©.");
    return "unauthenticated"; // üö® Aucune trace d'authentification
  }

  // ‚úÖ Restaurer le refreshToken dans tous les stockages si absent
  if (!document.cookie.includes("refreshToken=")) {
    document.cookie = refreshToken=${storedRefreshToken}; Secure; SameSite=Strict; path=/;
    console.log("üç™ Refresh token restaur√© dans les cookies.");
  }
  if (!localStorage.getItem("refreshToken")) {
    localStorage.setItem("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans LocalStorage.");
  }
  if (!sessionStorage.getItem("refreshToken")) {
    sessionStorage.setItem("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans SessionStorage.");
  }

  // ‚úÖ V√©rification du JWT
  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  if (!jwt || isJwtExpired(jwt)) {
    console.warn("üö® JWT manquant ou expir√©, tentative de rafra√Æchissement...");

    const newJwt = await (refreshToken()); // ‚úÖ Ajoute des parenth√®ses pour lever toute ambigu√Øt√©
    if (!newJwt) {
      console.error("‚ùå Refresh √©chou√©, session expir√©e.");
      return "expired"; // üö® Session expir√©e car le refreshToken est soit invalide, soit refus√©
    }

    console.log("‚úÖ Nouveau JWT restaur√© avec succ√®s.");
    return "valid"; // ‚úÖ Nouveau JWT valide apr√®s refresh
  }

  console.log("‚úÖ JWT valide, aucun rafra√Æchissement n√©cessaire.");
  return "valid";
}




// Fonction centralis√©e pour interagir avec les diff√©rents stockages (localStorage, sessionStorage, cookies, IndexedDB)
const storageManager = {
  async getTokenFromAllStorages(key: string): Promise<string | null> {
    const storedToken = sessionStorage.getItem(key) || localStorage.getItem(key);
    if (storedToken) return storedToken;

    const dbToken = await getJWTFromIndexedDB();  // √Ä d√©finir plus tard
    if (dbToken) return dbToken;

    const cookieToken = document.cookie.split("; ").find(row => row.startsWith(${key}=))?.split("=")[1];
    return cookieToken || null;
  },

  setTokenInAllStorages(key: string, token: string) {
    sessionStorage.setItem(key, token);
    localStorage.setItem(key, token);
    document.cookie = ${key}=${token}; Secure; SameSite=Strict; path=/;
    console.log(üì¶ Token "${key}" mis √† jour dans tous les stockages);
  },

  removeTokenFromAllStorages(key: string) {
    sessionStorage.removeItem(key);
    localStorage.removeItem(key);
    document.cookie = ${key}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/;
    console.log(üóëÔ∏è Token "${key}" supprim√© de tous les stockages);
  }
};

export async function getRefreshTokenFromDB(): Promise<string | null> {
  console.log("üîÑ R√©cup√©ration du refresh token...");

  // 1. V√©rification de localStorage
  let storedRefreshToken = localStorage.getItem("refreshToken")?.trim();
  
  if (storedRefreshToken) {
    console.log("‚úÖ Refresh token trouv√© dans localStorage.");
  } else {
    console.log("üîç Aucun refresh token trouv√© dans localStorage.");
  }

  if (!storedRefreshToken) {
    console.log("üîç Aucun refresh token trouv√© dans localStorage, v√©rification dans sessionStorage...");
    // 2. Si non trouv√©, v√©rifie sessionStorage
    storedRefreshToken = sessionStorage.getItem("refreshToken")?.trim();

    if (storedRefreshToken) {
      console.log("‚úÖ Refresh token trouv√© dans sessionStorage.");
    } else {
      console.log("üîç Aucun refresh token trouv√© dans sessionStorage.");
    }
  }

  if (!storedRefreshToken) {
    console.log("üîç Aucun refresh token trouv√© dans localStorage ou sessionStorage, v√©rification dans IndexedDB...");
    // 3. Si toujours pas trouv√©, v√©rifie IndexedDB
    try {
      const db = await openDB("AuthDB", 1);
      const tx = db.transaction("authStore", "readonly");
      const store = tx.objectStore("authStore");
      const result = await store.get("refreshToken"); // ‚úÖ Utilisation correcte avec transaction

      storedRefreshToken = result?.value || null;

      if (storedRefreshToken) {
        console.log("‚úÖ Refresh token trouv√© dans IndexedDB.");
      } else {
        console.log("üîç Aucun refresh token trouv√© dans IndexedDB.");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
      storedRefreshToken = null;
    }
  }

  if (storedRefreshToken) {
    console.log("‚úÖ Refresh token r√©cup√©r√© :", storedRefreshToken);
  } else {
    console.log("‚ö†Ô∏è Aucun refresh token trouv√© apr√®s v√©rification dans tous les stockages.");
  }

  return storedRefreshToken;
}





export async function isAuthStoreReady(): Promise<boolean> {
  try {
    const db = await openDB("AuthDB", 1);
    return db.objectStoreNames.contains("authStore");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
    return false;
  }
}


async function deleteIndexedDB(): Promise<void> {
  return new Promise((resolve, reject) => {
    const deleteRequest = indexedDB.deleteDatabase("AuthDB");

    deleteRequest.onsuccess = () => {
      console.log("‚úÖ IndexedDB supprim√©e avec succ√®s.");
      resolve();
    };

    deleteRequest.onerror = (event) => {
      console.error("‚ùå Erreur lors de la suppression d'IndexedDB :", event);
      reject(event);
    };
  });
}

async function restoreTokensAfterDBReset() {
  console.log("üîç V√©rification : restoreTokensAfterDBReset() appel√©e !");
  
  const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  const refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  if (!jwt && !refreshToken) {
    console.warn("‚ö†Ô∏è Aucun token trouv√© en localStorage/sessionStorage, restauration ignor√©e.");
    return;
  }

  try {
    console.log("üîÑ Sauvegarde des tokens dans IndexedDB...");
    const db = await openIndexedDB("AuthDB", 1);
    const transaction = db.transaction("authStore", "readwrite");
    const store = transaction.objectStore("authStore");

    if (jwt) {
      console.log("‚úÖ JWT restaur√© :", jwt);
      store.put({ key: "jwt", token: jwt });
    }
    if (refreshToken) {
      console.log("‚úÖ Refresh Token restaur√© :", refreshToken);
      store.put({ key: "refreshToken", token: refreshToken });
    }

    transaction.oncomplete = () => {
      console.log("‚úÖ Transaction IndexedDB termin√©e !");
    };

    transaction.onerror = () => {
      console.error("‚ùå Erreur lors de la transaction IndexedDB !");
    };

  } catch (error) {
    console.error("‚ùå √âchec de la restauration des tokens dans IndexedDB :", error);
  }
}




export async function verifyIndexedDBSetup(): Promise<boolean> {
  return new Promise((resolve) => {
    const request = indexedDB.open("AuthDB", 1);

    request.onsuccess = async () => {
      const db = request.result;

      if (!db.objectStoreNames.contains("authStore")) {
        console.warn("‚ö†Ô∏è 'authStore' manquant ! Suppression et recr√©ation...");
        db.close();

        try {
          await deleteIndexedDB();
          console.log("üîÑ IndexedDB supprim√©e, recr√©ation en cours...");

          const isRecreated = await verifyIndexedDBSetup();

          if (isRecreated) {
            console.log("‚úÖ IndexedDB recr√©√©e, restauration des tokens...");
            setTimeout(async () => {
              await restoreTokensAfterDBReset();
            }, 100);
          }

          resolve(isRecreated);
        } catch (error) {
          console.error("‚ùå √âchec de la suppression de IndexedDB :", error);
          resolve(false);
        }
      } else {
        console.log("‚úÖ IndexedDB et 'authStore' pr√™ts.");
        resolve(true);
      }
    };

    request.onerror = () => {
      console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB !");
      resolve(false);
    };

    request.onupgradeneeded = (event) => {
      console.log("üìå Mise √† niveau IndexedDB : cr√©ation de 'authStore'...");

      const db = (event.target as IDBOpenDBRequest).result;
      if (!db.objectStoreNames.contains("authStore")) {
        db.createObjectStore("authStore", { keyPath: "key" });
      }
    };
  });
}








export async function getItemFromStore(storeName: string, key: string): Promise<string | null> {
  try {
    console.log(üîç [DEBUG] Tentative de r√©cup√©ration de ${key} dans ${storeName}...);

    // ‚úÖ Ouverture de la base sans gestion d'upgrade ici !
    const db = await openIndexedDB("AuthDB", 1);

    // üö® V√©rification que le store existe
    if (!db.objectStoreNames.contains(storeName)) {
      console.warn(‚ö†Ô∏è Store ${storeName} absent. IndexedDB pourrait √™tre corrompu.);
      return null;
    }

    // ‚úÖ Lecture du store
    const tx = db.transaction(storeName, "readonly");
    const store = tx.objectStore(storeName);
    const request = store.get(key);

    return new Promise((resolve) => {
      request.onsuccess = async () => {
        if (request.result) {
          console.log(‚úÖ [DEBUG] ${key} r√©cup√©r√© depuis IndexedDB :, request.result);
          resolve(request.result.value ?? request.result);
        } else {
          console.warn(‚ö†Ô∏è Cl√© ${key} absente dans IndexedDB.);

          // üîÑ V√©rification dans localStorage et sessionStorage
          const fallbackValue = localStorage.getItem(key) || sessionStorage.getItem(key);
          if (fallbackValue) {
            console.log(üîÑ ${key} trouv√© en stockage local, restauration dans IndexedDB...);
            await saveItemToStore(storeName, key, fallbackValue);
            resolve(fallbackValue);
          } else {
            console.warn(üö® Aucun ${key} trouv√© dans IndexedDB, localStorage ou sessionStorage.);
            resolve(null);
          }
        }
      };

      request.onerror = () => {
        console.error(‚ùå Erreur lors de la r√©cup√©ration de ${key} dans IndexedDB.);
        resolve(null);
      };
    });
  } catch (error) {
    console.error(‚ùå Erreur lors de l'acc√®s √† IndexedDB (${storeName} - ${key}) :, error);
    return null;
  }
}

export async function saveItemToStore(storeName: string, key: string, value: string): Promise<void> {
  try {
    console.log(üíæ [DEBUG] Sauvegarde de ${key} dans IndexedDB...);

    const db = await openIndexedDB("AuthDB", 1);

    if (!db.objectStoreNames.contains(storeName)) {
      console.warn(‚ö†Ô∏è Impossible de sauvegarder ${key} : le store ${storeName} est absent.);
      return;
    }

    const tx = db.transaction(storeName, "readwrite");
    const store = tx.objectStore(storeName);
    store.put({ key, value });

    tx.oncomplete = () => console.log(‚úÖ ${key} enregistr√© avec succ√®s dans IndexedDB.);
    tx.onerror = () => console.error(‚ùå Erreur lors de l'enregistrement de ${key} dans IndexedDB.);
  } catch (error) {
    console.error(‚ùå Erreur lors de l'acc√®s √† IndexedDB pour sauvegarder ${key} :, error);
  }
}



export function openIndexedDB(dbName: string, version: number): Promise<IDBDatabase> {
  return new Promise<IDBDatabase>((resolve, reject) => {
   const request = indexedDB.open(dbName, version);

   request.onupgradeneeded = (event) => {
     const db = request.result;
     console.log("‚ö° Mise √† jour d'IndexedDB, v√©rification des object stores...");

     if (!db.objectStoreNames.contains("authStore")) {
       console.log("üõ†Ô∏è Cr√©ation de l'object store 'authStore'...");
       db.createObjectStore("authStore", { keyPath: "key" }); // ‚úÖ Tr√®s important !
     }
   };

   request.onsuccess = () => {
     console.log("‚úÖ IndexedDB ouverte avec succ√®s !");
     resolve(request.result);
   };

   request.onerror = () => {
     console.error("‚ùå Erreur d'ouverture IndexedDB :", request.error);
     reject(request.error);
   };
 });
}

export function putItemInStore(store: IDBObjectStore, key: string, value: string): Promise<void> {
  return new Promise((resolve, reject) => {
    const request = store.put({ key, value });
    request.onsuccess = () => resolve();
    request.onerror = () => reject(request.error);
  });
}

// Fonction pour prot√©ger IndexedDB contre un nettoyage automatique
let indexedDBCleanupRunning = false; // üî• V√©rifie si la fonction tourne d√©j√†

let isRestoringTokens = false;

export async function restoreTokensIfNeeded(): Promise<boolean> {
  if (isRestoringTokens) {
    console.warn("‚ö†Ô∏è Restauration d√©j√† en cours, on ignore !");
    return false;
  }
  isRestoringTokens = true;

  console.log("üîÑ V√©rification IndexedDB pour restaurer les tokens...");

  // ‚úÖ Timeout pour √©viter un blocage si IndexedDB est lente
  const indexedDBAvailable = await Promise.race([
    verifyIndexedDBSetup(),
    new Promise((resolve) => setTimeout(() => resolve(false), 5000))
  ]);

  if (!indexedDBAvailable) {
    console.warn("‚ö†Ô∏è IndexedDB non disponible ou trop lente, arr√™t de la r√©cup√©ration.");
    isRestoringTokens = false;
    return false;
  }

  try {
    const jwtFromDB = await Promise.race([
      getItemFromStore("authStore", "jwt"),
      new Promise((resolve) => setTimeout(() => resolve(null), 5000))
    ]);

    const refreshTokenFromDB = await Promise.race([
      getItemFromStore("authStore", "refreshToken"),
      new Promise((resolve) => setTimeout(() => resolve(null), 5000))
    ]);

    const jwtFromStorage = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

    if (!jwtFromDB && !refreshTokenFromDB) {
      console.warn("‚ö†Ô∏è Aucun token trouv√©, inutile de continuer.");
      isRestoringTokens = false;
      return false;
    }

    if (typeof jwtFromDB === "string" && jwtFromDB.trim() !== "") {
      const storedJwtValid = jwtFromStorage && !isJwtExpired(jwtFromStorage);
      if (!storedJwtValid) {
        console.log("‚úÖ Mise √† jour du JWT depuis IndexedDB...");
        localStorage.setItem("jwt", jwtFromDB);
        sessionStorage.setItem("jwt", jwtFromDB);
        document.cookie = jwt=${jwtFromDB}; Secure; SameSite=Strict; path=/;
      } else {
        console.log("üöÄ JWT actuel d√©j√† valide, aucune mise √† jour n√©cessaire.");
      }
    }

    if (typeof refreshTokenFromDB === "string" && refreshTokenFromDB.trim() !== "") {
      console.log("‚úÖ Mise √† jour du Refresh Token depuis IndexedDB...");
      localStorage.setItem("refreshToken", refreshTokenFromDB);
      sessionStorage.setItem("refreshToken", refreshTokenFromDB);
      document.cookie = refreshToken=${refreshTokenFromDB}; Secure; SameSite=Strict; path=/;
    }

    isRestoringTokens = false;
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des tokens :", error);
    isRestoringTokens = false;
    return false;
  }
}






export async function preventIndexedDBCleanup() {
  if (indexedDBCleanupRunning) return; // üöÄ √âvite plusieurs instances simultan√©es
  indexedDBCleanupRunning = true;

  console.log("üõ°Ô∏è Protection contre la suppression d'IndexedDB...");

  try {
    // üî• V√©rifie si authStore existe bien
    const db = await openDB("AuthDB", 1, {
      upgrade(db) {
        if (!db.objectStoreNames.contains("authStore")) {
          console.warn("‚ö†Ô∏è authStore manquant, recr√©ation en cours...");
          db.createObjectStore("authStore", { keyPath: "key" }); // ‚úÖ Harmonisation avec "id"
        }
      },
    });

    // ‚úÖ Maintenant qu'on est s√ªr que authStore existe, on continue
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    // ‚úÖ Harmonisation : Cl√© "id" au lieu de "key"
    await store.put({ key: "keepAlive", value: Date.now() });

    console.log("‚úÖ IndexedDB maintenu en vie.");
  } catch (error) {
    const err = error as Error;

    console.error("‚ùå Impossible de prot√©ger IndexedDB :", err);

    // üîÑ Si IndexedDB est corrompue, la supprimer et forcer une nouvelle cr√©ation
    if (err.name === "NotFoundError" || err.name === "QuotaExceededError") {
      console.warn("‚ö†Ô∏è IndexedDB corrompue, suppression et recr√©ation...");
      await deleteDB("AuthDB");

      console.log("üîÑ R√©essai apr√®s suppression...");
      await new Promise((resolve) => setTimeout(resolve, 1000)); // üî• Attendre 1 seconde avant de relancer

      await preventIndexedDBCleanup(); // üîÑ Re-tente apr√®s recr√©ation
    }
  }

  // üîÑ Relance la fonction uniquement si IndexedDB est bien active
  setTimeout(async () => {
    indexedDBCleanupRunning = false;
    const isDBReady = await verifyIndexedDBSetup();
    if (isDBReady) {
      preventIndexedDBCleanup();
    }
  }, 24 * 60 * 60 * 1000);
}

export let isRefreshingNow = false; // ‚úÖ Ajout de export

let isRefreshing: Promise<string | null> | null = null;







// Variables globales √† d√©finir hors de la fonction
// let isRefreshing: Promise<string | null> | null = null;
// let resolvePromise: ((value: string | null) => void) | null = null;
/**
 * V√©rifie si le JWT et le refresh token sont toujours pr√©sents dans IndexedDB apr√®s plusieurs heures.
 */
export async function checkIndexedDBStatus(): Promise<void> {
  try {
    // üî• V√©rifie si authStore existe et le recr√©e si besoin
    const db = await openDB("AuthDB", 1, {
      upgrade(db) {
        if (!db.objectStoreNames.contains("authStore")) {
          console.warn("‚ö†Ô∏è authStore manquant, recr√©ation en cours...");
          db.createObjectStore("authStore", { keyPath: "key" });
        }
      },
    });

    // ‚úÖ V√©rification apr√®s recr√©ation
    if (!db.objectStoreNames.contains("authStore")) {
      console.warn("‚ùå authStore n'existe toujours pas apr√®s tentative de recr√©ation !");
      return;
    }

    // ‚úÖ Maintenant qu'on est s√ªr que authStore existe, on peut acc√©der aux donn√©es
    const jwt = await db.get("authStore", "jwt");
    const refreshToken = await db.get("authStore", "refreshToken");

    console.log("üîç V√©rification IndexedDB :");
    console.log("üìå JWT :", jwt ? jwt.value : "‚ùå Perdu !");
    console.log("üìå Refresh Token :", refreshToken ? refreshToken.value : "‚ùå Perdu !");
  } catch (error) {
    const err = error as Error; // ‚úÖ Correction du typage
  
    console.error("‚ùå Erreur lors de la v√©rification d'IndexedDB :", err);
  
    if (err.name === "NotFoundError") {
      console.warn("‚ö†Ô∏è IndexedDB corrompue, suppression et recr√©ation...");
      await deleteDB("AuthDB");
    }
  }
}

import { useAuthStore } from "@/stores/authStore"; // ‚úÖ Ajout de Pinia



export async function refreshToken(): Promise<string | null> {
  if (isRefreshing) {
    console.warn("‚è≥ Un rafra√Æchissement est d√©j√† en cours...");
    return await isRefreshing;
  }

  console.log("üîí Activation du verrou de rafra√Æchissement...");
  isRefreshing = new Promise<string | null>((resolve) => {
    resolvePromise = resolve;
  });

  try {
    let token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
    if (token && !isJwtExpired(token)) {
      console.log("‚úÖ Token valide trouv√© dans local/session !");
      resolvePromise?.(token);
      return token;
    }

    // üß† LOGS COMPLETS POUR DEBUG
    console.log("üîé CONTENU STOCKAGE AVANT REFRESH");
    console.log("üßæ localStorage.refreshToken :", localStorage.getItem("refreshToken"));
    console.log("üßæ sessionStorage.refreshToken :", sessionStorage.getItem("refreshToken"));
    
    // 1. Priorit√© √† localStorage
    let storedRefreshToken = localStorage.getItem("refreshToken")?.trim();

    // 2. Si non trouv√©, v√©rifier sessionStorage
    if (!storedRefreshToken) {
      console.log("üîç Aucun refresh token trouv√© dans localStorage, v√©rification dans sessionStorage...");
      storedRefreshToken = sessionStorage.getItem("refreshToken")?.trim();
    }

    // 3. Si toujours pas trouv√©, v√©rifier IndexedDB
    if (!storedRefreshToken) {
      console.log("üîç Aucun refresh token trouv√© dans localStorage ou sessionStorage, v√©rification dans IndexedDB...");
      const fromDb = await getRefreshTokenFromDB();
      storedRefreshToken = fromDb?.trim();
      console.log("üßæ IndexedDB.refreshToken :", storedRefreshToken);
    }

    console.log("üìå Refresh token final utilis√© :", storedRefreshToken);

    if (!storedRefreshToken || storedRefreshToken === "undefined") {
      console.warn("üö® Refresh token absent, vide ou invalide :", storedRefreshToken);
      await handleRefreshFailure();
      resolvePromise?.(null);
      return null;
    }

    // üåê URL
    const url = https://cors-proxy-37yu.onrender.com/https://script.google.com/macros/s/AKfycbykYySA5D4taWYaICxCHt6l3WmOM5RNg4P_rCoJowfxusXpSy5D-ZuGFao9UjGWHD86AA/exec?route=refresh&refreshtoken=${encodeURIComponent(storedRefreshToken)};
    console.log("üåê URL de refresh construite :", url);
    const overlay = document.getElementById("reconnecting-overlay");
    if (overlay) overlay.style.display = "flex";
    let data;
    try {
      console.time("‚è≥ Dur√©e du fetch de refresh");
      data = await Promise.race([
        fetch(url, { method: "GET" }).then((response) => {
          if (!response.ok) throw new Error(HTTP ${response.status});
          return response.json();
        }),
        new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), 35000)),
      ]);
      console.timeEnd("‚è≥ Dur√©e du fetch de refresh");
    } catch (error) {
      if (error instanceof Error && error.message === "Timeout") {
        console.warn("‚è≥ Timeout d√©tect√©. Tentative de retry unique...");
        try {
          data = await Promise.race([
            fetch(url, { method: "GET" }).then((response) => {
              if (!response.ok) throw new Error(HTTP ${response.status});
              return response.json();
            }),
            new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), 15000)),
          ]);
          console.log("‚úÖ Retry r√©ussi !");
        } catch (retryError) {
          console.error("‚ùå √âchec m√™me apr√®s retry :", retryError);
          throw retryError;
        }
      } else {
        throw error;
      }
    }
    finally {
      // ‚õî Cache l'overlay m√™me en cas d'erreur
      if (overlay) overlay.style.display = "none";
    }
    console.log("üì• R√©ponse brute de l'API :", data);

    if (data?.jwt && data?.refreshToken) {
      const jwt = data.jwt;
      localStorage.setItem("jwt", jwt);
      sessionStorage.setItem("jwt", jwt);

      // Mise √† jour du refreshToken dans localStorage
      localStorage.setItem("refreshToken", data.refreshToken);
      const newExp = Date.now() + 7 * 24 * 60 * 60 * 1000;
      localStorage.setItem("refreshToken_exp", newExp.toString());
      sessionStorage.setItem("refreshToken_exp", newExp.toString());

      const authStore = useAuthStore();
      authStore.setUserToken(jwt);
      authStore.user = {
        email: data.email,
        prenom: data.prenom,
        role: data.role,
        abonnement: data.abonnement,
      };

      console.log("üîÑ Store mis √† jour avec les nouvelles infos :", authStore.user);
     
      await syncAllStorages(jwt, data.refreshToken);

      window.dispatchEvent(new Event("jwt-refreshed"));

      resolvePromise?.(jwt);
      return jwt;
    } else {
      throw new Error("R√©ponse API invalide");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du refresh :", error);
    await handleRefreshFailure();
    resolvePromise?.(null);
    return null;
  } finally {
    console.log("üîì Lib√©ration du verrou de rafra√Æchissement...");
    isRefreshing = null;
    sessionStorage.removeItem("refreshInProgress");
  }
}



// üî• Fonction pour supprimer un item du localStorage/sessionStorage
function removeItemFromStore(key: string, subKey?: string) {
  if (subKey) {
    // Suppression d'un sous-√©l√©ment JSON s'il existe
    const storedValue = window.localStorage.getItem(key);
    if (storedValue) {
      let parsedValue = JSON.parse(storedValue);
      if (typeof parsedValue === "object" && subKey in parsedValue) {
        delete parsedValue[subKey];
        window.localStorage.setItem(key, JSON.stringify(parsedValue));
      }
    }

    const sessionValue = window.sessionStorage.getItem(key);
    if (sessionValue) {
      let parsedSession = JSON.parse(sessionValue);
      if (typeof parsedSession === "object" && subKey in parsedSession) {
        delete parsedSession[subKey];
        window.sessionStorage.setItem(key, JSON.stringify(parsedSession));
      }
    }
  } else {
    // Suppression compl√®te de la cl√©
    window.localStorage.removeItem(key);
    window.sessionStorage.removeItem(key);
  }
}



// Fonction pour g√©rer le rafra√Æchissement du JWT



export async function handleRefreshToken() {
  if (isRefreshing) {
    return; // Si une tentative de rafra√Æchissement est d√©j√† en cours, ne rien faire
  }

  isRefreshing = new Promise<string>((resolve, reject) => {
    resolve("nouveau JWT");
  });  // Utilisation de la variable globale en tant que promesse

  const storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  // Si le refresh token est valide
  if (storedRefreshToken) {
    try {
      const response = await refreshToken(); // Appel API

      // V√©rification et parse de la r√©ponse
      let responseData;
      try {
        // V√©rifier si la r√©ponse est vide ou mal format√©e
        if (!response) {
          throw new Error("R√©ponse du serveur vide ou mal format√©e");
        }
        responseData = JSON.parse(response); // G√®re le cas de null
      } catch (error) {
        throw new Error("R√©ponse du serveur invalide ou mal form√©e");
      }
      console.log("üî• refreshToken - r√©ponse : ", responseData);

      // V√©rification de la r√©ponse
      if (responseData.status === "success") {
        const newJwt = responseData.jwt;
        const newRefreshToken = responseData.refreshToken;

        // Mettre √† jour les tokens
        localStorage.setItem("jwt", newJwt);
        sessionStorage.setItem("jwt", newJwt);
        localStorage.setItem("refreshToken", newRefreshToken);
        sessionStorage.setItem("refreshToken", newRefreshToken);

        console.log("‚úÖ Nouveau JWT et Refresh Token r√©cup√©r√©s !");
      } else {
        console.warn("‚ö†Ô∏è √âchec du rafra√Æchissement du token", responseData);
        
      }
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error("‚ùå Erreur lors du rafra√Æchissement du token :", error.message);
      } else {
        console.error("‚ùå Erreur inconnue lors du rafra√Æchissement du token");
      }
      
    } finally {
      isRefreshing = null; // Lib√®re la promesse en la r√©initialisant √† null
    }
  } else {
    console.warn("‚ö†Ô∏è Aucun refresh token trouv√© !");
    
    isRefreshing = null; // Lib√®re la promesse en la r√©initialisant √† null
  }
}




async function syncAllStorages(jwt: string, refreshToken: string) {
  console.log("üîÑ Synchronisation des tokens dans tous les stockages...");

  localStorage.setItem("jwt", jwt);
  sessionStorage.setItem("jwt", jwt);
  localStorage.setItem("refreshToken", refreshToken);
  sessionStorage.setItem("refreshToken", refreshToken);

  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();
  document.cookie = jwt=${jwt}; expires=${expires}; Secure; SameSite=None; path=/;
  document.cookie = refreshToken=${refreshToken}; expires=${expires}; Secure; SameSite=None; path=/;

  // ‚úÖ S'assurer que la base est bien pr√™te avant d'√©crire dedans
  const db = await getAuthDB(); // attend que l‚Äôupgrade se termine

  await updateJWTInIndexedDB(jwt, db);
  await updateRefreshTokenInDB(refreshToken, db);

  console.log("‚úÖ Tokens restaur√©s et synchronis√©s !");
}




// Fonction pour mettre √† jour les tokens dans tous les stockages
// Fonction pour mettre √† jour les tokens dans tous les stockages
export async function updateTokens(newJwt: string | null, newRefreshToken: string | null) {
  if (!newJwt || !newRefreshToken) {
    console.warn("‚ùå Token manquant, mise √† jour impossible.");
    return;
  }

  console.log("üîÑ Mise √† jour des tokens...");

  try {
    // ‚úÖ Comparaison avec l'ancien refreshToken pour d√©tecter les incoh√©rences
    const oldRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
    if (oldRefreshToken && oldRefreshToken !== newRefreshToken) {
      console.warn("‚ö†Ô∏è Diff√©rence d√©tect√©e dans les refresh tokens ! Mise √† jour forc√©e...");
    }

    // ‚úÖ Stockage dans localStorage et sessionStorage
    localStorage.setItem("jwt", newJwt);
    sessionStorage.setItem("jwt", newJwt);
    localStorage.setItem("refreshToken", newRefreshToken);
    sessionStorage.setItem("refreshToken", newRefreshToken);

    console.log("üì¶ Tokens mis √† jour en localStorage et sessionStorage.");

    // ‚úÖ Stockage dans les cookies (attention, pas HttpOnly)
    document.cookie = jwt=${newJwt}; Secure; SameSite=None; path=/;
    document.cookie = refreshToken=${newRefreshToken}; Secure; SameSite=None; path=/;

    console.log("üç™ JWT et Refresh Token mis √† jour dans les cookies.");

    // ‚úÖ Mise √† jour dans IndexedDB
    await updateJWTInIndexedDB(newJwt);
    await updateRefreshTokenInDB(newRefreshToken);

    console.log("‚úÖ Tokens mis √† jour partout (LocalStorage, SessionStorage, IndexedDB, Cookie) !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour des tokens :", error);
  }
}





// ‚úÖ Mise √† jour du refreshToken dans IndexedDB

export async function updateRefreshTokenInDB(newRefreshToken: string | null, db?: IDBPDatabase) {
  if (!newRefreshToken) return;
  try {
    db = db || await getAuthDB();
    const tx = db.transaction("authStore", "readwrite");
    await tx.objectStore("authStore").put({ key: "refreshToken", value: newRefreshToken });
    await tx.done;
    console.log("‚úÖ Refresh token mis √† jour dans IndexedDB :", newRefreshToken);
  } catch (err) {
    console.warn("‚ö†Ô∏è Erreur refreshToken ‚Üí", err);
  }
}




// ‚úÖ Mise √† jour du JWT dans IndexedDB
export async function updateJWTInIndexedDB(newJwt: string | null, db?: IDBPDatabase) {
  if (!newJwt) return;
  try {
    db = db || await getAuthDB();
    const tx = db.transaction("authStore", "readwrite");
    await tx.objectStore("authStore").put({ key: "jwt", value: newJwt });
    await tx.done;
    console.log("‚úÖ JWT mis √† jour dans IndexedDB :", newJwt);
  } catch (err) {
    console.warn("‚ö†Ô∏è Erreur JWT ‚Üí", err);
  }
}




// ‚úÖ Mise √† jour du refreshToken dans IndexedDB



// Mise √† jour du refresh token dans IndexedDB



// Fonction pour g√©rer l‚Äô√©chec de rafra√Æchissement du token




export async function handleRefreshFailure() {
  console.error("üö® Refresh token invalide ou expir√©. D√©connexion forc√©e...");

  // üîç V√©rifier si un utilisateur √©tait connect√© avant d'afficher le message
  const jwtExists = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  const refreshTokenExists = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  if (jwtExists || refreshTokenExists) {
    // ‚úÖ L'utilisateur √©tait bien connect√© ‚Üí on affiche un message + d√©connexion
    showNotification("Votre session a expir√©. Veuillez vous reconnecter.", "error");

    if (typeof logoutUser === "function") {
      await logoutUser(); // üî• D√©connexion propre
    } else {
      console.warn("‚ö†Ô∏è logoutUser() n'est pas d√©fini !");
    }
  } else {
    // ‚ùå Aucun JWT ni refreshToken ‚Üí l'utilisateur n'√©tait pas connect√©
    console.warn("‚ö†Ô∏è Aucun utilisateur connect√©, pas besoin de d√©connexion.");
  }

  // ‚úÖ Dans tous les cas, on redirige vers la page de connexion
  

  return Promise.reject("D√©connexion forc√©e uniquement si l'utilisateur √©tait connect√©.");
}


// ‚úÖ Fonction de notification UX-friendly
function showNotification(message: string, type: "success" | "error") {
  // Remplace ceci par un vrai syst√®me de notification (Toast, Snackbar...)
  console.log([${type.toUpperCase()}] ${message});
}


// Nettoyage complet des donn√©es utilisateur
export async function clearUserData() {
  console.log("üßπ Nettoyage complet des donn√©es utilisateur...");

  // Supprimer toutes les donn√©es utilisateur dans localStorage
  Object.keys(localStorage).forEach(key => {
    if (
      key.startsWith("jwt") || 
      key.startsWith("refreshToken") || 
      key.startsWith("prenom") || 
      key.startsWith("userData_")
    ) {
      localStorage.removeItem(key);
      console.log(üóëÔ∏è Cl√© supprim√©e : ${key});
    }
  });

  // Supprime toutes les donn√©es de sessionStorage
  try {
    sessionStorage.clear();
    console.log("üóëÔ∏è sessionStorage vid√© !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de sessionStorage :", error);
  }

  // Suppression cibl√©e dans IndexedDB
  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.delete("jwt");
    await store.delete("refreshToken");

    console.log("‚úÖ JWT et refreshToken supprim√©s de IndexedDB !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de IndexedDB :", error);
  }
}
// V√©rifie et rafra√Æchit le JWT si n√©cessaire
export async function checkAndRefreshJWT() {
await syncRefreshToken(); // Synchronisation avant de v√©rifier le JWT

// V√©rifie si le refresh token est disponible dans tous les stockages
let storedRefreshToken = await getRefreshTokenFromDB();

if (storedRefreshToken) {
  console.log("üîÑ V√©rification et restauration des autres stockages...");

  // Restaurer dans localStorage, sessionStorage, cookies si n√©cessaire
  if (!localStorage.getItem("refreshToken")) {
    storageManager.setTokenInAllStorages("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans LocalStorage.");
  }

  if (!sessionStorage.getItem("refreshToken")) {
    storageManager.setTokenInAllStorages("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans SessionStorage.");
  }

  const cookies = document.cookie.split("; ").find(row => row.startsWith("refreshToken="));
  if (!cookies) {
    document.cookie = refreshToken=${storedRefreshToken}; Secure; SameSite=Strict; path=/;
    console.log("üç™ Refresh token restaur√© dans les cookies.");
  }
}

const token = await getValidToken();
console.log("üîç Token r√©cup√©r√© :", token);

if (!token || isJwtExpired(token)) {
  console.warn("üö® Pas de JWT valide, tentative de rafra√Æchissement...");

  // Cherche le refreshToken dans cookies, IndexedDB et LocalStorage
  let storedRefreshToken = await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.error("‚ùå Aucun refresh token disponible, d√©connexion...");
    await logoutUser();
    return;
  }

  await refreshToken(); // Rafra√Æchit le JWT
  return;
}

try {
  const decoded = JSON.parse(atob(token.split(".")[1])); // V√©rifie si le JWT est bien d√©codable
  console.log(‚è≥ JWT expire √† : ${new Date(decoded.exp * 1000).toLocaleString()});
} catch (e) {
  console.error("‚ùå JWT corrompu, for√ßage de d√©connexion.");
  await logoutUser();
}
}
export async function getRefreshTokenExpirationFromDB(): Promise<number> {
try {
  const db = await openDB("AuthDB", 1);
  const tx = db.transaction("authStore", "readonly");
  const store = tx.objectStore("authStore");
  const expirationEntry = await db.get("authStore", "refreshTokenExpiration");

  return expirationEntry?.value || 0;
} catch (err) {
  console.warn("‚ö†Ô∏è Erreur lors de la r√©cup√©ration de l'expiration du refresh token depuis IndexedDB :", err);
  return 0;
}
}

export async function clearIndexedDBData() {
  if (!window.indexedDB) {
    console.warn("‚ö†Ô∏è IndexedDB non support√© sur ce navigateur.");
    return;
  }

  try {
    const db = await openDB("AuthDB", 1);

    // V√©rifie si le store "authStore" existe
    if (!db.objectStoreNames.contains("authStore")) {
      console.warn("‚ö†Ô∏è IndexedDB 'authStore' introuvable, aucune donn√©e √† nettoyer.");
      return;
    }

    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.clear(); // Efface toutes les donn√©es dans le store
    await tx.done; // üî• Assure la fermeture propre de la transaction

    console.log("‚úÖ IndexedDB nettoy√©e !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de IndexedDB :", error);
  }
}


export async function syncRefreshToken() {
  if (isSyncing) {
    console.log("üîÑ Sync d√©j√† en cours, on attend...");
    return;
  }

  isSyncing = true;

  try {
    const dbToken = await getRefreshTokenFromDB();
    const localToken = localStorage.getItem("refreshToken");
    const cookieToken = document.cookie.split("; ")
      .find(row => row.startsWith("refreshToken="))?.split("=")[1];

    // üö® Aucun refresh token trouv√©, on v√©rifie si le JWT est encore valide
    if (!dbToken && !localToken && !cookieToken) {
      console.warn("‚ö†Ô∏è Aucun refresh token trouv√©, v√©rification du JWT...");

      let jwt = await getValidToken();
      if (jwt && !isJwtExpired(jwt)) {
        console.log("‚úÖ JWT encore valide, pas de r√©initialisation forc√©e.");
        isSyncing = false;
        return;
      }

      console.error("üö® Aucun refresh token et JWT expir√©, reset obligatoire !");
     // Forcer la d√©connexion seulement si le JWT est aussi expir√©
      isSyncing = false;
      return;
    }

    console.log("‚úÖ Refresh token trouv√©, synchronisation termin√©e.");
  } catch (error) {
    console.error("‚ùå Erreur lors de la synchronisation du refresh token :", error);
  } finally {
    isSyncing = false;
  }
}




export async function logoutUser() {
  console.log("üö® D√©connexion en cours...");

  try {
    // ‚úÖ Bloquer tout refresh en cours
    if (typeof refreshInProgress !== "undefined" && refreshInProgress) {
      refreshInProgress = Promise.resolve(null);
    }

    // ‚úÖ Marquer la session comme expir√©e
    localStorage.setItem("session_expired", "true");

    // ‚úÖ Mettre √† jour le statut de connexion
    localStorage.setItem("userLogged", "false");
    localStorage.removeItem("userLogged"); // üî• Supprime compl√®tement la cl√© pour √©viter toute confusion

    // ‚úÖ Affichage du message de d√©connexion stylis√©
    showLogoutMessage();

    // üóëÔ∏è **Suppression cibl√©e des tokens**
    console.log("üóëÔ∏è Suppression des tokens et des donn√©es utilisateur...");
    sessionStorage.removeItem("jwt");
    sessionStorage.removeItem("refreshToken");
    localStorage.removeItem("jwt");
    localStorage.removeItem("refreshToken");
    localStorage.removeItem("refreshTokenExpiration");

    // üóëÔ∏è **Suppression des informations utilisateur stock√©es**
    localStorage.removeItem("prenom");
    localStorage.removeItem("email");
    sessionStorage.removeItem("prenom");
    sessionStorage.removeItem("email");

    // üóëÔ∏è **Suppression propre des cookies**
    deleteAllCookies();

    // üóëÔ∏è **Nettoyage IndexedDB**
    console.log("üóëÔ∏è Nettoyage de IndexedDB...");
    await clearIndexedDBData();
    console.log("‚úÖ IndexedDB nettoy√©e !");

    // üîî Informer l'application que l'utilisateur est d√©connect√©
    window.dispatchEvent(new Event("logout"));

    // ‚úÖ **Redirection apr√®s nettoyage**
    setTimeout(() => {
      console.log("üîÑ Redirection vers la page de connexion...");
      // Suppression de la modale de d√©connexion
      const logoutMessage = document.querySelector(".logout-container");
      if (logoutMessage) {
        logoutMessage.remove();
      }
      router.replace("/login"); // üî• Redirection sans recharger la page
    }, 2500);

    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la d√©connexion :", error);
    return false;
  }
}


// ‚úÖ Affichage stylis√© du message de d√©connexion
function showLogoutMessage() {
  const logoutMessage = document.createElement("div");
  logoutMessage.innerHTML = 
    <div class="logout-container">
      <div class="logout-spinner"></div>
      <p class="logout-text">D√©connexion en cours...</p>
    </div>
  ;

  const style = document.createElement("style");
  style.innerHTML = 
    .logout-container {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 20px;
      background: rgba(0, 0, 0, 0.8);
      color: white;
      font-size: 18px;
      font-weight: bold;
      border-radius: 8px;
      display: flex;
      align-items: center;
      flex-direction: column;
      z-index: 9999;
      text-align: center;
      animation: fadeIn 0.3s ease-in-out;
    }
    .logout-spinner {
      width: 40px;
      height: 40px;
      border: 4px solid #ffffff;
      border-top: 4px solid transparent;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 10px;
    }
    .logout-text {
      margin: 0;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
  ;

  document.head.appendChild(style);
  document.body.appendChild(logoutMessage);
}

// ‚úÖ Suppression propre des cookies
function deleteAllCookies() {
  console.log("üóëÔ∏è Suppression des cookies...");
  document.cookie.split(";").forEach((cookie) => {
    const cookieName = cookie.split("=")[0].trim();
    document.cookie = ${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/;
    document.cookie = ${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname};
  });
}




// Fonction pour nettoyer les anciennes cl√©s de refresh token et synchroniser les diff√©rents stockages
export async function fixRefreshTokenStorage() {
console.trace("üìå Appel de fixRefreshTokenStorage"); // Affiche la trace d'appel pour d√©bogage
console.warn("üö® Nettoyage des anciennes cl√©s de refresh token ('refreshjwt')...");

// V√©rifie si le refreshToken est bien stock√© dans IndexedDB et localStorage
const db = await openDB("AuthDB", 1);
const tx = db.transaction("authStore", "readwrite");
const store = tx.objectStore("authStore");

// Suppression des anciennes cl√©s inutilis√©es
await store.delete("refreshjwt");
localStorage.removeItem("refreshjwt");

console.log("‚úÖ refreshjwt supprim√© de IndexedDB et localStorage !");

// Optionnellement, on peut synchroniser les refresh tokens entre les stockages si n√©cessaire
const storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
if (storedRefreshToken) {
  // S'il existe, on s'assure qu'il est mis √† jour dans IndexedDB
  await updateRefreshTokenInDB(storedRefreshToken);
  console.log("‚úÖ Refresh token synchronis√© dans IndexedDB !");
}
}
// Fonction pour restaurer la session de l'utilisateur (r√©cup√®re les tokens et les restaure dans les stockages)
export async function restoreSession() {
console.log("üîÑ Restauration de session...");

// V√©rifie si les tokens sont pr√©sents dans localStorage ou sessionStorage
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
const refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

if (!jwt || !refreshToken) {
  console.warn("‚ùå Tokens manquants. L'utilisateur doit se reconnecter.");
  return false; // Retourne false si aucun token n'est trouv√©
}

// Si les tokens sont trouv√©s, on les restaure dans IndexedDB
const indexedDBAvailable = await verifyIndexedDBSetup();  // V√©rifie si IndexedDB est pr√™te
if (!indexedDBAvailable) {
  console.warn("‚ùå Impossible d'utiliser IndexedDB pour restaurer les tokens.");
  return false; // Si IndexedDB n'est pas disponible, on retourne false
}

try {
  // Restaure le JWT et le refreshToken dans IndexedDB
  await updateJWTInIndexedDB(jwt);
  await updateRefreshTokenInDB(refreshToken);

  console.log("‚úÖ Session restaur√©e avec succ√®s !");
  return true; // Retourne true si la session est correctement restaur√©e
} catch (error) {
  console.error("‚ùå Erreur lors de la restauration de la session :", error);
  return false; // Retourne false en cas d'erreur
}
}
// Fonction pour planifier le rafra√Æchissement automatique du JWT
export function scheduleJwtRefresh() {
  console.log("üïí Planification du refresh JWT...", new Date().toLocaleTimeString());

const refreshInterval = /Mobi|Android/i.test(navigator.userAgent) ? 2 * 60 * 1000 : 8 * 60 * 1000; // 2 minutes pour les mobiles, 8 minutes pour les autres

// Planifie une v√©rification et un rafra√Æchissement du JWT √† intervalle r√©gulier
setInterval(async () => {
  console.log("üîÑ V√©rification du JWT et du refresh token...");

  const refreshTokenExp = await getRefreshTokenExpirationFromDB();
  if (refreshTokenExp - Date.now() < 2 * 60 * 1000) {  // Si l'expiration du refreshToken approche
    console.warn("üö® Refresh token bient√¥t expir√© ! Tentative de r√©cup√©ration...");
    await restoreTokensToIndexedDB();  // Restaure les tokens dans IndexedDB si n√©cessaire
  }

  // Rafra√Æchit le JWT si n√©cessaire
  const newJwt = await (refreshToken()); // ‚úÖ Ajoute des parenth√®ses pour lever toute ambigu√Øt√©
  if (!newJwt) {
    console.error("‚ùå Refresh √©chou√©, d√©connexion en cours...");
    await logoutUser();  // D√©connecte l'utilisateur en cas d'√©chec du refresh
  } else {
    console.log("‚úÖ JWT rafra√Æchi avec succ√®s !");
  }
}, refreshInterval);  // V√©rifie toutes les 2 ou 8 minutes
}


export async function restoreJwt(): Promise<string | null> {
  console.log("üîÑ Tentative de r√©cup√©ration du JWT...");

  let storedJwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

  if (!storedJwt) {
    storedJwt = document.cookie.split("; ")
      .find(row => row.startsWith("jwt="))?.split("=")[1] || null;
    if (storedJwt) console.log("üç™ JWT restaur√© depuis les cookies !");
  }

  if (!storedJwt) {
    try {
      storedJwt = await getFromIndexedDB("jwt"); // üî• V√©rifie IndexedDB sous "authStore"
      if (storedJwt) {
        console.log("‚úÖ JWT restaur√© depuis IndexedDB !");
      } else {
        console.warn("‚ö†Ô∏è Aucun JWT trouv√© dans IndexedDB.");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration du JWT depuis IndexedDB :", error);
    }
  }

  return storedJwt || null;
}


export async function restoreRefreshToken(): Promise<string | null> {
  console.log("üîÑ R√©cup√©ration du refresh token depuis IndexedDB...");

  let storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  if (!storedRefreshToken) {
    try {
      storedRefreshToken = await getFromIndexedDB("refreshToken"); // üî• V√©rifie IndexedDB
      if (storedRefreshToken) {
        console.log("‚úÖ Refresh token restaur√© depuis IndexedDB !");
      } else {
        console.warn("‚ö†Ô∏è Aucun refresh token trouv√© dans IndexedDB.");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration du refresh token depuis IndexedDB :", error);
    }
  }

  return storedRefreshToken || null;
}
ChatGPT a dit :
‚úÖ Apr√®s v√©rif compl√®te : ton code est tr√®s bien structur√©. Tu utilises partout authStore, tu g√®res upgrade, get, put, check, restore, sync proprement.

üîé Donc pourquoi tu as encore cette erreur NotFoundError dans tes logs ?
Indice ici :

await updateRefreshTokenInDB(refreshToken, db);
‚û°Ô∏è Tu passes un db (ouvert avec getAuthDB()), mais si ailleurs tu appelles updateRefreshTokenInDB sans le db pass√©, il utilise en fallback :

db = db || await getAuthDB();
Or parfois, tu utilises openDB("AuthDB", 1) manuellement, sans upgrade (ex : dans getFromIndexedDB()).

‚úÖ Fix simple :
Remplace tous les openDB("AuthDB", 1) par getAuthDB() pour garantir que le store authStore existe. Exemple :

// ‚ùå √† √©viter
const db = await openDB("AuthDB", 1);

// ‚úÖ utiliser plut√¥t
const db = await getAuthDB();
Tu veux que je te fasse une version "nettoy√©e" avec tous les openDB(...) remplac√©s par getAuthDB() ?

Vous avez dit :
et celui la je modifie comment : 
    // üî• V√©rifie si authStore existe bien
    const db = await openDB("AuthDB", 1, {
      upgrade(db) {
        if (!db.objectStoreNames.contains("authStore")) {
          console.warn("‚ö†Ô∏è authStore manquant, recr√©ation en cours...");
          db.createObjectStore("authStore", { keyPath: "key" }); // ‚úÖ Harmonisation avec "id"
        }
      },
    });
ChatGPT a dit :
Celui-l√† est parfait comme il est ‚úÖ. Tu ouvres la DB avec upgrade donc si authStore n‚Äôexiste pas, il est recr√©√©.

Tu peux m√™me l‚Äôextraire dans une fonction r√©utilisable comme :

export async function openAuthDBWithUpgrade(): Promise<IDBPDatabase> {
  return openDB("AuthDB", 1, {
    upgrade(db) {
      if (!db.objectStoreNames.contains("authStore")) {
        console.warn("‚ö†Ô∏è `authStore` manquant, recr√©ation en cours...");
        db.createObjectStore("authStore", { keyPath: "key" });
      }
    },
  });
}
Et ensuite l‚Äôutiliser proprement :

const db = await openAuthDBWithUpgrade();
üí° Conclusion :

Tu laisses ce bloc tel quel ‚úÖ

Mais tous les openDB("AuthDB", 1) sans upgrade ‚Üí √† remplacer par getAuthDB()

Tu veux que je te fasse un grep rapide des endroits o√π c‚Äôest √† corriger ?

Vous avez dit :
ok nickel √ßa marche
ChatGPT a dit :
Parfait üëå Si t‚Äôas besoin d‚Äôun check rapide de ton auth flow ou d‚Äôun helper pour tester des cas extr√™mes (d√©co, expiry, multi-tab‚Ä¶), je suis l√†. Bon taf sur ta PWA üî•

Vous avez dit :
> vite build

vite v6.2.2 building for production...
transforming (31) node_modules\vue-demi\lib\index.mjssrc/utils/api.ts:115:22 - error TS2339: Property 'jwt' does not exist on type 'never'.

115       token = fromDb.jwt ?? fromDb.value ?? null;
                         ~~~

src/utils/api.ts:115:36 - error TS2339: Property 'value' does not exist on type 'never'.

115       token = fromDb.jwt ?? fromDb.value ?? null;
                                       ~~~~~

src/utils/api.ts:1054:7 - error TS2322: Type 'null' is not assignable to type 'string | undefined'.

1054       storedRefreshToken = null;
           ~~~~~~~~~~~~~~~~~~

src/utils/api.ts:1064:3 - error TS2322: Type 'string | undefined' is not assignable to type 'string | null'.
  Type 'undefined' is not assignable to type 'string | null'.

1064   return storedRefreshToken;
       ~~~~~~

src/utils/api.ts:1745:35 - error TS2345: Argument of type 'IDBPDatabase<any>' is not assignable to parameter of type 'IDBDatabase'.
  The types returned by 'createObjectStore(...).add(...)' are incompatible between these types.
    Type 'Promise<any>' is missing the following properties from type 'IDBRequest<IDBValidKey>': error, onerror, onsuccess, readyState, and 6 more.

1745   await updateJWTInIndexedDB(jwt, db);
                                       ~~

src/utils/api.ts:1746:46 - error TS2345: Argument of type 'IDBPDatabase<any>' is not assignable to parameter of type 'IDBDatabase'.
  The types returned by 'createObjectStore(...).add(...)' are incompatible between these types.
    Type 'Promise<any>' is missing the following properties from type 'IDBRequest<IDBValidKey>': error, onerror, onsuccess, readyState, and 6 more.

1746   await updateRefreshTokenInDB(refreshToken, db);
                                                  ~~

src/utils/api.ts:1804:5 - error TS2322: Type 'IDBPDatabase<any> | IDBDatabase' is not assignable to type 'IDBDatabase | undefined'.
  Type 'IDBPDatabase<any>' is not assignable to type 'IDBDatabase'.
    The types returned by 'createObjectStore(...).add(...)' are incompatible between these types.
      Type 'Promise<any>' is missing the following properties from type 'IDBRequest<IDBValidKey>': error, onerror, onsuccess, readyState, and 6 more.

1804     db = db || await getAuthDB();
         ~~

src/utils/api.ts:1805:16 - error TS18048: 'db' is possibly 'undefined'.

1805     const tx = db.transaction("authStore", "readwrite");
                    ~~

src/utils/api.ts:1825:5 - error TS2322: Type 'IDBPDatabase<any> | IDBDatabase' is not assignable to type 'IDBDatabase | undefined'.
  Type 'IDBPDatabase<any>' is not assignable to type 'IDBDatabase'.
    The types returned by 'createObjectStore(...).add(...)' are incompatible between these types.
      Type 'Promise<any>' is missing the following properties from type 'IDBRequest<IDBValidKey>': error, onerror, onsuccess, readyState, and 6 more.

1825     db = db || await getAuthDB();
         ~~

src/utils/api.ts:1826:16 - error TS18048: 'db' is possibly 'undefined'.

1826     const tx = db.transaction("authStore", "readwrite");
ChatGPT a dit :
Voici ce que tu dois faire pour corriger tous les bugs li√©s √† TypeScript, IDBDatabase et never :

‚úÖ 1. Erreur fromDb.jwt et fromDb.value sur type never
token = fromDb.jwt ?? fromDb.value ?? null;
üîß Fix :

if (typeof fromDb === 'object' && fromDb !== null) {
  token = (fromDb as any).jwt ?? (fromDb as any).value ?? null;
}
Ou mieux encore : tu peux typer fromDb d√®s le d√©but :

const fromDb = await getJWTFromIndexedDB() as { jwt?: string; value?: string } | null;
‚úÖ 2. Erreur Type 'null' is not assignable to type 'string | undefined'
storedRefreshToken = null;
üîß Fix : change le typage plus haut :

let storedRefreshToken: string | null = null;
‚úÖ 3. Erreur entre IDBPDatabase<any> (idb) et IDBDatabase (native API)
Tu m√©langes deux libs :

indexedDB.open() ‚Üí renvoie un IDBDatabase (natif)

openDB() de idb ‚Üí renvoie un IDBPDatabase (lib)

üîß Fix ‚Üí harmonise tout avec idb, donc :

Dans updateJWTInIndexedDB() et updateRefreshTokenInDB(), le param√®tre db doit √™tre typ√© :

import type { IDBPDatabase } from 'idb';

export async function updateJWTInIndexedDB(newJwt: string | null, db?: IDBPDatabase<any>) { ... }
üîÅ Et toutes les fonctions o√π tu passes db, utilise uniquement openDB (pas indexedDB.open) et ne le mixe jamais avec des fonctions qui attendent du natif.

‚úÖ 4. Erreur db is possibly undefined
TypeScript ne sait pas que db est bien d√©fini juste apr√®s :

db = db || await getAuthDB(); // db peut √™tre undefined au premier appel
const tx = db.transaction(...); // ‚Üê erreur ici
üîß Fix :

db = db || await getAuthDB();
if (!db) throw new Error("Impossible d'ouvrir IndexedDB");

const tx = db.transaction("authStore", "readwrite");
R√©sum√© des actions :
 Harmonise tous les acc√®s √† IndexedDB avec openDB() de idb

 Typage clair : IDBPDatabase<any> partout

 Fix never avec as any ou typage direct

 Ajoute un check if (!db) throw ... juste apr√®s await

Tu veux que je te fasse un patch direct sur ton fichier api.ts ?

Vous avez dit :
j'ai modifi√© mon api.ts 

declare global {
  interface Window {
    latestJWT?: string;
    jwtRefreshScheduled?: boolean;
  }
}


import { openDB } from "idb";
import { jwtDecode } from "jwt-decode";
import type { UserInfo } from "@/utils/types"; // üìå Adapte le chemin si n√©cessaire
import Cookies from "js-cookie";
import { getAuthDB } from '@/utils/indexedDbUtils'; // chemin selon ton projet

import axios from "axios";
import router from "@/router/index.ts"
let refreshInProgress: Promise<string | null> | null = null;
let resolvePromise: ((value: string | null) => void) | null = null;
let storedRefreshToken: string | null = null;



// Fonction pour v√©rifier si l'utilisateur est connect√©
export function isUserLoggedIn(): boolean {
// V√©rifie la pr√©sence du JWT dans localStorage ou sessionStorage
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

// Si le JWT est trouv√©, l'utilisateur est connect√©
return !!jwt;
}

// Fonction pour v√©rifier si l'utilisateur est un administrateur
export function isUserAdmin(): boolean {
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

if (!jwt) {
  console.warn("‚ùå Aucun JWT trouv√©, l'utilisateur n'est pas authentifi√©.");
  return false; // Si aucun JWT n'est trouv√©, l'utilisateur n'est pas un admin
}

try {
  // D√©codage du JWT pour extraire le payload
  const decoded = JSON.parse(atob(jwt.split(".")[1]));
  
  // V√©rification du r√¥le dans le payload
  return decoded.role === "admin"; // Retourne true si l'utilisateur est admin
} catch (error) {
  console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
  return false; // Si le JWT est invalide ou malform√©, on consid√®re que l'utilisateur n'est pas admin
}
}

let refreshAttempts = 0; // Compteur de tentatives de refresh
const MAX_REFRESH_ATTEMPTS = 3; // Limite anti-boucle
let isSyncing = false; // Verrou global pour √©viter les boucles infinies
// Fonction pour r√©cup√©rer le token depuis localStorage, sessionStorage, IndexedDB ou cookies
// D√©clare l'interface TokenObject quelque part avant de l'utiliser
export interface TokenObject {
  jwt?: string;
  [key: string]: any;
}
export async function getStoredJWT() {
  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

  // üîç V√©rifier dans les cookies
  if (!jwt) {
    const cookies = document.cookie.split("; ");
    const jwtCookie = cookies.find(row => row.startsWith("jwt="));
    if (jwtCookie) jwt = jwtCookie.split("=")[1];
  }

  // üîç V√©rifier dans IndexedDB de mani√®re asynchrone
  if (!jwt) {
    try {
      jwt = await getJWTFromIndexedDB();
    } catch (error) {
      console.error("‚ö†Ô∏è Erreur lors de l'acc√®s √† IndexedDB :", error);
    }
  }

  return jwt;
}
export async function getToken(): Promise<string | null> {
  console.log("üîÑ Tentative de r√©cup√©ration du JWT...");

  // 1. V√©rification dans localStorage/sessionStorage
  let token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

  if (token) {
    console.log("‚úÖ JWT trouv√© dans localStorage ou sessionStorage.");
  } else {
    console.log("üîç Aucun JWT trouv√© dans localStorage ou sessionStorage.");
  }

  // 2. V√©rification dans les cookies si le token n'est pas trouv√©
  if (!token) {
    console.log("üîç Tentative de r√©cup√©ration du JWT depuis les cookies...");
    token = document.cookie
      .split("; ")
      .find(row => row.startsWith("jwt="))
      ?.split("=")[1] || null;

    if (token) {
      console.log("‚úÖ JWT trouv√© dans les cookies.");
    } else {
      console.log("üîç Aucun JWT trouv√© dans les cookies.");
    }
  }

  // 3. V√©rification finale dans IndexedDB si aucune donn√©e n'est trouv√©e
  if (!token) {
    console.log("üîç Tentative de r√©cup√©ration du JWT depuis IndexedDB...");
    const fromDb: string | null = await getJWTFromIndexedDB();


    if (fromDb && typeof fromDb === "object") {
      token = fromDb ?? null;
    } else {
      token = typeof fromDb === "string" ? fromDb : null;
    }

    if (token) {
      console.log("‚úÖ JWT trouv√© dans IndexedDB.");
    } else {
      console.log("üîç Aucun JWT trouv√© dans IndexedDB.");
    }
  }

  if (!token) {
    console.warn("‚ö†Ô∏è Aucun JWT trouv√© apr√®s toutes les v√©rifications.");
  }

  return token;
}




export async function resetIndexedDB(): Promise<void> {
  if (!window.indexedDB) {
    console.error("‚ùå Impossible de supprimer IndexedDB : non support√©e !");
    return;
  }

  try {
    console.log("üîç V√©rification de IndexedDB avant suppression...");

    const dbs: { name?: string }[] = await indexedDB.databases();
    if (!dbs.some(db => db.name === "AuthDB")) {
      console.log("‚ÑπÔ∏è AuthDB n'existe pas, rien √† supprimer.");
      return;
    }

    console.log("üóëÔ∏è Suppression de la base AuthDB...");
    await new Promise<void>((resolve, reject) => {
      const deleteRequest = indexedDB.deleteDatabase("AuthDB");
      deleteRequest.onsuccess = () => resolve();
      deleteRequest.onerror = () => reject(deleteRequest.error);
    });

    console.log("‚úÖ AuthDB supprim√©e avec succ√®s.");
  } catch (error) {
    console.error("‚ùå Erreur lors de la suppression de IndexedDB :", error);
  }
}


export async function hasUserEverLoggedIn(): Promise<boolean> {
  const userInfo: UserInfo | null = await restoreUserInfo();

  if (userInfo && typeof userInfo === "object" && "email" in userInfo) {
    console.log("‚úÖ Un utilisateur a d√©j√† √©t√© connect√© :", userInfo.email);
    return true;
  }
  console.log("üöÄ Aucun utilisateur enregistr√©, c'est une premi√®re connexion.");
  return false;
}

// Fonction pour r√©cup√©rer une valeur dans IndexedDB
export function getFromIndexedDB(key: string): Promise<any> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("AuthDB", 1);

    request.onupgradeneeded = function (event) {
      console.warn("‚ö†Ô∏è IndexedDB mis √† jour, v√©rification des stores...");
      const db = (event.target as IDBRequest<IDBPDatabase >)?.result;
      if (!db.objectStoreNames.contains("authStore")) {
        db.createObjectStore("authStore", { keyPath: "key" });
        console.log("‚úÖ 'authStore' cr√©√© !");
      }
    };

    request.onsuccess = function (event) {
      const db = (event.target as IDBRequest<IDBPDatabase >)?.result;
      if (!db) {
        throw new Error("IndexedDB inaccessible");
      }
      const tx = db.transaction("authStore", "readwrite");
      
      if (!db.objectStoreNames.contains("authStore")) {
        reject("‚ùå Object store 'authStore' introuvable !");
        return;
      }

      const transaction = db.transaction("authStore", "readonly");
      const store = transaction.objectStore("authStore");
      const getRequest = store.get(key);

      getRequest.onsuccess = function () {
        resolve(getRequest.result ? getRequest.result.value : null);
      };

      getRequest.onerror = function () {
        reject("‚ùå Erreur lors de la r√©cup√©ration de la cl√© dans IndexedDB");
      };
    };

    request.onerror = function () {
      reject("‚ùå Erreur de connexion √† IndexedDB");
    };
  });
}



// Fonction pour sauvegarder une valeur dans IndexedDB
export function saveToIndexedDB(key: string, value: any): Promise<void> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("myDatabase", 1);

    request.onsuccess = (evt) => {
      const dbRequest = evt.target as IDBRequest<IDBPDatabase >;
      if (!dbRequest) {
        reject("Erreur : impossible d‚Äôouvrir la DB");
        return;
      }
      const db = dbRequest.result;
      if (!db) {
        throw new Error("IndexedDB inaccessible");
      }
      const tx = db.transaction("authStore", "readwrite");
      

      const transaction = db.transaction("authStore", "readwrite");
      const store = transaction.objectStore("authStore");
      const putRequest = store.put(value, key);

      putRequest.onsuccess = () => {
        resolve();
      };
      putRequest.onerror = () => {
        reject("Erreur lors de la sauvegarde dans IndexedDB");
      };
    };

    request.onerror = () => {
      reject("Erreur de connexion √† IndexedDB");
    };
  });
}



export async function getPrenomFromIndexedDB(): Promise<string | null> {
  return new Promise((resolve, reject) => {
    const request = indexedDB.open("AuthDB", 1);

    request.onerror = () => {
      console.error("‚ùå [getPrenomFromIndexedDB] Impossible d‚Äôouvrir IndexedDB.");
      reject(null);
    };

    request.onsuccess = () => {
      const db = request.result;

      if (!db.objectStoreNames.contains("authStore")) {
        console.warn("‚ö†Ô∏è [getPrenomFromIndexedDB] Store 'authStore' absent.");
        return resolve(null);
      }

      const tx = db.transaction("authStore", "readonly");
      const store = tx.objectStore("authStore");
      const getRequest = store.get("prenom");

      getRequest.onsuccess = () => {
        const result = getRequest.result;
        resolve(typeof result === "object" && result?.value ? result.value : null);
      };

      getRequest.onerror = () => {
        console.error("‚ùå [getPrenomFromIndexedDB] Erreur lors de la r√©cup√©ration.");
        reject(null);
      };
    };
  });
}
// Dans api.ts
export function extractErrorMessage(error: unknown): string {
  if (error instanceof Error) {
    return error.message;
  }
  return "Une erreur inconnue est survenue";
}



export function getUserInfoFromJWT(jwt?: string): { email: string; prenom: string; role: string; abonnement: string } {
  // Si aucun jwt n'est pass√© en argument, on le r√©cup√®re des stockages
  if (!jwt) {
      jwt = sessionStorage.getItem("jwt") || 
            localStorage.getItem("jwt") || 
            document.cookie.split('; ').find(row => row.startsWith('jwt='))?.split('=')[1];
  }

  if (!jwt || typeof jwt !== 'string') { // V√©rifie que jwt est bien une cha√Æne
      console.warn("‚ö†Ô∏è Aucun JWT trouv√© !");
      return { email: "", prenom: "", role: "", abonnement: "" }; // ‚úÖ Toujours des strings
  }

  try {
      const decoded: any = jwtDecode(jwt);
      return {
          email: decoded.email || "", // ‚úÖ Remplace null par ""
          prenom: decoded.prenom || decoded.name || "",
          role: decoded.role || "",
          abonnement: decoded.abonnement || ""
      };
  } catch (error) {
      console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
      return { email: "", prenom: "", role: "", abonnement: "" }; // ‚úÖ Toujours des valeurs valides
  }
}


export function isTokenExpired(token: string): boolean {
  try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.exp * 1000 < Date.now();
  } catch (e) {
      return true; // ‚ö†Ô∏è Si erreur, on consid√®re le token expir√©
  }
}


export async function getValidToken(): Promise<string | null> {
  console.log("üîç V√©rification des tokens en cours...");

  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  if (jwt && !isJwtExpired(jwt)) {
    console.log("‚úÖ JWT valide trouv√© dans localStorage !");
    return jwt;
  }

  jwt = await getToken();
  console.log("üìå [DEBUG] JWT brut r√©cup√©r√© depuis IndexedDB :", jwt);
  if (jwt && !isJwtExpired(jwt)) {
    console.log("‚úÖ JWT valide trouv√© dans IndexedDB !");
    return jwt;
  }

  console.warn("üö® JWT expir√© ou absent, tentative de refresh...");

  // üõë Nouveau : protection contre un refresh interrompu par un reload
  if (sessionStorage.getItem("refreshInProgress")) {
    console.log("üß± Refresh d√©tect√© via sessionStorage, attente s√©curis√©e...");
    await new Promise(resolve => setTimeout(resolve, 1000)); // ou 1500ms
    jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
    if (jwt && !isJwtExpired(jwt)) {
      console.log("‚úÖ JWT r√©cup√©r√© apr√®s d√©lai de s√©curit√©.");
      return jwt;
    }
    console.warn("‚ö†Ô∏è Toujours pas de JWT apr√®s d√©lai d'attente.");
  }

  // üîÑ Refresh propre
  if (isRefreshing) {
    console.log("‚è≥ Refresh d√©j√† en cours, on attend...");
    return await isRefreshing;
  }

  try {
    sessionStorage.setItem("refreshInProgress", "true");
    isRefreshing = refreshToken(); // ‚úÖ
    const newJwt = await isRefreshing;

    if (newJwt) {
      console.log("‚úÖ Refresh r√©ussi, nouveau JWT obtenu.");
      localStorage.setItem("lastRefreshAt", Date.now().toString()); // facultatif
      return newJwt;
    } else {
      console.error("‚ùå Refresh √©chou√©, JWT non r√©cup√©r√© !");
      return null;
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du rafra√Æchissement du JWT :", error);
    return null;
  } finally {
    isRefreshing = null;
    sessionStorage.removeItem("refreshInProgress");
  }
}


async function waitForRefresh(timeout = 5000): Promise<string | null> {
  const start = Date.now();
  while (isRefreshing && Date.now() - start < timeout) {
    await new Promise(r => setTimeout(r, 100));
  }

  const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  return jwt && !isJwtExpired(jwt) ? jwt : null;
}


export function setToken(token: string) {
  if (!token) return;

  // üåç Sauvegarde dans LocalStorage
  localStorage.setItem("jwt", token);

  // üîê Sauvegarde dans les cookies (HTTP-only si c√¥t√© serveur)
  Cookies.set("jwt", token, { secure: true, sameSite: "Strict", expires: 7 });

  // üñ•Ô∏è Sauvegarde dans SessionStorage
  sessionStorage.setItem("jwt", token);

  console.log("‚úÖ Token sauvegard√© partout !");
}
// Fonction pour r√©cup√©rer le JWT depuis IndexedDB
export async function getJWTFromIndexedDB(): Promise<string | null> {
  try {
    const db = await getAuthDB();

    
    if (!db.objectStoreNames.contains("authStore")) {
      console.warn("‚ö†Ô∏è 'authStore' absent, impossible de r√©cup√©rer le JWT !");
      return null;
    }

    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");
    const result = await store.get("jwt");

    console.log("üîç JWT r√©cup√©r√© depuis IndexedDB :", result);

    return result?.value ?? null;
  } catch (error) {
    console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
    return null;
  }
}







export async function storeUserInfo(userData: { prenom: string; email: string }) {
  if (!userData?.prenom || !userData?.email) {
    console.warn("‚ö†Ô∏è Informations utilisateur incompl√®tes, stockage annul√©.");
    return;
  }

  try {
    const db = await getAuthDB();

    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    // üî• V√©rifie si le store utilise un keyPath ou non
    const hasKeyPath = store.keyPath !== null;

    if (hasKeyPath) {
      await store.put({ key: "prenom", value: userData.prenom });
      await store.put({ key: "email", value: userData.email });
    } else {
      await store.put({ value: userData.prenom }, "prenom");
      await store.put({ value: userData.email }, "email");
    }

    console.log("‚úÖ Infos utilisateur enregistr√©es dans IndexedDB.");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'enregistrement des infos utilisateur :", error);
  }
}


export async function restoreUserInfo(): Promise<UserInfo | null> {
  console.log("üîÑ Restauration des infos utilisateur...");

  // V√©rifier si les donn√©es existent d√©j√†
  const prenomExists = localStorage.getItem("prenom") || sessionStorage.getItem("prenom");
  const emailExists = localStorage.getItem("email") || sessionStorage.getItem("email");

  if (prenomExists && emailExists) {
    console.log("‚úÖ Infos utilisateur d√©j√† pr√©sentes, aucune restauration n√©cessaire.");
    return null; // ‚úÖ Ajout d'un return null; explicite pour √©viter l'erreur
  }

  try {
    const db = await getAuthDB();

    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");

    const prenomData = await store.get("prenom");
    const emailData = await store.get("email");

    let prenom = prenomData?.value || null;
    let email = emailData?.value || null;

    if (prenom) {
      localStorage.setItem("prenom", prenom);
      sessionStorage.setItem("prenom", prenom);
    }

    if (email) {
      localStorage.setItem("email", email);
      sessionStorage.setItem("email", email);
    }

    console.log("‚úÖ Infos utilisateur restaur√©es !");
    
    // ‚úÖ Retourne un objet UserInfo si les donn√©es sont valides
    if (prenom && email) {
      return { prenom, email } as UserInfo;
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des infos utilisateur :", error);
  }

  return null; // ‚úÖ Ajout d'un return null; explicite si aucune donn√©e n'est trouv√©e
}


// V√©rifie et rafra√Æchit le JWT au r√©veil de l'application (quand l'application revient en premier plan)
export async function checkAndRefreshOnWakeUp() {
  console.log("‚è∞ V√©rification du refresh au r√©veil...");

  const now = Date.now();
  const lastRefresh = Number(localStorage.getItem("lastRefreshTime")) || 0;

  if (now - lastRefresh < 5 * 60 * 1000) {
    console.log("üõë Refresh d√©j√† fait r√©cemment, on attend.");
    return;
  }

  console.log("üîç V√©rification de IndexedDB avant de restaurer les tokens...");
  const isDBReady = await verifyIndexedDBSetup();
  if (!isDBReady) {
    console.warn("‚ö†Ô∏è IndexedDB non disponible, tentative de restauration depuis localStorage...");
  }

  console.log("üõ†Ô∏è R√©cup√©ration des tokens depuis IndexedDB...");
  let storedRefreshToken = await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.warn("‚ö†Ô∏è Aucun refresh token dans IndexedDB, restauration depuis LocalStorage...");
    storedRefreshToken = localStorage.getItem("refreshToken");
    const storedJWT = localStorage.getItem("jwt");

    if (storedRefreshToken && storedJWT) {
      console.log("‚úÖ Tokens trouv√©s dans LocalStorage, sauvegarde dans IndexedDB...");
      await saveTokensToIndexedDB(storedJWT, storedRefreshToken);
    } else {
      console.warn("‚ùå Aucun token valide en IndexedDB ni LocalStorage !");
      return;
    }
  }

  // V√©rifier si le JWT est encore valide
  const jwt = await getJWTFromIndexedDB();
  if (jwt && !isJwtExpired(jwt)) {
    console.log("‚úÖ JWT encore valide, pas besoin de refresh.");
    return;
  }

  console.log("üîÑ JWT expir√©, on tente un refresh...");
  const newJwt = await (refreshToken()); // ‚úÖ Ajoute des parenth√®ses pour lever toute ambigu√Øt√©

  if (newJwt) {
    localStorage.setItem("lastRefreshTime", now.toString());
    console.log("‚úÖ JWT rafra√Æchi avec succ√®s !");
  } else {
    console.warn("‚ùå √âchec du refresh token.");
  }
}
async function saveTokensToIndexedDB(jwt: string, refreshToken: string) {
  try {
    const db = await getAuthDB();

    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.put({ key: "jwt", value: jwt });
    await store.put({ key: "refreshToken", value: refreshToken });

    console.log("‚úÖ Tokens enregistr√©s dans IndexedDB !");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'enregistrement des tokens dans IndexedDB :", error);
  }
}


export function shouldRefreshJwt(jwt: string | null): boolean {
  if (!jwt || !jwt.includes(".")) {
    console.error("üö® JWT invalide ou manquant :", jwt);
    return false;
  }

  try {
    const payload = JSON.parse(atob(jwt.split(".")[1])); // D√©codage du payload
    const exp = payload.exp * 1000; // Convertir en millisecondes
    const now = Date.now();
    const bufferTime = 2 * 60 * 1000; // üîÑ Marge de 2 min avant expiration

    if (now >= exp - bufferTime) {
      console.log("üîÑ Le JWT doit √™tre rafra√Æchi !");
      return true;
    }

    console.log("‚úÖ JWT encore valide.");
    return false;
  } catch (error) {
    console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
    return false;
  }
}




// Fonction pour obtenir le r√¥le de l'utilisateur √† partir du JWT
export function getUserRole(): string | null {
const token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

if (!token) {
  console.warn("‚ùå Aucun JWT trouv√©, l'utilisateur n'est pas authentifi√©.");
  return null; // Si aucun JWT n'est trouv√©, l'utilisateur n'est pas authentifi√©
}

try {
  // D√©codage du JWT pour extraire le payload
  const decoded = JSON.parse(atob(token.split(".")[1]));
  
  // Retourne le r√¥le de l'utilisateur, ou null s'il n'existe pas
  return decoded.role || null; 
} catch (error) {
  console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
  return null; // Si le JWT est malform√©, retourne null
}
}
export function deleteDB(dbName: string): void {
  const dbRequest = indexedDB.deleteDatabase(dbName);

  dbRequest.onsuccess = () => {
    console.log(Base de donn√©es ${dbName} supprim√©e avec succ√®s.);
  };

  dbRequest.onerror = (error) => {
    console.error(Erreur lors de la suppression de la base de donn√©es ${dbName}:, error);
  };
}


// Fonction pour restaurer les tokens dans IndexedDB


export async function restoreTokensToIndexedDB() {
  console.log("üîÑ V√©rification et restauration des tokens dans IndexedDB...");

  try {
    const db = await getAuthDB();

    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    // ‚úÖ Timeout pour √©viter de rester bloqu√©
    const timeout = new Promise((resolve) => setTimeout(resolve, 5000, "timeout"));

    // üîç V√©rification si les tokens existent d√©j√† en IndexedDB
    const checkTokens = async () => {
      const jwtInDB = await store.get("jwt");
      const refreshTokenInDB = await store.get("refreshToken");
      return jwtInDB && refreshTokenInDB;
    };

    const result = await Promise.race([checkTokens(), timeout]);

    if (result === "timeout") {
      console.warn("‚ö†Ô∏è Temps d'attente trop long, on continue sans bloquer l‚Äôutilisateur.");
      return;
    }

    if (result) {
      console.log("‚úÖ Tokens d√©j√† pr√©sents en IndexedDB, pas besoin de restauration.");
      return;
    }

    // ‚úÖ R√©cup√©ration des tokens depuis d‚Äôautres stockages
    let storedJwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
    let storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

    // ‚úÖ V√©rification des cookies en fallback
    if (!storedJwt) {
      storedJwt = document.cookie.split("; ").find(row => row.startsWith("jwt="))?.split("=")[1] || null;
      if (storedJwt) {
        storedJwt = decodeURIComponent(storedJwt);
        console.log("üç™ JWT restaur√© depuis les cookies !");
      }
    }

    if (!storedRefreshToken) {
      storedRefreshToken = document.cookie.split("; ").find(row => row.startsWith("refreshToken="))?.split("=")[1] || null;
      if (storedRefreshToken) {
        storedRefreshToken = decodeURIComponent(storedRefreshToken);
        console.log("üç™ Refresh Token restaur√© depuis les cookies !");
      }
    }

    if (!storedJwt || !storedRefreshToken) {
      console.warn("‚ö†Ô∏è Impossible de restaurer IndexedDB : tokens manquants.");
      return;
    }

    console.log("üì• Restauration des tokens dans IndexedDB...");

    // ‚úÖ Stockage s√©curis√© dans IndexedDB
    await store.put({ key: "jwt", value: storedJwt });
    await store.put({ key: "refreshToken", value: storedRefreshToken });

    console.log("‚úÖ Tokens mis √† jour dans IndexedDB !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des tokens dans IndexedDB :", error);
  }
}


export async function restoreTokensToIndexedDBIfMissing(): Promise<void> {
  console.log("üîÑ V√©rification et restauration des tokens dans IndexedDB...");

  try {
    const db = await getAuthDB();

    // V√©rifie si IndexedDB contient d√©j√† les tokens
    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");
    
    const jwtEntry = await store.get("jwt");
    const refreshTokenEntry = await store.get("refreshToken");

    const jwtInDB = jwtEntry?.value || null;
    const refreshTokenInDB = refreshTokenEntry?.value || null;

    if (jwtInDB && refreshTokenInDB) {
      console.log("‚úÖ IndexedDB contient d√©j√† les tokens, aucune restauration n√©cessaire.");
      return;
    }

    // üîç V√©rification dans localStorage / sessionStorage
    let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt") || null;
    let refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken") || null;

    // üîç V√©rification dans les cookies si absent ailleurs
    if (!jwt) {
      jwt = document.cookie
        .split("; ")
        .find(row => row.startsWith("jwt="))
        ?.split("=")[1] || null;
      if (jwt) console.log("üç™ JWT restaur√© depuis les cookies !");
    }

    if (!refreshToken) {
      refreshToken = document.cookie
        .split("; ")
        .find(row => row.startsWith("refreshToken="))
        ?.split("=")[1] || null;
      if (refreshToken) console.log("üç™ Refresh Token restaur√© depuis les cookies !");
    }

    // ‚úÖ Si on a trouv√© des tokens ailleurs, on les restaure dans IndexedDB
    if (jwt && refreshToken) {
      console.log("üì• Restauration des tokens dans IndexedDB...");

      const writeTx = db.transaction("authStore", "readwrite");
      const writeStore = writeTx.objectStore("authStore");

      await writeStore.put({ key: "jwt", value: jwt });
      await writeStore.put({ key: "refreshToken", value: refreshToken });

      console.log("‚úÖ Tokens restaur√©s dans IndexedDB !");
    } else {
      console.warn("‚ö†Ô∏è Aucun token valide trouv√© pour restauration.");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des tokens en IndexedDB :", error);
  }
}

// Fonction pour d√©finir les cookies pour le JWT et le refreshToken
export function setTokenCookies(jwt: string | undefined, refreshToken: string | undefined) {
  if (refreshToken) {
    const maxAge = 30 * 24 * 60 * 60; // 30 jours

    // üî• iOS PWA bloque "SameSite=Strict", on le met √† "None"
    if (jwt) {
      document.cookie = jwt=${jwt}; Max-Age=${maxAge}; Secure; SameSite=None; path=/;
      console.log("‚úÖ Cookie JWT d√©fini avec expiration longue !");
    }

    document.cookie = refreshToken=${refreshToken}; Max-Age=${maxAge}; Secure; SameSite=None; path=/;

    console.log("‚úÖ Cookie Refresh Token d√©fini avec expiration longue !");
  } else {
    console.warn("‚ùå Le refreshToken est undefined ou null, cookie non cr√©√©.");
  }
}


export async function restoreAllTokens() {
  console.log("üîÑ Tentative de restauration compl√®te des tokens...");

  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  let refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  // üîç Si JWT et RefreshToken sont absents, essayer les cookies
  if (!jwt) jwt = document.cookie.split("; ").find(row => row.startsWith("jwt="))?.split("=")[1] || null;
  if (!refreshToken) refreshToken = document.cookie.split("; ").find(row => row.startsWith("refreshToken="))?.split("=")[1] || null;

  // üîç Si toujours rien, essayer IndexedDB
  if (!jwt) jwt = await getJWTFromIndexedDB();
  if (!refreshToken) refreshToken = await getRefreshTokenFromDB();

  if (jwt && refreshToken) {
    console.log("‚úÖ Tokens retrouv√©s, synchronisation de tous les stockages...");
    syncAllStorages(jwt, refreshToken);
  } else {
    console.warn("‚ö†Ô∏è Aucun JWT ou Refresh Token valide trouv√© !");
  }
}



// Fonction pour v√©rifier si le JWT a expir√©
// V√©rifie si le JWT est expir√© ou invalide
export function isJwtExpired(token: string | { key: string; value: string } | null): boolean {
  if (!token) {
    console.warn("‚ö†Ô∏è [isJwtExpired] Aucun token fourni (null/undefined).");
    return true;
  }

  const jwtString = typeof token === "object" && token.value ? token.value : token;

  if (typeof jwtString !== "string" || !jwtString.includes(".") || jwtString.split(".").length !== 3) {
    console.warn("‚ö†Ô∏è [isJwtExpired] Token malform√© ou non-JWT d√©tect√© :", jwtString);
    return true;
  }

  try {
    console.log("üîç [isJwtExpired] D√©codage du token...");

    function base64UrlDecode(str: string): string {
      str = str.replace(/-/g, "+").replace(/_/g, "/");
      while (str.length % 4) str += "=";
      return atob(str);
    }

    const decodedPayload = JSON.parse(base64UrlDecode(jwtString.split(".")[1]));

    if (typeof decodedPayload.exp !== "number") {
      console.warn("‚ö†Ô∏è [isJwtExpired] Champ 'exp' absent ou malform√© :", decodedPayload);
      return true;
    }

    const now = Date.now();
    const leeway = 10 * 1000; // en ms
    const exp = decodedPayload.exp * 1000;

    console.log(üïí [isJwtExpired] Exp = ${exp} (${new Date(exp).toISOString()}));
    console.log(üïí [isJwtExpired] Now = ${now} (${new Date(now).toISOString()}));
    console.log(‚è≥ [isJwtExpired] Leeway = ${leeway} ms);

    if (exp < now + leeway) {
      console.warn("‚ö†Ô∏è [isJwtExpired] Token expir√© avec leeway.");
      return true;
    }

    console.log("‚úÖ [isJwtExpired] Token encore valide.");
    return false;
  } catch (error) {
    console.error("‚ùå [isJwtExpired] Erreur lors du d√©codage du JWT :", error);
    return true;
  }
}




// Fonction pour obtenir un JWT valide (en cas de token expir√© ou malform√©, rafra√Æchit avec le refresh token)






// ‚úÖ Fonction de d√©codage Base64 robuste
function decodeBase64(str: string): string {
  try {
    return atob(str);
  } catch (error) {
    console.error("‚ùå Erreur lors du d√©codage Base64 :", error);
    return "";
  }
}



// V√©rifie et restaure les tokens depuis les diff√©rents stockages
export async function checkAndRestoreTokens(): Promise<"valid" | "expired" | "unauthenticated"> {
  console.log("üîÑ V√©rification des tokens...");

  if (localStorage.getItem("session_expired") === "true") {
    console.warn("üö® Session marqu√©e comme expir√©e, arr√™t de la r√©cup√©ration des tokens.");
    return "expired"; // üö® Session explicitement expir√©e
  }

  // ‚úÖ Unification de la r√©cup√©ration du refreshToken
  let storedRefreshToken =
  localStorage.getItem("refreshToken") ||
  sessionStorage.getItem("refreshToken") ||
  await getRefreshTokenFromDB();


  if (!storedRefreshToken) {
    console.warn("‚ö†Ô∏è Aucun refreshToken trouv√©, v√©rification du JWT...");

    let jwt = await getValidToken();
    if (jwt && !isJwtExpired(jwt)) {
      console.log("‚úÖ JWT encore valide, utilisateur toujours authentifi√©.");
      return "valid"; // ‚úÖ L'utilisateur est encore connect√© avec un JWT valide
    }

    console.warn("‚ùå Aucun JWT valide trouv√©, l'utilisateur n'a jamais √©t√© authentifi√©.");
    return "unauthenticated"; // üö® Aucune trace d'authentification
  }

  // ‚úÖ Restaurer le refreshToken dans tous les stockages si absent
  if (!document.cookie.includes("refreshToken=")) {
    document.cookie = refreshToken=${storedRefreshToken}; Secure; SameSite=Strict; path=/;
    console.log("üç™ Refresh token restaur√© dans les cookies.");
  }
  if (!localStorage.getItem("refreshToken")) {
    localStorage.setItem("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans LocalStorage.");
  }
  if (!sessionStorage.getItem("refreshToken")) {
    sessionStorage.setItem("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans SessionStorage.");
  }

  // ‚úÖ V√©rification du JWT
  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  if (!jwt || isJwtExpired(jwt)) {
    console.warn("üö® JWT manquant ou expir√©, tentative de rafra√Æchissement...");

    const newJwt = await (refreshToken()); // ‚úÖ Ajoute des parenth√®ses pour lever toute ambigu√Øt√©
    if (!newJwt) {
      console.error("‚ùå Refresh √©chou√©, session expir√©e.");
      return "expired"; // üö® Session expir√©e car le refreshToken est soit invalide, soit refus√©
    }

    console.log("‚úÖ Nouveau JWT restaur√© avec succ√®s.");
    return "valid"; // ‚úÖ Nouveau JWT valide apr√®s refresh
  }

  console.log("‚úÖ JWT valide, aucun rafra√Æchissement n√©cessaire.");
  return "valid";
}




// Fonction centralis√©e pour interagir avec les diff√©rents stockages (localStorage, sessionStorage, cookies, IndexedDB)
const storageManager = {
  async getTokenFromAllStorages(key: string): Promise<string | null> {
    const storedToken = sessionStorage.getItem(key) || localStorage.getItem(key);
    if (storedToken) return storedToken;

    const dbToken = await getJWTFromIndexedDB();  // √Ä d√©finir plus tard
    if (dbToken) return dbToken;

    const cookieToken = document.cookie.split("; ").find(row => row.startsWith(${key}=))?.split("=")[1];
    return cookieToken || null;
  },

  setTokenInAllStorages(key: string, token: string) {
    sessionStorage.setItem(key, token);
    localStorage.setItem(key, token);
    document.cookie = ${key}=${token}; Secure; SameSite=Strict; path=/;
    console.log(üì¶ Token "${key}" mis √† jour dans tous les stockages);
  },

  removeTokenFromAllStorages(key: string) {
    sessionStorage.removeItem(key);
    localStorage.removeItem(key);
    document.cookie = ${key}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/;
    console.log(üóëÔ∏è Token "${key}" supprim√© de tous les stockages);
  }
};

export async function getRefreshTokenFromDB(): Promise<string | null> {
  console.log("üîÑ R√©cup√©ration du refresh token...");

  // 1. V√©rification de localStorage
  let storedRefreshToken = localStorage.getItem("refreshToken")?.trim();
  
  if (storedRefreshToken) {
    console.log("‚úÖ Refresh token trouv√© dans localStorage.");
  } else {
    console.log("üîç Aucun refresh token trouv√© dans localStorage.");
  }

  if (!storedRefreshToken) {
    console.log("üîç Aucun refresh token trouv√© dans localStorage, v√©rification dans sessionStorage...");
    // 2. Si non trouv√©, v√©rifie sessionStorage
    storedRefreshToken = sessionStorage.getItem("refreshToken")?.trim();

    if (storedRefreshToken) {
      console.log("‚úÖ Refresh token trouv√© dans sessionStorage.");
    } else {
      console.log("üîç Aucun refresh token trouv√© dans sessionStorage.");
    }
  }

  if (!storedRefreshToken) {
    console.log("üîç Aucun refresh token trouv√© dans localStorage ou sessionStorage, v√©rification dans IndexedDB...");
    // 3. Si toujours pas trouv√©, v√©rifie IndexedDB
    try {
      const db = await getAuthDB();

      const tx = db.transaction("authStore", "readonly");
      const store = tx.objectStore("authStore");
      const result = await store.get("refreshToken"); // ‚úÖ Utilisation correcte avec transaction

      storedRefreshToken = result?.value || null;
      return storedRefreshToken ?? null; // garantit un retour type string | null

      if (storedRefreshToken) {
        console.log("‚úÖ Refresh token trouv√© dans IndexedDB.");
      } else {
        console.log("üîç Aucun refresh token trouv√© dans IndexedDB.");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
      storedRefreshToken = null;
    }
  }

  if (storedRefreshToken) {
    console.log("‚úÖ Refresh token r√©cup√©r√© :", storedRefreshToken);
  } else {
    console.log("‚ö†Ô∏è Aucun refresh token trouv√© apr√®s v√©rification dans tous les stockages.");
  }

  return storedRefreshToken;
}





export async function isAuthStoreReady(): Promise<boolean> {
  try {
    const db = await getAuthDB();

    return db.objectStoreNames.contains("authStore");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
    return false;
  }
}


async function deleteIndexedDB(): Promise<void> {
  return new Promise((resolve, reject) => {
    const deleteRequest = indexedDB.deleteDatabase("AuthDB");

    deleteRequest.onsuccess = () => {
      console.log("‚úÖ IndexedDB supprim√©e avec succ√®s.");
      resolve();
    };

    deleteRequest.onerror = (event) => {
      console.error("‚ùå Erreur lors de la suppression d'IndexedDB :", event);
      reject(event);
    };
  });
}

async function restoreTokensAfterDBReset() {
  console.log("üîç V√©rification : restoreTokensAfterDBReset() appel√©e !");
  
  const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  const refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  if (!jwt && !refreshToken) {
    console.warn("‚ö†Ô∏è Aucun token trouv√© en localStorage/sessionStorage, restauration ignor√©e.");
    return;
  }

  try {
    console.log("üîÑ Sauvegarde des tokens dans IndexedDB...");
    const db = await openIndexedDB("AuthDB", 1);
    const transaction = db.transaction("authStore", "readwrite");
    const store = transaction.objectStore("authStore");

    if (jwt) {
      console.log("‚úÖ JWT restaur√© :", jwt);
      store.put({ key: "jwt", token: jwt });
    }
    if (refreshToken) {
      console.log("‚úÖ Refresh Token restaur√© :", refreshToken);
      store.put({ key: "refreshToken", token: refreshToken });
    }

    transaction.oncomplete = () => {
      console.log("‚úÖ Transaction IndexedDB termin√©e !");
    };

    transaction.onerror = () => {
      console.error("‚ùå Erreur lors de la transaction IndexedDB !");
    };

  } catch (error) {
    console.error("‚ùå √âchec de la restauration des tokens dans IndexedDB :", error);
  }
}




export async function verifyIndexedDBSetup(): Promise<boolean> {
  return new Promise((resolve) => {
    const request = indexedDB.open("AuthDB", 1);

    request.onsuccess = async () => {
      const db = request.result;

      if (!db.objectStoreNames.contains("authStore")) {
        console.warn("‚ö†Ô∏è 'authStore' manquant ! Suppression et recr√©ation...");
        db.close();

        try {
          await deleteIndexedDB();
          console.log("üîÑ IndexedDB supprim√©e, recr√©ation en cours...");

          const isRecreated = await verifyIndexedDBSetup();

          if (isRecreated) {
            console.log("‚úÖ IndexedDB recr√©√©e, restauration des tokens...");
            setTimeout(async () => {
              await restoreTokensAfterDBReset();
            }, 100);
          }

          resolve(isRecreated);
        } catch (error) {
          console.error("‚ùå √âchec de la suppression de IndexedDB :", error);
          resolve(false);
        }
      } else {
        console.log("‚úÖ IndexedDB et 'authStore' pr√™ts.");
        resolve(true);
      }
    };

    request.onerror = () => {
      console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB !");
      resolve(false);
    };

    request.onupgradeneeded = (event) => {
      console.log("üìå Mise √† niveau IndexedDB : cr√©ation de 'authStore'...");

      const db = (event.target as IDBPOpenDBRequest).result;
      if (!db.objectStoreNames.contains("authStore")) {
        db.createObjectStore("authStore", { keyPath: "key" });
      }
    };
  });
}








export async function getItemFromStore(storeName: string, key: string): Promise<string | null> {
  try {
    console.log(üîç [DEBUG] Tentative de r√©cup√©ration de ${key} dans ${storeName}...);

    // ‚úÖ Ouverture de la base sans gestion d'upgrade ici !
    const db = await openIndexedDB("AuthDB", 1);

    // üö® V√©rification que le store existe
    if (!db.objectStoreNames.contains(storeName)) {
      console.warn(‚ö†Ô∏è Store ${storeName} absent. IndexedDB pourrait √™tre corrompu.);
      return null;
    }

    // ‚úÖ Lecture du store
    const tx = db.transaction(storeName, "readonly");
    const store = tx.objectStore(storeName);
    const request = store.get(key);

    return new Promise((resolve) => {
      request.onsuccess = async () => {
        if (request.result) {
          console.log(‚úÖ [DEBUG] ${key} r√©cup√©r√© depuis IndexedDB :, request.result);
          resolve(request.result.value ?? request.result);
        } else {
          console.warn(‚ö†Ô∏è Cl√© ${key} absente dans IndexedDB.);

          // üîÑ V√©rification dans localStorage et sessionStorage
          const fallbackValue = localStorage.getItem(key) || sessionStorage.getItem(key);
          if (fallbackValue) {
            console.log(üîÑ ${key} trouv√© en stockage local, restauration dans IndexedDB...);
            await saveItemToStore(storeName, key, fallbackValue);
            resolve(fallbackValue);
          } else {
            console.warn(üö® Aucun ${key} trouv√© dans IndexedDB, localStorage ou sessionStorage.);
            resolve(null);
          }
        }
      };

      request.onerror = () => {
        console.error(‚ùå Erreur lors de la r√©cup√©ration de ${key} dans IndexedDB.);
        resolve(null);
      };
    });
  } catch (error) {
    console.error(‚ùå Erreur lors de l'acc√®s √† IndexedDB (${storeName} - ${key}) :, error);
    return null;
  }
}

export async function saveItemToStore(storeName: string, key: string, value: string): Promise<void> {
  try {
    console.log(üíæ [DEBUG] Sauvegarde de ${key} dans IndexedDB...);

    const db = await openIndexedDB("AuthDB", 1);

    if (!db.objectStoreNames.contains(storeName)) {
      console.warn(‚ö†Ô∏è Impossible de sauvegarder ${key} : le store ${storeName} est absent.);
      return;
    }

    const tx = db.transaction(storeName, "readwrite");
    const store = tx.objectStore(storeName);
    store.put({ key, value });

    tx.oncomplete = () => console.log(‚úÖ ${key} enregistr√© avec succ√®s dans IndexedDB.);
    tx.onerror = () => console.error(‚ùå Erreur lors de l'enregistrement de ${key} dans IndexedDB.);
  } catch (error) {
    console.error(‚ùå Erreur lors de l'acc√®s √† IndexedDB pour sauvegarder ${key} :, error);
  }
}



export function openIndexedDB(dbName: string, version: number): Promise<IDBPDatabase > {
  return new Promise<IDBDatabase>((resolve, reject) => {
   const request = indexedDB.open(dbName, version);

   request.onupgradeneeded = (event) => {
     const db = request.result;
     console.log("‚ö° Mise √† jour d'IndexedDB, v√©rification des object stores...");

     if (!db.objectStoreNames.contains("authStore")) {
       console.log("üõ†Ô∏è Cr√©ation de l'object store 'authStore'...");
       db.createObjectStore("authStore", { keyPath: "key" }); // ‚úÖ Tr√®s important !
     }
   };

   request.onsuccess = () => {
     console.log("‚úÖ IndexedDB ouverte avec succ√®s !");
     resolve(request.result);
   };

   request.onerror = () => {
     console.error("‚ùå Erreur d'ouverture IndexedDB :", request.error);
     reject(request.error);
   };
 });
}

export function putItemInStore(store: IDBObjectStore, key: string, value: string): Promise<void> {
  return new Promise((resolve, reject) => {
    const request = store.put({ key, value });
    request.onsuccess = () => resolve();
    request.onerror = () => reject(request.error);
  });
}

// Fonction pour prot√©ger IndexedDB contre un nettoyage automatique
let indexedDBCleanupRunning = false; // üî• V√©rifie si la fonction tourne d√©j√†

let isRestoringTokens = false;

export async function restoreTokensIfNeeded(): Promise<boolean> {
  if (isRestoringTokens) {
    console.warn("‚ö†Ô∏è Restauration d√©j√† en cours, on ignore !");
    return false;
  }
  isRestoringTokens = true;

  console.log("üîÑ V√©rification IndexedDB pour restaurer les tokens...");

  // ‚úÖ Timeout pour √©viter un blocage si IndexedDB est lente
  const indexedDBAvailable = await Promise.race([
    verifyIndexedDBSetup(),
    new Promise((resolve) => setTimeout(() => resolve(false), 5000))
  ]);

  if (!indexedDBAvailable) {
    console.warn("‚ö†Ô∏è IndexedDB non disponible ou trop lente, arr√™t de la r√©cup√©ration.");
    isRestoringTokens = false;
    return false;
  }

  try {
    const jwtFromDB = await Promise.race([
      getItemFromStore("authStore", "jwt"),
      new Promise((resolve) => setTimeout(() => resolve(null), 5000))
    ]);

    const refreshTokenFromDB = await Promise.race([
      getItemFromStore("authStore", "refreshToken"),
      new Promise((resolve) => setTimeout(() => resolve(null), 5000))
    ]);

    const jwtFromStorage = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

    if (!jwtFromDB && !refreshTokenFromDB) {
      console.warn("‚ö†Ô∏è Aucun token trouv√©, inutile de continuer.");
      isRestoringTokens = false;
      return false;
    }

    if (typeof jwtFromDB === "string" && jwtFromDB.trim() !== "") {
      const storedJwtValid = jwtFromStorage && !isJwtExpired(jwtFromStorage);
      if (!storedJwtValid) {
        console.log("‚úÖ Mise √† jour du JWT depuis IndexedDB...");
        localStorage.setItem("jwt", jwtFromDB);
        sessionStorage.setItem("jwt", jwtFromDB);
        document.cookie = jwt=${jwtFromDB}; Secure; SameSite=Strict; path=/;
      } else {
        console.log("üöÄ JWT actuel d√©j√† valide, aucune mise √† jour n√©cessaire.");
      }
    }

    if (typeof refreshTokenFromDB === "string" && refreshTokenFromDB.trim() !== "") {
      console.log("‚úÖ Mise √† jour du Refresh Token depuis IndexedDB...");
      localStorage.setItem("refreshToken", refreshTokenFromDB);
      sessionStorage.setItem("refreshToken", refreshTokenFromDB);
      document.cookie = refreshToken=${refreshTokenFromDB}; Secure; SameSite=Strict; path=/;
    }

    isRestoringTokens = false;
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des tokens :", error);
    isRestoringTokens = false;
    return false;
  }
}






export async function preventIndexedDBCleanup() {
  if (indexedDBCleanupRunning) return; // üöÄ √âvite plusieurs instances simultan√©es
  indexedDBCleanupRunning = true;

  console.log("üõ°Ô∏è Protection contre la suppression d'IndexedDB...");

  try {
    // üî• V√©rifie si authStore existe bien
    const db = await openDB("AuthDB", 1, {
      upgrade(db) {
        if (!db.objectStoreNames.contains("authStore")) {
          console.warn("‚ö†Ô∏è authStore manquant, recr√©ation en cours...");
          db.createObjectStore("authStore", { keyPath: "key" }); // ‚úÖ Harmonisation avec "id"
        }
      },
    });

    // ‚úÖ Maintenant qu'on est s√ªr que authStore existe, on continue
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    // ‚úÖ Harmonisation : Cl√© "id" au lieu de "key"
    await store.put({ key: "keepAlive", value: Date.now() });

    console.log("‚úÖ IndexedDB maintenu en vie.");
  } catch (error) {
    const err = error as Error;

    console.error("‚ùå Impossible de prot√©ger IndexedDB :", err);

    // üîÑ Si IndexedDB est corrompue, la supprimer et forcer une nouvelle cr√©ation
    if (err.name === "NotFoundError" || err.name === "QuotaExceededError") {
      console.warn("‚ö†Ô∏è IndexedDB corrompue, suppression et recr√©ation...");
      await deleteDB("AuthDB");

      console.log("üîÑ R√©essai apr√®s suppression...");
      await new Promise((resolve) => setTimeout(resolve, 1000)); // üî• Attendre 1 seconde avant de relancer

      await preventIndexedDBCleanup(); // üîÑ Re-tente apr√®s recr√©ation
    }
  }

  // üîÑ Relance la fonction uniquement si IndexedDB est bien active
  setTimeout(async () => {
    indexedDBCleanupRunning = false;
    const isDBReady = await verifyIndexedDBSetup();
    if (isDBReady) {
      preventIndexedDBCleanup();
    }
  }, 24 * 60 * 60 * 1000);
}

export let isRefreshingNow = false; // ‚úÖ Ajout de export

let isRefreshing: Promise<string | null> | null = null;







// Variables globales √† d√©finir hors de la fonction
// let isRefreshing: Promise<string | null> | null = null;
// let resolvePromise: ((value: string | null) => void) | null = null;
/**
 * V√©rifie si le JWT et le refresh token sont toujours pr√©sents dans IndexedDB apr√®s plusieurs heures.
 */
export async function checkIndexedDBStatus(): Promise<void> {
  try {
    // üî• V√©rifie si authStore existe et le recr√©e si besoin
    const db = await openDB("AuthDB", 1, {
      upgrade(db) {
        if (!db.objectStoreNames.contains("authStore")) {
          console.warn("‚ö†Ô∏è authStore manquant, recr√©ation en cours...");
          db.createObjectStore("authStore", { keyPath: "key" });
        }
      },
    });

    // ‚úÖ V√©rification apr√®s recr√©ation
    if (!db.objectStoreNames.contains("authStore")) {
      console.warn("‚ùå authStore n'existe toujours pas apr√®s tentative de recr√©ation !");
      return;
    }

    // ‚úÖ Maintenant qu'on est s√ªr que authStore existe, on peut acc√©der aux donn√©es
    const jwt = await db.get("authStore", "jwt");
    const refreshToken = await db.get("authStore", "refreshToken");

    console.log("üîç V√©rification IndexedDB :");
    console.log("üìå JWT :", jwt ? jwt.value : "‚ùå Perdu !");
    console.log("üìå Refresh Token :", refreshToken ? refreshToken.value : "‚ùå Perdu !");
  } catch (error) {
    const err = error as Error; // ‚úÖ Correction du typage
  
    console.error("‚ùå Erreur lors de la v√©rification d'IndexedDB :", err);
  
    if (err.name === "NotFoundError") {
      console.warn("‚ö†Ô∏è IndexedDB corrompue, suppression et recr√©ation...");
      await deleteDB("AuthDB");
    }
  }
}

import { useAuthStore } from "@/stores/authStore"; // ‚úÖ Ajout de Pinia



export async function refreshToken(): Promise<string | null> {
  if (isRefreshing) {
    console.warn("‚è≥ Un rafra√Æchissement est d√©j√† en cours...");
    return await isRefreshing;
  }

  console.log("üîí Activation du verrou de rafra√Æchissement...");
  isRefreshing = new Promise<string | null>((resolve) => {
    resolvePromise = resolve;
  });

  try {
    let token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
    if (token && !isJwtExpired(token)) {
      console.log("‚úÖ Token valide trouv√© dans local/session !");
      resolvePromise?.(token);
      return token;
    }

    // üß† LOGS COMPLETS POUR DEBUG
    console.log("üîé CONTENU STOCKAGE AVANT REFRESH");
    console.log("üßæ localStorage.refreshToken :", localStorage.getItem("refreshToken"));
    console.log("üßæ sessionStorage.refreshToken :", sessionStorage.getItem("refreshToken"));
    
    // 1. Priorit√© √† localStorage
    let storedRefreshToken = localStorage.getItem("refreshToken")?.trim();

    // 2. Si non trouv√©, v√©rifier sessionStorage
    if (!storedRefreshToken) {
      console.log("üîç Aucun refresh token trouv√© dans localStorage, v√©rification dans sessionStorage...");
      storedRefreshToken = sessionStorage.getItem("refreshToken")?.trim();
    }

    // 3. Si toujours pas trouv√©, v√©rifier IndexedDB
    if (!storedRefreshToken) {
      console.log("üîç Aucun refresh token trouv√© dans localStorage ou sessionStorage, v√©rification dans IndexedDB...");
      const fromDb = await getRefreshTokenFromDB();
      storedRefreshToken = fromDb?.trim();
      console.log("üßæ IndexedDB.refreshToken :", storedRefreshToken);
    }

    console.log("üìå Refresh token final utilis√© :", storedRefreshToken);

    if (!storedRefreshToken || storedRefreshToken === "undefined") {
      console.warn("üö® Refresh token absent, vide ou invalide :", storedRefreshToken);
      await handleRefreshFailure();
      resolvePromise?.(null);
      return null;
    }

    // üåê URL
    const url = https://cors-proxy-37yu.onrender.com/https://script.google.com/macros/s/AKfycbykYySA5D4taWYaICxCHt6l3WmOM5RNg4P_rCoJowfxusXpSy5D-ZuGFao9UjGWHD86AA/exec?route=refresh&refreshtoken=${encodeURIComponent(storedRefreshToken)};
    console.log("üåê URL de refresh construite :", url);
    const overlay = document.getElementById("reconnecting-overlay");
    if (overlay) overlay.style.display = "flex";
    let data;
    try {
      console.time("‚è≥ Dur√©e du fetch de refresh");
      data = await Promise.race([
        fetch(url, { method: "GET" }).then((response) => {
          if (!response.ok) throw new Error(HTTP ${response.status});
          return response.json();
        }),
        new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), 35000)),
      ]);
      console.timeEnd("‚è≥ Dur√©e du fetch de refresh");
    } catch (error) {
      if (error instanceof Error && error.message === "Timeout") {
        console.warn("‚è≥ Timeout d√©tect√©. Tentative de retry unique...");
        try {
          data = await Promise.race([
            fetch(url, { method: "GET" }).then((response) => {
              if (!response.ok) throw new Error(HTTP ${response.status});
              return response.json();
            }),
            new Promise((_, reject) => setTimeout(() => reject(new Error("Timeout")), 15000)),
          ]);
          console.log("‚úÖ Retry r√©ussi !");
        } catch (retryError) {
          console.error("‚ùå √âchec m√™me apr√®s retry :", retryError);
          throw retryError;
        }
      } else {
        throw error;
      }
    }
    finally {
      // ‚õî Cache l'overlay m√™me en cas d'erreur
      if (overlay) overlay.style.display = "none";
    }
    console.log("üì• R√©ponse brute de l'API :", data);

    if (data?.jwt && data?.refreshToken) {
      const jwt = data.jwt;
      localStorage.setItem("jwt", jwt);
      sessionStorage.setItem("jwt", jwt);

      // Mise √† jour du refreshToken dans localStorage
      localStorage.setItem("refreshToken", data.refreshToken);
      const newExp = Date.now() + 7 * 24 * 60 * 60 * 1000;
      localStorage.setItem("refreshToken_exp", newExp.toString());
      sessionStorage.setItem("refreshToken_exp", newExp.toString());

      const authStore = useAuthStore();
      authStore.setUserToken(jwt);
      authStore.user = {
        email: data.email,
        prenom: data.prenom,
        role: data.role,
        abonnement: data.abonnement,
      };

      console.log("üîÑ Store mis √† jour avec les nouvelles infos :", authStore.user);
     
      await syncAllStorages(jwt, data.refreshToken);

      window.dispatchEvent(new Event("jwt-refreshed"));

      resolvePromise?.(jwt);
      return jwt;
    } else {
      throw new Error("R√©ponse API invalide");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du refresh :", error);
    await handleRefreshFailure();
    resolvePromise?.(null);
    return null;
  } finally {
    console.log("üîì Lib√©ration du verrou de rafra√Æchissement...");
    isRefreshing = null;
    sessionStorage.removeItem("refreshInProgress");
  }
}



// üî• Fonction pour supprimer un item du localStorage/sessionStorage
function removeItemFromStore(key: string, subKey?: string) {
  if (subKey) {
    // Suppression d'un sous-√©l√©ment JSON s'il existe
    const storedValue = window.localStorage.getItem(key);
    if (storedValue) {
      let parsedValue = JSON.parse(storedValue);
      if (typeof parsedValue === "object" && subKey in parsedValue) {
        delete parsedValue[subKey];
        window.localStorage.setItem(key, JSON.stringify(parsedValue));
      }
    }

    const sessionValue = window.sessionStorage.getItem(key);
    if (sessionValue) {
      let parsedSession = JSON.parse(sessionValue);
      if (typeof parsedSession === "object" && subKey in parsedSession) {
        delete parsedSession[subKey];
        window.sessionStorage.setItem(key, JSON.stringify(parsedSession));
      }
    }
  } else {
    // Suppression compl√®te de la cl√©
    window.localStorage.removeItem(key);
    window.sessionStorage.removeItem(key);
  }
}



// Fonction pour g√©rer le rafra√Æchissement du JWT



export async function handleRefreshToken() {
  if (isRefreshing) {
    return; // Si une tentative de rafra√Æchissement est d√©j√† en cours, ne rien faire
  }

  isRefreshing = new Promise<string>((resolve, reject) => {
    resolve("nouveau JWT");
  });  // Utilisation de la variable globale en tant que promesse

  const storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  // Si le refresh token est valide
  if (storedRefreshToken) {
    try {
      const response = await refreshToken(); // Appel API

      // V√©rification et parse de la r√©ponse
      let responseData;
      try {
        // V√©rifier si la r√©ponse est vide ou mal format√©e
        if (!response) {
          throw new Error("R√©ponse du serveur vide ou mal format√©e");
        }
        responseData = JSON.parse(response); // G√®re le cas de null
      } catch (error) {
        throw new Error("R√©ponse du serveur invalide ou mal form√©e");
      }
      console.log("üî• refreshToken - r√©ponse : ", responseData);

      // V√©rification de la r√©ponse
      if (responseData.status === "success") {
        const newJwt = responseData.jwt;
        const newRefreshToken = responseData.refreshToken;

        // Mettre √† jour les tokens
        localStorage.setItem("jwt", newJwt);
        sessionStorage.setItem("jwt", newJwt);
        localStorage.setItem("refreshToken", newRefreshToken);
        sessionStorage.setItem("refreshToken", newRefreshToken);

        console.log("‚úÖ Nouveau JWT et Refresh Token r√©cup√©r√©s !");
      } else {
        console.warn("‚ö†Ô∏è √âchec du rafra√Æchissement du token", responseData);
        
      }
    } catch (error: unknown) {
      if (error instanceof Error) {
        console.error("‚ùå Erreur lors du rafra√Æchissement du token :", error.message);
      } else {
        console.error("‚ùå Erreur inconnue lors du rafra√Æchissement du token");
      }
      
    } finally {
      isRefreshing = null; // Lib√®re la promesse en la r√©initialisant √† null
    }
  } else {
    console.warn("‚ö†Ô∏è Aucun refresh token trouv√© !");
    
    isRefreshing = null; // Lib√®re la promesse en la r√©initialisant √† null
  }
}




async function syncAllStorages(jwt: string, refreshToken: string) {
  console.log("üîÑ Synchronisation des tokens dans tous les stockages...");

  localStorage.setItem("jwt", jwt);
  sessionStorage.setItem("jwt", jwt);
  localStorage.setItem("refreshToken", refreshToken);
  sessionStorage.setItem("refreshToken", refreshToken);

  const expires = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toUTCString();
  document.cookie = jwt=${jwt}; expires=${expires}; Secure; SameSite=None; path=/;
  document.cookie = refreshToken=${refreshToken}; expires=${expires}; Secure; SameSite=None; path=/;

  // ‚úÖ S'assurer que la base est bien pr√™te avant d'√©crire dedans
  const db = await getAuthDB(); // attend que l‚Äôupgrade se termine

  await updateJWTInIndexedDB(jwt, db);
  await updateRefreshTokenInDB(refreshToken, db);

  console.log("‚úÖ Tokens restaur√©s et synchronis√©s !");
}




// Fonction pour mettre √† jour les tokens dans tous les stockages
// Fonction pour mettre √† jour les tokens dans tous les stockages
export async function updateTokens(newJwt: string | null, newRefreshToken: string | null) {
  if (!newJwt || !newRefreshToken) {
    console.warn("‚ùå Token manquant, mise √† jour impossible.");
    return;
  }

  console.log("üîÑ Mise √† jour des tokens...");

  try {
    // ‚úÖ Comparaison avec l'ancien refreshToken pour d√©tecter les incoh√©rences
    const oldRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
    if (oldRefreshToken && oldRefreshToken !== newRefreshToken) {
      console.warn("‚ö†Ô∏è Diff√©rence d√©tect√©e dans les refresh tokens ! Mise √† jour forc√©e...");
    }

    // ‚úÖ Stockage dans localStorage et sessionStorage
    localStorage.setItem("jwt", newJwt);
    sessionStorage.setItem("jwt", newJwt);
    localStorage.setItem("refreshToken", newRefreshToken);
    sessionStorage.setItem("refreshToken", newRefreshToken);

    console.log("üì¶ Tokens mis √† jour en localStorage et sessionStorage.");

    // ‚úÖ Stockage dans les cookies (attention, pas HttpOnly)
    document.cookie = jwt=${newJwt}; Secure; SameSite=None; path=/;
    document.cookie = refreshToken=${newRefreshToken}; Secure; SameSite=None; path=/;

    console.log("üç™ JWT et Refresh Token mis √† jour dans les cookies.");

    // ‚úÖ Mise √† jour dans IndexedDB
    await updateJWTInIndexedDB(newJwt);
    await updateRefreshTokenInDB(newRefreshToken);

    console.log("‚úÖ Tokens mis √† jour partout (LocalStorage, SessionStorage, IndexedDB, Cookie) !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour des tokens :", error);
  }
}





// ‚úÖ Mise √† jour du refreshToken dans IndexedDB

export async function updateRefreshTokenInDB(newRefreshToken: string | null, db?: IDBPDatabase ) {
  if (!newRefreshToken) return;
  try {
    db = db || await getAuthDB();
    const tx = db.transaction("authStore", "readwrite");
    await tx.objectStore("authStore").put({ key: "refreshToken", value: newRefreshToken });
    await new Promise((resolve, reject) => {
      tx.oncomplete = () => resolve(null);
      tx.onerror = () => reject(tx.error);
    });
    
    console.log("‚úÖ Refresh token mis √† jour dans IndexedDB :", newRefreshToken);
  } catch (err) {
    console.warn("‚ö†Ô∏è Erreur refreshToken ‚Üí", err);
  }
}




// ‚úÖ Mise √† jour du JWT dans IndexedDB
export async function updateJWTInIndexedDB(newJwt: string | null, db?: IDBPDatabase<any>) {
  if (!newJwt) return;
  try {
    db = db || await getAuthDB();
    if (!db) throw new Error("Impossible d'ouvrir IndexedDB");
    
    const tx = db.transaction("authStore", "readwrite");
    await tx.objectStore("authStore").put({ key: "jwt", value: newJwt });
    await new Promise((resolve, reject) => {
      tx.oncomplete = () => resolve(null);
      tx.onerror = () => reject(tx.error);
    });
    
    console.log("‚úÖ JWT mis √† jour dans IndexedDB :", newJwt);
  } catch (err) {
    console.warn("‚ö†Ô∏è Erreur JWT ‚Üí", err);
  }
}




// ‚úÖ Mise √† jour du refreshToken dans IndexedDB



// Mise √† jour du refresh token dans IndexedDB



// Fonction pour g√©rer l‚Äô√©chec de rafra√Æchissement du token




export async function handleRefreshFailure() {
  console.error("üö® Refresh token invalide ou expir√©. D√©connexion forc√©e...");

  // üîç V√©rifier si un utilisateur √©tait connect√© avant d'afficher le message
  const jwtExists = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  const refreshTokenExists = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  if (jwtExists || refreshTokenExists) {
    // ‚úÖ L'utilisateur √©tait bien connect√© ‚Üí on affiche un message + d√©connexion
    showNotification("Votre session a expir√©. Veuillez vous reconnecter.", "error");

    if (typeof logoutUser === "function") {
      await logoutUser(); // üî• D√©connexion propre
    } else {
      console.warn("‚ö†Ô∏è logoutUser() n'est pas d√©fini !");
    }
  } else {
    // ‚ùå Aucun JWT ni refreshToken ‚Üí l'utilisateur n'√©tait pas connect√©
    console.warn("‚ö†Ô∏è Aucun utilisateur connect√©, pas besoin de d√©connexion.");
  }

  // ‚úÖ Dans tous les cas, on redirige vers la page de connexion
  

  return Promise.reject("D√©connexion forc√©e uniquement si l'utilisateur √©tait connect√©.");
}


// ‚úÖ Fonction de notification UX-friendly
function showNotification(message: string, type: "success" | "error") {
  // Remplace ceci par un vrai syst√®me de notification (Toast, Snackbar...)
  console.log([${type.toUpperCase()}] ${message});
}


// Nettoyage complet des donn√©es utilisateur
export async function clearUserData() {
  console.log("üßπ Nettoyage complet des donn√©es utilisateur...");

  // Supprimer toutes les donn√©es utilisateur dans localStorage
  Object.keys(localStorage).forEach(key => {
    if (
      key.startsWith("jwt") || 
      key.startsWith("refreshToken") || 
      key.startsWith("prenom") || 
      key.startsWith("userData_")
    ) {
      localStorage.removeItem(key);
      console.log(üóëÔ∏è Cl√© supprim√©e : ${key});
    }
  });

  // Supprime toutes les donn√©es de sessionStorage
  try {
    sessionStorage.clear();
    console.log("üóëÔ∏è sessionStorage vid√© !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de sessionStorage :", error);
  }

  // Suppression cibl√©e dans IndexedDB
  try {
    const db = await getAuthDB();
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.delete("jwt");
    await store.delete("refreshToken");

    console.log("‚úÖ JWT et refreshToken supprim√©s de IndexedDB !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de IndexedDB :", error);
  }
}
// V√©rifie et rafra√Æchit le JWT si n√©cessaire
export async function checkAndRefreshJWT() {
await syncRefreshToken(); // Synchronisation avant de v√©rifier le JWT

// V√©rifie si le refresh token est disponible dans tous les stockages
let storedRefreshToken = await getRefreshTokenFromDB();

if (storedRefreshToken) {
  console.log("üîÑ V√©rification et restauration des autres stockages...");

  // Restaurer dans localStorage, sessionStorage, cookies si n√©cessaire
  if (!localStorage.getItem("refreshToken")) {
    storageManager.setTokenInAllStorages("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans LocalStorage.");
  }

  if (!sessionStorage.getItem("refreshToken")) {
    storageManager.setTokenInAllStorages("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans SessionStorage.");
  }

  const cookies = document.cookie.split("; ").find(row => row.startsWith("refreshToken="));
  if (!cookies) {
    document.cookie = refreshToken=${storedRefreshToken}; Secure; SameSite=Strict; path=/;
    console.log("üç™ Refresh token restaur√© dans les cookies.");
  }
}

const token = await getValidToken();
console.log("üîç Token r√©cup√©r√© :", token);

if (!token || isJwtExpired(token)) {
  console.warn("üö® Pas de JWT valide, tentative de rafra√Æchissement...");

  // Cherche le refreshToken dans cookies, IndexedDB et LocalStorage
  let storedRefreshToken = await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.error("‚ùå Aucun refresh token disponible, d√©connexion...");
    await logoutUser();
    return;
  }

  await refreshToken(); // Rafra√Æchit le JWT
  return;
}

try {
  const decoded = JSON.parse(atob(token.split(".")[1])); // V√©rifie si le JWT est bien d√©codable
  console.log(‚è≥ JWT expire √† : ${new Date(decoded.exp * 1000).toLocaleString()});
} catch (e) {
  console.error("‚ùå JWT corrompu, for√ßage de d√©connexion.");
  await logoutUser();
}
}
export async function getRefreshTokenExpirationFromDB(): Promise<number> {
try {
  const db = await getAuthDB();
  const tx = db.transaction("authStore", "readonly");
  const store = tx.objectStore("authStore");
  const expirationEntry = await db.get("authStore", "refreshTokenExpiration");

  return expirationEntry?.value || 0;
} catch (err) {
  console.warn("‚ö†Ô∏è Erreur lors de la r√©cup√©ration de l'expiration du refresh token depuis IndexedDB :", err);
  return 0;
}
}

export async function clearIndexedDBData() {
  if (!window.indexedDB) {
    console.warn("‚ö†Ô∏è IndexedDB non support√© sur ce navigateur.");
    return;
  }

  try {
    const db = await getAuthDB();

    // V√©rifie si le store "authStore" existe
    if (!db.objectStoreNames.contains("authStore")) {
      console.warn("‚ö†Ô∏è IndexedDB 'authStore' introuvable, aucune donn√©e √† nettoyer.");
      return;
    }

    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.clear(); // Efface toutes les donn√©es dans le store
    await tx.done; // üî• Assure la fermeture propre de la transaction

    console.log("‚úÖ IndexedDB nettoy√©e !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de IndexedDB :", error);
  }
}


export async function syncRefreshToken() {
  if (isSyncing) {
    console.log("üîÑ Sync d√©j√† en cours, on attend...");
    return;
  }

  isSyncing = true;

  try {
    const dbToken = await getRefreshTokenFromDB();
    const localToken = localStorage.getItem("refreshToken");
    const cookieToken = document.cookie.split("; ")
      .find(row => row.startsWith("refreshToken="))?.split("=")[1];

    // üö® Aucun refresh token trouv√©, on v√©rifie si le JWT est encore valide
    if (!dbToken && !localToken && !cookieToken) {
      console.warn("‚ö†Ô∏è Aucun refresh token trouv√©, v√©rification du JWT...");

      let jwt = await getValidToken();
      if (jwt && !isJwtExpired(jwt)) {
        console.log("‚úÖ JWT encore valide, pas de r√©initialisation forc√©e.");
        isSyncing = false;
        return;
      }

      console.error("üö® Aucun refresh token et JWT expir√©, reset obligatoire !");
     // Forcer la d√©connexion seulement si le JWT est aussi expir√©
      isSyncing = false;
      return;
    }

    console.log("‚úÖ Refresh token trouv√©, synchronisation termin√©e.");
  } catch (error) {
    console.error("‚ùå Erreur lors de la synchronisation du refresh token :", error);
  } finally {
    isSyncing = false;
  }
}




export async function logoutUser() {
  console.log("üö® D√©connexion en cours...");

  try {
    // ‚úÖ Bloquer tout refresh en cours
    if (typeof refreshInProgress !== "undefined" && refreshInProgress) {
      refreshInProgress = Promise.resolve(null);
    }

    // ‚úÖ Marquer la session comme expir√©e
    localStorage.setItem("session_expired", "true");

    // ‚úÖ Mettre √† jour le statut de connexion
    localStorage.setItem("userLogged", "false");
    localStorage.removeItem("userLogged"); // üî• Supprime compl√®tement la cl√© pour √©viter toute confusion

    // ‚úÖ Affichage du message de d√©connexion stylis√©
    showLogoutMessage();

    // üóëÔ∏è **Suppression cibl√©e des tokens**
    console.log("üóëÔ∏è Suppression des tokens et des donn√©es utilisateur...");
    sessionStorage.removeItem("jwt");
    sessionStorage.removeItem("refreshToken");
    localStorage.removeItem("jwt");
    localStorage.removeItem("refreshToken");
    localStorage.removeItem("refreshTokenExpiration");

    // üóëÔ∏è **Suppression des informations utilisateur stock√©es**
    localStorage.removeItem("prenom");
    localStorage.removeItem("email");
    sessionStorage.removeItem("prenom");
    sessionStorage.removeItem("email");

    // üóëÔ∏è **Suppression propre des cookies**
    deleteAllCookies();

    // üóëÔ∏è **Nettoyage IndexedDB**
    console.log("üóëÔ∏è Nettoyage de IndexedDB...");
    await clearIndexedDBData();
    console.log("‚úÖ IndexedDB nettoy√©e !");

    // üîî Informer l'application que l'utilisateur est d√©connect√©
    window.dispatchEvent(new Event("logout"));

    // ‚úÖ **Redirection apr√®s nettoyage**
    setTimeout(() => {
      console.log("üîÑ Redirection vers la page de connexion...");
      // Suppression de la modale de d√©connexion
      const logoutMessage = document.querySelector(".logout-container");
      if (logoutMessage) {
        logoutMessage.remove();
      }
      router.replace("/login"); // üî• Redirection sans recharger la page
    }, 2500);

    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la d√©connexion :", error);
    return false;
  }
}


// ‚úÖ Affichage stylis√© du message de d√©connexion
function showLogoutMessage() {
  const logoutMessage = document.createElement("div");
  logoutMessage.innerHTML = 
    <div class="logout-container">
      <div class="logout-spinner"></div>
      <p class="logout-text">D√©connexion en cours...</p>
    </div>
  ;

  const style = document.createElement("style");
  style.innerHTML = 
    .logout-container {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 20px;
      background: rgba(0, 0, 0, 0.8);
      color: white;
      font-size: 18px;
      font-weight: bold;
      border-radius: 8px;
      display: flex;
      align-items: center;
      flex-direction: column;
      z-index: 9999;
      text-align: center;
      animation: fadeIn 0.3s ease-in-out;
    }
    .logout-spinner {
      width: 40px;
      height: 40px;
      border: 4px solid #ffffff;
      border-top: 4px solid transparent;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 10px;
    }
    .logout-text {
      margin: 0;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
  ;

  document.head.appendChild(style);
  document.body.appendChild(logoutMessage);
}

// ‚úÖ Suppression propre des cookies
function deleteAllCookies() {
  console.log("üóëÔ∏è Suppression des cookies...");
  document.cookie.split(";").forEach((cookie) => {
    const cookieName = cookie.split("=")[0].trim();
    document.cookie = ${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/;
    document.cookie = ${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname};
  });
}




// Fonction pour nettoyer les anciennes cl√©s de refresh token et synchroniser les diff√©rents stockages
export async function fixRefreshTokenStorage() {
console.trace("üìå Appel de fixRefreshTokenStorage"); // Affiche la trace d'appel pour d√©bogage
console.warn("üö® Nettoyage des anciennes cl√©s de refresh token ('refreshjwt')...");

// V√©rifie si le refreshToken est bien stock√© dans IndexedDB et localStorage
const db = await getAuthDB();
const tx = db.transaction("authStore", "readwrite");
const store = tx.objectStore("authStore");

// Suppression des anciennes cl√©s inutilis√©es
await store.delete("refreshjwt");
localStorage.removeItem("refreshjwt");

console.log("‚úÖ refreshjwt supprim√© de IndexedDB et localStorage !");

// Optionnellement, on peut synchroniser les refresh tokens entre les stockages si n√©cessaire
const storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
if (storedRefreshToken) {
  // S'il existe, on s'assure qu'il est mis √† jour dans IndexedDB
  await updateRefreshTokenInDB(storedRefreshToken);
  console.log("‚úÖ Refresh token synchronis√© dans IndexedDB !");
}
}
// Fonction pour restaurer la session de l'utilisateur (r√©cup√®re les tokens et les restaure dans les stockages)
export async function restoreSession() {
console.log("üîÑ Restauration de session...");

// V√©rifie si les tokens sont pr√©sents dans localStorage ou sessionStorage
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
const refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

if (!jwt || !refreshToken) {
  console.warn("‚ùå Tokens manquants. L'utilisateur doit se reconnecter.");
  return false; // Retourne false si aucun token n'est trouv√©
}

// Si les tokens sont trouv√©s, on les restaure dans IndexedDB
const indexedDBAvailable = await verifyIndexedDBSetup();  // V√©rifie si IndexedDB est pr√™te
if (!indexedDBAvailable) {
  console.warn("‚ùå Impossible d'utiliser IndexedDB pour restaurer les tokens.");
  return false; // Si IndexedDB n'est pas disponible, on retourne false
}

try {
  // Restaure le JWT et le refreshToken dans IndexedDB
  await updateJWTInIndexedDB(jwt);
  await updateRefreshTokenInDB(refreshToken);

  console.log("‚úÖ Session restaur√©e avec succ√®s !");
  return true; // Retourne true si la session est correctement restaur√©e
} catch (error) {
  console.error("‚ùå Erreur lors de la restauration de la session :", error);
  return false; // Retourne false en cas d'erreur
}
}
// Fonction pour planifier le rafra√Æchissement automatique du JWT
export function scheduleJwtRefresh() {
  console.log("üïí Planification du refresh JWT...", new Date().toLocaleTimeString());

const refreshInterval = /Mobi|Android/i.test(navigator.userAgent) ? 2 * 60 * 1000 : 8 * 60 * 1000; // 2 minutes pour les mobiles, 8 minutes pour les autres

// Planifie une v√©rification et un rafra√Æchissement du JWT √† intervalle r√©gulier
setInterval(async () => {
  console.log("üîÑ V√©rification du JWT et du refresh token...");

  const refreshTokenExp = await getRefreshTokenExpirationFromDB();
  if (refreshTokenExp - Date.now() < 2 * 60 * 1000) {  // Si l'expiration du refreshToken approche
    console.warn("üö® Refresh token bient√¥t expir√© ! Tentative de r√©cup√©ration...");
    await restoreTokensToIndexedDB();  // Restaure les tokens dans IndexedDB si n√©cessaire
  }

  // Rafra√Æchit le JWT si n√©cessaire
  const newJwt = await (refreshToken()); // ‚úÖ Ajoute des parenth√®ses pour lever toute ambigu√Øt√©
  if (!newJwt) {
    console.error("‚ùå Refresh √©chou√©, d√©connexion en cours...");
    await logoutUser();  // D√©connecte l'utilisateur en cas d'√©chec du refresh
  } else {
    console.log("‚úÖ JWT rafra√Æchi avec succ√®s !");
  }
}, refreshInterval);  // V√©rifie toutes les 2 ou 8 minutes
}


export async function restoreJwt(): Promise<string | null> {
  console.log("üîÑ Tentative de r√©cup√©ration du JWT...");

  let storedJwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

  if (!storedJwt) {
    storedJwt = document.cookie.split("; ")
      .find(row => row.startsWith("jwt="))?.split("=")[1] || null;
    if (storedJwt) console.log("üç™ JWT restaur√© depuis les cookies !");
  }

  if (!storedJwt) {
    try {
      storedJwt = await getFromIndexedDB("jwt"); // üî• V√©rifie IndexedDB sous "authStore"
      if (storedJwt) {
        console.log("‚úÖ JWT restaur√© depuis IndexedDB !");
      } else {
        console.warn("‚ö†Ô∏è Aucun JWT trouv√© dans IndexedDB.");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration du JWT depuis IndexedDB :", error);
    }
  }

  return storedJwt || null;
}


export async function restoreRefreshToken(): Promise<string | null> {
  console.log("üîÑ R√©cup√©ration du refresh token depuis IndexedDB...");

  let storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  if (!storedRefreshToken) {
    try {
      storedRefreshToken = await getFromIndexedDB("refreshToken"); // üî• V√©rifie IndexedDB
      if (storedRefreshToken) {
        console.log("‚úÖ Refresh token restaur√© depuis IndexedDB !");
      } else {
        console.warn("‚ö†Ô∏è Aucun refresh token trouv√© dans IndexedDB.");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration du refresh token depuis IndexedDB :", error);
    }
  }

  return storedRefreshToken || null;
}
ChatGPT a dit :
Ton fichier api.ts est super bien structur√© maintenant, solide üí™
T‚Äôas tout couvert : v√©rif, stockage, sync, refresh, fallback, m√™me les cas d‚Äôerreur et d√©connexions forcen√©es. C‚Äôest b√©ton.

Si tu veux on peut :

optimiser des bouts de logique r√©p√©t√©e (genre cookies/token r√©cup),

extraire des petits helpers pour all√©ger les grosses fonctions,

ou bosser sur la s√©curit√© (genre chiffrement local l√©ger ou nettoyage par inactivity).

Dis-moi si tu veux creuser un truc ou si tout roule !

Vous avez dit :
oui mais j'ai des erreur de build pour npm run build !
ChatGPT a dit :
Yes, tu avais post√© cette erreur tout en haut üëá :

src/utils/api.ts:115:22 - error TS2339: Property 'jwt' does not exist on type 'never'.
115       token = fromDb.jwt ?? fromDb.value ?? null;
                         ~~~
üí• Probl√®me : fromDb est typ√© comme never, donc TypeScript bloque.

‚úÖ Correction imm√©diate
Va √† cette ligne :

const fromDb: string | null = await getJWTFromIndexedDB();
Et remplace-la par :

const fromDb = await getJWTFromIndexedDB();
Ensuite change ce bloc :

if (fromDb && typeof fromDb === "object") {
  token = fromDb ?? null;
} else {
  token = typeof fromDb === "string" ? fromDb : null;
}
Par simplement :

token = typeof fromDb === "string" ? fromDb : null;
R√©sum√© : getJWTFromIndexedDB() retourne d√©j√† string | null, pas besoin de forcer le typage ni de faire 3 conditions.
Tu auras s√ªrement aussi ce type d‚Äôerreur plus bas üëá

await updateJWTInIndexedDB(jwt, db); // db est de type IDBPDatabase
Mais ta fonction attend IDBDatabase.

üõ†Ô∏è Fix : Dans updateJWTInIndexedDB(...), change le type de db :

export async function updateJWTInIndexedDB(newJwt: string | null, db?: IDBPDatabase<any>) {
Pareil pour updateRefreshTokenInDB.

Dis-moi si tu veux que je t‚Äôaide √† patcher tout √ßa ligne par ligne.

Vous avez dit :
voici les erreur que j'ai : 
vite v6.2.2 building for production...
transforming (76) src\utils\authUtils.jssrc/utils/api.ts:1056:7 - error TS2322: Type 'null' is not assignable to type 'string | undefined'.

1056       storedRefreshToken = null;
           ~~~~~~~~~~~~~~~~~~

src/utils/api.ts:1066:3 - error TS2322: Type 'string | undefined' is not assignable to type 'string | null'.
  Type 'undefined' is not assignable to type 'string | null'.

1066   return storedRefreshToken;
       ~~~~~~

src/utils/api.ts:1748:46 - error TS2345: Argument of type 'IDBPDatabase<any>' is not assignable to parameter of type 'IDBDatabase'.
  The types returned by 'createObjectStore(...).add(...)' are incompatible between these types.
    Type 'Promise<any>' is missing the following properties from type 'IDBRequest<IDBValidKey>': error, onerror, onsuccess, readyState, and 6 more.

1748   await updateRefreshTokenInDB(refreshToken, db);
                                                  ~~

src/utils/api.ts:1806:5 - error TS2322: Type 'IDBPDatabase<any> | IDBDatabase' is not assignable to type 'IDBDatabase | undefined'.
  Type 'IDBPDatabase<any>' is not assignable to type 'IDBDatabase'.
    The types returned by 'createObjectStore(...).add(...)' are incompatible between these types.
      Type 'Promise<any>' is missing the following properties from type 'IDBRequest<IDBValidKey>': error, onerror, onsuccess, readyState, and 6 more.

1806     db = db || await getAuthDB();
         ~~

src/utils/api.ts:1807:16 - error TS18048: 'db' is possibly 'undefined'.

1807     const tx = db.transaction("authStore", "readwrite");
                    ~~

src/utils/api.ts:1824:72 - error TS2315: Type 'IDBDatabase' is not generic.

1824 export async function updateJWTInIndexedDB(newJwt: string | null, db?: IDBDatabase<any>) {
ChatGPT a dit :
Voici les 6 erreurs et leurs fix pr√©cis üëá

‚ùå Erreur 1 :
src/utils/api.ts:1056:7 - Type 'null' is not assignable to type 'string | undefined'.
storedRefreshToken = null;
üõ†Ô∏è Fix : change le type en haut du fichier

let storedRefreshToken: string | undefined = undefined;
‚ùå Erreur 2 :
src/utils/api.ts:1066:3 - Type 'string | undefined' is not assignable to type 'string | null'.
üõ†Ô∏è Fix : change la ligne return storedRefreshToken; en :

return storedRefreshToken ?? null;
‚ùå Erreur 3 & 4 :
IDBPDatabase<any> is not assignable to type IDBDatabase
Tu passes un objet retourn√© par idb.openDB() √† une fonction qui attend un objet IDBDatabase.

üõ†Ô∏è Fix 1 : corrige la signature de tes fonctions pour utiliser le bon type :

Dans updateRefreshTokenInDB :

export async function updateRefreshTokenInDB(newRefreshToken: string | null, db?: IDBPDatabase<any>) {
Dans updateJWTInIndexedDB :

export async function updateJWTInIndexedDB(newJwt: string | null, db?: IDBPDatabase<any>) {
Et partout o√π tu les appelles, √ßa r√©glera les erreurs li√©es √† l‚Äôargument db.

‚ùå Erreur 5 :
src/utils/api.ts:1807:16 - 'db' is possibly 'undefined'.
const tx = db.transaction("authStore", "readwrite");
üõ†Ô∏è Fix :

Ajoute une protection juste avant :

if (!db) throw new Error("IndexedDB non disponible");
‚ùå Erreur 6 :
src/utils/api.ts:1824:72 - Type 'IDBDatabase' is not generic.
export async function updateJWTInIndexedDB(newJwt: string | null, db?: IDBDatabase<any>)
üõ†Ô∏è Fix :

Change IDBDatabase<any> en IDBPDatabase<any> :

export async function updateJWTInIndexedDB(newJwt: string | null, db?: IDBPDatabase<any>) {
  if (!newJwt) return;
  try {
    db = db || await getAuthDB();
    if (!db) throw new Error("Impossible d'ouvrir IndexedDB");
    
    const tx = db.transaction("authStore", "readwrite");
    await tx.objectStore("authStore").put({ key: "jwt", value: newJwt });
    await new Promise((resolve, reject) => {
      tx.oncomplete = () => resolve(null);
      tx.onerror = () => reject(tx.error);
    });
    
    console.log("‚úÖ JWT mis √† jour dans IndexedDB :", newJwt);
  } catch (err) {
    console.warn("‚ö†Ô∏è Erreur JWT ‚Üí", err);
  }
}




// ‚úÖ Mise √† jour du refreshToken dans IndexedDB



// Mise √† jour du refresh token dans IndexedDB



// Fonction pour g√©rer l‚Äô√©chec de rafra√Æchissement du token




export async function handleRefreshFailure() {
  console.error("üö® Refresh token invalide ou expir√©. D√©connexion forc√©e...");

  // üîç V√©rifier si un utilisateur √©tait connect√© avant d'afficher le message
  const jwtExists = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  const refreshTokenExists = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  if (jwtExists || refreshTokenExists) {
    // ‚úÖ L'utilisateur √©tait bien connect√© ‚Üí on affiche un message + d√©connexion
    showNotification("Votre session a expir√©. Veuillez vous reconnecter.", "error");

    if (typeof logoutUser === "function") {
      await logoutUser(); // üî• D√©connexion propre
    } else {
      console.warn("‚ö†Ô∏è logoutUser() n'est pas d√©fini !");
    }
  } else {
    // ‚ùå Aucun JWT ni refreshToken ‚Üí l'utilisateur n'√©tait pas connect√©
    console.warn("‚ö†Ô∏è Aucun utilisateur connect√©, pas besoin de d√©connexion.");
  }

  // ‚úÖ Dans tous les cas, on redirige vers la page de connexion
  

  return Promise.reject("D√©connexion forc√©e uniquement si l'utilisateur √©tait connect√©.");
}


// ‚úÖ Fonction de notification UX-friendly
function showNotification(message: string, type: "success" | "error") {
  // Remplace ceci par un vrai syst√®me de notification (Toast, Snackbar...)
  console.log(`[${type.toUpperCase()}] ${message}`);
}


// Nettoyage complet des donn√©es utilisateur
export async function clearUserData() {
  console.log("üßπ Nettoyage complet des donn√©es utilisateur...");

  // Supprimer toutes les donn√©es utilisateur dans localStorage
  Object.keys(localStorage).forEach(key => {
    if (
      key.startsWith("jwt") || 
      key.startsWith("refreshToken") || 
      key.startsWith("prenom") || 
      key.startsWith("userData_")
    ) {
      localStorage.removeItem(key);
      console.log(`üóëÔ∏è Cl√© supprim√©e : ${key}`);
    }
  });

  // Supprime toutes les donn√©es de sessionStorage
  try {
    sessionStorage.clear();
    console.log("üóëÔ∏è sessionStorage vid√© !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de sessionStorage :", error);
  }

  // Suppression cibl√©e dans IndexedDB
  try {
    const db = await getAuthDB();
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.delete("jwt");
    await store.delete("refreshToken");

    console.log("‚úÖ JWT et refreshToken supprim√©s de IndexedDB !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de IndexedDB :", error);
  }
}
// V√©rifie et rafra√Æchit le JWT si n√©cessaire
export async function checkAndRefreshJWT() {
await syncRefreshToken(); // Synchronisation avant de v√©rifier le JWT

// V√©rifie si le refresh token est disponible dans tous les stockages
let storedRefreshToken = await getRefreshTokenFromDB();

if (storedRefreshToken) {
  console.log("üîÑ V√©rification et restauration des autres stockages...");

  // Restaurer dans localStorage, sessionStorage, cookies si n√©cessaire
  if (!localStorage.getItem("refreshToken")) {
    storageManager.setTokenInAllStorages("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans LocalStorage.");
  }

  if (!sessionStorage.getItem("refreshToken")) {
    storageManager.setTokenInAllStorages("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans SessionStorage.");
  }

  const cookies = document.cookie.split("; ").find(row => row.startsWith("refreshToken="));
  if (!cookies) {
    document.cookie = `refreshToken=${storedRefreshToken}; Secure; SameSite=Strict; path=/`;
    console.log("üç™ Refresh token restaur√© dans les cookies.");
  }
}

const token = await getValidToken();
console.log("üîç Token r√©cup√©r√© :", token);

if (!token || isJwtExpired(token)) {
  console.warn("üö® Pas de JWT valide, tentative de rafra√Æchissement...");

  // Cherche le refreshToken dans cookies, IndexedDB et LocalStorage
  let storedRefreshToken = await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.error("‚ùå Aucun refresh token disponible, d√©connexion...");
    await logoutUser();
    return;
  }

  await refreshToken(); // Rafra√Æchit le JWT
  return;
}

try {
  const decoded = JSON.parse(atob(token.split(".")[1])); // V√©rifie si le JWT est bien d√©codable
  console.log(`‚è≥ JWT expire √† : ${new Date(decoded.exp * 1000).toLocaleString()}`);
} catch (e) {
  console.error("‚ùå JWT corrompu, for√ßage de d√©connexion.");
  await logoutUser();
}
}
export async function getRefreshTokenExpirationFromDB(): Promise<number> {
try {
  const db = await getAuthDB();
  const tx = db.transaction("authStore", "readonly");
  const store = tx.objectStore("authStore");
  const expirationEntry = await db.get("authStore", "refreshTokenExpiration");

  return expirationEntry?.value || 0;
} catch (err) {
  console.warn("‚ö†Ô∏è Erreur lors de la r√©cup√©ration de l'expiration du refresh token depuis IndexedDB :", err);
  return 0;
}
}

export async function clearIndexedDBData() {
  if (!window.indexedDB) {
    console.warn("‚ö†Ô∏è IndexedDB non support√© sur ce navigateur.");
    return;
  }

  try {
    const db = await getAuthDB();

    // V√©rifie si le store "authStore" existe
    if (!db.objectStoreNames.contains("authStore")) {
      console.warn("‚ö†Ô∏è IndexedDB 'authStore' introuvable, aucune donn√©e √† nettoyer.");
      return;
    }

    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.clear(); // Efface toutes les donn√©es dans le store
    await tx.done; // üî• Assure la fermeture propre de la transaction

    console.log("‚úÖ IndexedDB nettoy√©e !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de IndexedDB :", error);
  }
}


export async function syncRefreshToken() {
  if (isSyncing) {
    console.log("üîÑ Sync d√©j√† en cours, on attend...");
    return;
  }

  isSyncing = true;

  try {
    const dbToken = await getRefreshTokenFromDB();
    const localToken = localStorage.getItem("refreshToken");
    const cookieToken = document.cookie.split("; ")
      .find(row => row.startsWith("refreshToken="))?.split("=")[1];

    // üö® Aucun refresh token trouv√©, on v√©rifie si le JWT est encore valide
    if (!dbToken && !localToken && !cookieToken) {
      console.warn("‚ö†Ô∏è Aucun refresh token trouv√©, v√©rification du JWT...");

      let jwt = await getValidToken();
      if (jwt && !isJwtExpired(jwt)) {
        console.log("‚úÖ JWT encore valide, pas de r√©initialisation forc√©e.");
        isSyncing = false;
        return;
      }

      console.error("üö® Aucun refresh token et JWT expir√©, reset obligatoire !");
     // Forcer la d√©connexion seulement si le JWT est aussi expir√©
      isSyncing = false;
      return;
    }

    console.log("‚úÖ Refresh token trouv√©, synchronisation termin√©e.");
  } catch (error) {
    console.error("‚ùå Erreur lors de la synchronisation du refresh token :", error);
  } finally {
    isSyncing = false;
  }
}




export async function logoutUser() {
  console.log("üö® D√©connexion en cours...");

  try {
    // ‚úÖ Bloquer tout refresh en cours
    if (typeof refreshInProgress !== "undefined" && refreshInProgress) {
      refreshInProgress = Promise.resolve(null);
    }

    // ‚úÖ Marquer la session comme expir√©e
    localStorage.setItem("session_expired", "true");

    // ‚úÖ Mettre √† jour le statut de connexion
    localStorage.setItem("userLogged", "false");
    localStorage.removeItem("userLogged"); // üî• Supprime compl√®tement la cl√© pour √©viter toute confusion

    // ‚úÖ Affichage du message de d√©connexion stylis√©
    showLogoutMessage();

    // üóëÔ∏è **Suppression cibl√©e des tokens**
    console.log("üóëÔ∏è Suppression des tokens et des donn√©es utilisateur...");
    sessionStorage.removeItem("jwt");
    sessionStorage.removeItem("refreshToken");
    localStorage.removeItem("jwt");
    localStorage.removeItem("refreshToken");
    localStorage.removeItem("refreshTokenExpiration");

    // üóëÔ∏è **Suppression des informations utilisateur stock√©es**
    localStorage.removeItem("prenom");
    localStorage.removeItem("email");
    sessionStorage.removeItem("prenom");
    sessionStorage.removeItem("email");

    // üóëÔ∏è **Suppression propre des cookies**
    deleteAllCookies();

    // üóëÔ∏è **Nettoyage IndexedDB**
    console.log("üóëÔ∏è Nettoyage de IndexedDB...");
    await clearIndexedDBData();
    console.log("‚úÖ IndexedDB nettoy√©e !");

    // üîî Informer l'application que l'utilisateur est d√©connect√©
    window.dispatchEvent(new Event("logout"));

    // ‚úÖ **Redirection apr√®s nettoyage**
    setTimeout(() => {
      console.log("üîÑ Redirection vers la page de connexion...");
      // Suppression de la modale de d√©connexion
      const logoutMessage = document.querySelector(".logout-container");
      if (logoutMessage) {
        logoutMessage.remove();
      }
      router.replace("/login"); // üî• Redirection sans recharger la page
    }, 2500);

    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la d√©connexion :", error);
    return false;
  }
}


// ‚úÖ Affichage stylis√© du message de d√©connexion
function showLogoutMessage() {
  const logoutMessage = document.createElement("div");
  logoutMessage.innerHTML = `
    <div class="logout-container">
      <div class="logout-spinner"></div>
      <p class="logout-text">D√©connexion en cours...</p>
    </div>
  `;

  const style = document.createElement("style");
  style.innerHTML = `
    .logout-container {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      padding: 20px;
      background: rgba(0, 0, 0, 0.8);
      color: white;
      font-size: 18px;
      font-weight: bold;
      border-radius: 8px;
      display: flex;
      align-items: center;
      flex-direction: column;
      z-index: 9999;
      text-align: center;
      animation: fadeIn 0.3s ease-in-out;
    }
    .logout-spinner {
      width: 40px;
      height: 40px;
      border: 4px solid #ffffff;
      border-top: 4px solid transparent;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-bottom: 10px;
    }
    .logout-text {
      margin: 0;
    }
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
  `;

  document.head.appendChild(style);
  document.body.appendChild(logoutMessage);
}

// ‚úÖ Suppression propre des cookies
function deleteAllCookies() {
  console.log("üóëÔ∏è Suppression des cookies...");
  document.cookie.split(";").forEach((cookie) => {
    const cookieName = cookie.split("=")[0].trim();
    document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;
    document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`;
  });
}




// Fonction pour nettoyer les anciennes cl√©s de refresh token et synchroniser les diff√©rents stockages
export async function fixRefreshTokenStorage() {
console.trace("üìå Appel de fixRefreshTokenStorage"); // Affiche la trace d'appel pour d√©bogage
console.warn("üö® Nettoyage des anciennes cl√©s de refresh token ('refreshjwt')...");

// V√©rifie si le refreshToken est bien stock√© dans IndexedDB et localStorage
const db = await getAuthDB();
const tx = db.transaction("authStore", "readwrite");
const store = tx.objectStore("authStore");

// Suppression des anciennes cl√©s inutilis√©es
await store.delete("refreshjwt");
localStorage.removeItem("refreshjwt");

console.log("‚úÖ `refreshjwt` supprim√© de IndexedDB et localStorage !");

// Optionnellement, on peut synchroniser les refresh tokens entre les stockages si n√©cessaire
const storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
if (storedRefreshToken) {
  // S'il existe, on s'assure qu'il est mis √† jour dans IndexedDB
  await updateRefreshTokenInDB(storedRefreshToken);
  console.log("‚úÖ Refresh token synchronis√© dans IndexedDB !");
}
}
// Fonction pour restaurer la session de l'utilisateur (r√©cup√®re les tokens et les restaure dans les stockages)
export async function restoreSession() {
console.log("üîÑ Restauration de session...");

// V√©rifie si les tokens sont pr√©sents dans localStorage ou sessionStorage
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
const refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

if (!jwt || !refreshToken) {
  console.warn("‚ùå Tokens manquants. L'utilisateur doit se reconnecter.");
  return false; // Retourne false si aucun token n'est trouv√©
}

// Si les tokens sont trouv√©s, on les restaure dans IndexedDB
const indexedDBAvailable = await verifyIndexedDBSetup();  // V√©rifie si IndexedDB est pr√™te
if (!indexedDBAvailable) {
  console.warn("‚ùå Impossible d'utiliser IndexedDB pour restaurer les tokens.");
  return false; // Si IndexedDB n'est pas disponible, on retourne false
}

try {
  // Restaure le JWT et le refreshToken dans IndexedDB
  await updateJWTInIndexedDB(jwt);
  await updateRefreshTokenInDB(refreshToken);

  console.log("‚úÖ Session restaur√©e avec succ√®s !");
  return true; // Retourne true si la session est correctement restaur√©e
} catch (error) {
  console.error("‚ùå Erreur lors de la restauration de la session :", error);
  return false; // Retourne false en cas d'erreur
}
}
// Fonction pour planifier le rafra√Æchissement automatique du JWT
export function scheduleJwtRefresh() {
  console.log("üïí Planification du refresh JWT...", new Date().toLocaleTimeString());

const refreshInterval = /Mobi|Android/i.test(navigator.userAgent) ? 2 * 60 * 1000 : 8 * 60 * 1000; // 2 minutes pour les mobiles, 8 minutes pour les autres

// Planifie une v√©rification et un rafra√Æchissement du JWT √† intervalle r√©gulier
setInterval(async () => {
  console.log("üîÑ V√©rification du JWT et du refresh token...");

  const refreshTokenExp = await getRefreshTokenExpirationFromDB();
  if (refreshTokenExp - Date.now() < 2 * 60 * 1000) {  // Si l'expiration du refreshToken approche
    console.warn("üö® Refresh token bient√¥t expir√© ! Tentative de r√©cup√©ration...");
    await restoreTokensToIndexedDB();  // Restaure les tokens dans IndexedDB si n√©cessaire
  }

  // Rafra√Æchit le JWT si n√©cessaire
  const newJwt = await (refreshToken()); // ‚úÖ Ajoute des parenth√®ses pour lever toute ambigu√Øt√©
  if (!newJwt) {
    console.error("‚ùå Refresh √©chou√©, d√©connexion en cours...");
    await logoutUser();  // D√©connecte l'utilisateur en cas d'√©chec du refresh
  } else {
    console.log("‚úÖ JWT rafra√Æchi avec succ√®s !");
  }
}, refreshInterval);  // V√©rifie toutes les 2 ou 8 minutes
}


export async function restoreJwt(): Promise<string | null> {
  console.log("üîÑ Tentative de r√©cup√©ration du JWT...");

  let storedJwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

  if (!storedJwt) {
    storedJwt = document.cookie.split("; ")
      .find(row => row.startsWith("jwt="))?.split("=")[1] || null;
    if (storedJwt) console.log("üç™ JWT restaur√© depuis les cookies !");
  }

  if (!storedJwt) {
    try {
      storedJwt = await getFromIndexedDB("jwt"); // üî• V√©rifie IndexedDB sous "authStore"
      if (storedJwt) {
        console.log("‚úÖ JWT restaur√© depuis IndexedDB !");
      } else {
        console.warn("‚ö†Ô∏è Aucun JWT trouv√© dans IndexedDB.");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration du JWT depuis IndexedDB :", error);
    }
  }

  return storedJwt || null;
}


export async function restoreRefreshToken(): Promise<string | null> {
  console.log("üîÑ R√©cup√©ration du refresh token depuis IndexedDB...");

  let storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  if (!storedRefreshToken) {
    try {
      storedRefreshToken = await getFromIndexedDB("refreshToken"); // üî• V√©rifie IndexedDB
      if (storedRefreshToken) {
        console.log("‚úÖ Refresh token restaur√© depuis IndexedDB !");
      } else {
        console.warn("‚ö†Ô∏è Aucun refresh token trouv√© dans IndexedDB.");
      }
    } catch (error) {
      console.error("‚ùå Erreur lors de la r√©cup√©ration du refresh token depuis IndexedDB :", error);
    }
  }

  return storedRefreshToken || null;
}
