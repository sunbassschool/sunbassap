declare global {
  interface Window {
    latestJWT?: string;
  }
}

import { openDB } from "idb";
import { jwtDecode } from "jwt-decode";

import Cookies from "js-cookie";
import { useAuthStore } from "@/stores/authStore.ts"; // Import du store Pinia
import axios from "axios";
import router from "@/router/index.ts"
let refreshInProgress: Promise<string | null> | null = null;

// Fonction pour v√©rifier si l'utilisateur est connect√©
export function isUserLoggedIn(): boolean {
// V√©rifie la pr√©sence du JWT dans localStorage ou sessionStorage
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

// Si le JWT est trouv√©, l'utilisateur est connect√©
return !!jwt;
}

// Fonction pour v√©rifier si l'utilisateur est un administrateur
export function isUserAdmin(): boolean {
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

if (!jwt) {
  console.warn("‚ùå Aucun JWT trouv√©, l'utilisateur n'est pas authentifi√©.");
  return false; // Si aucun JWT n'est trouv√©, l'utilisateur n'est pas un admin
}

try {
  // D√©codage du JWT pour extraire le payload
  const decoded = JSON.parse(atob(jwt.split(".")[1]));
  
  // V√©rification du r√¥le dans le payload
  return decoded.role === "admin"; // Retourne true si l'utilisateur est admin
} catch (error) {
  console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
  return false; // Si le JWT est invalide ou malform√©, on consid√®re que l'utilisateur n'est pas admin
}
}

let refreshAttempts = 0; // Compteur de tentatives de refresh
const MAX_REFRESH_ATTEMPTS = 3; // Limite anti-boucle
let isSyncing = false; // Verrou global pour √©viter les boucles infinies
// Fonction pour r√©cup√©rer le token depuis localStorage, sessionStorage, IndexedDB ou cookies
export async function getToken(): Promise<string | null> {
  let tokenObj = await getJWTFromIndexedDB();  // üîç IndexedDB en priorit√©
  console.log("üìå [DEBUG] JWT brut depuis IndexedDB :", tokenObj);

  // ‚úÖ Si IndexedDB retourne un objet, on extrait la valeur
  let token = tokenObj || null;  // ‚úÖ √âvite l'acc√®s √† `.value`


  if (!token) {
    token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");  
    console.log("üìå [DEBUG] JWT depuis localStorage/sessionStorage :", token);
  }

  if (!token) {
    const cookieToken = document.cookie.split("; ").find(row => row.startsWith("jwt="))?.split("=")[1];
    if (cookieToken) {
      token = cookieToken;
    }
    console.log("üìå [DEBUG] JWT depuis les cookies :", cookieToken);
  }

  console.log("üîç [getToken] Token final retourn√© :", token || "Aucun JWT trouv√©");

  return token || null;
}




export function getUserInfoFromJWT(): { email: string; prenom: string; role: string; abonnement: string } {
    let jwt = sessionStorage.getItem("jwt") || 
              localStorage.getItem("jwt") || 
              document.cookie.split('; ').find(row => row.startsWith('jwt='))?.split('=')[1];

    if (!jwt) {
        console.warn("‚ö†Ô∏è Aucun JWT trouv√© !");
        return { email: "", prenom: "", role: "", abonnement: "" }; // ‚úÖ Toujours des strings
    }

    try {
        const decoded: any = jwtDecode(jwt);
        return {
            email: decoded.email || "", // ‚úÖ Remplace `null` par `""`
            prenom: decoded.prenom || decoded.name || "",
            role: decoded.role || "",
            abonnement: decoded.abonnement || ""
        };
    } catch (error) {
        console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
        return { email: "", prenom: "", role: "", abonnement: "" }; // ‚úÖ Toujours des valeurs valides
    }
}
export function isTokenExpired(token: string): boolean {
  try {
      const payload = JSON.parse(atob(token.split('.')[1]));
      return payload.exp * 1000 < Date.now();
  } catch (e) {
      return true; // ‚ö†Ô∏è Si erreur, on consid√®re le token expir√©
  }
}

export async function getValidToken(): Promise<string | null> {
    const jwt = await getToken();

    const authStore = useAuthStore(); // üî• R√©cup√©ration du store Pinia

    if (jwt && !isTokenExpired(jwt)) {
        console.log("‚úÖ JWT valide trouv√© !");
        authStore.setUserToken(jwt); // üî• Met √† jour Pinia avec le token
        authStore.user = getUserInfoFromJWT(); // üî• Met √† jour les infos utilisateur
        return jwt;
    }

    console.warn("üö® JWT expir√© ou absent, tentative de refresh...");
    const newJwt = await refreshToken();
    
    if (newJwt) {
        authStore.setUserToken(newJwt);
        authStore.user = getUserInfoFromJWT();
    }

    return newJwt;
}
export function setToken(token: string) {
  if (!token) return;

  // üåç Sauvegarde dans LocalStorage
  localStorage.setItem("jwt", token);

  // üîê Sauvegarde dans les cookies (HTTP-only si c√¥t√© serveur)
  Cookies.set("jwt", token, { secure: true, sameSite: "Strict", expires: 7 });

  // üñ•Ô∏è Sauvegarde dans SessionStorage
  sessionStorage.setItem("jwt", token);

  console.log("‚úÖ Token sauvegard√© partout !");
}
// Fonction pour r√©cup√©rer le JWT depuis IndexedDB
export async function getJWTFromIndexedDB(): Promise<string | null> {
  try {
    const isReady = await verifyIndexedDBSetup();
    if (!isReady) {
      console.warn("‚ö†Ô∏è IndexedDB n'est pas disponible, fallback aux cookies.");
      return Cookies.get("jwt") || null;
    }

    const db = await openDB("AuthDB", 1);
    const jwt = await db.get("authStore", "jwt");

    return jwt || Cookies.get("jwt") || null; // Fallback aux cookies
  } catch (error) {
    console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB pour r√©cup√©rer le JWT :", error);
    return Cookies.get("jwt") || null; // Fallback aux cookies
  }
}
export async function storeUserInfo(userData: { prenom: string; email: string }) {
  if (!userData?.prenom || !userData?.email) {
    console.warn("‚ö†Ô∏è Informations utilisateur incompl√®tes, stockage annul√©.");
    return;
  }

  console.log("üíæ Stockage des infos utilisateur...");

  // Stockage dans localStorage et sessionStorage pour un acc√®s rapide
  localStorage.setItem("prenom", userData.prenom);
  sessionStorage.setItem("prenom", userData.prenom);
  localStorage.setItem("email", userData.email);
  sessionStorage.setItem("email", userData.email);

  // Stockage dans IndexedDB
  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.put({ key: "prenom", value: userData.prenom });
    await store.put({ key: "email", value: userData.email });

    console.log("‚úÖ Infos utilisateur enregistr√©es dans IndexedDB.");
  } catch (error) {
    console.error("‚ùå Erreur lors de l'enregistrement des infos utilisateur :", error);
  }
}
export async function restoreUserInfo() {
  console.log("üîÑ Restauration des infos utilisateur...");

  // V√©rifier si les donn√©es existent d√©j√†
  const prenomExists = localStorage.getItem("prenom") || sessionStorage.getItem("prenom");
  const emailExists = localStorage.getItem("email") || sessionStorage.getItem("email");

  if (prenomExists && emailExists) {
    console.log("‚úÖ Infos utilisateur d√©j√† pr√©sentes, aucune restauration n√©cessaire.");
    return;
  }

  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");

    const prenomData = await store.get("prenom");
    const emailData = await store.get("email");

    if (prenomData?.value) {
      localStorage.setItem("prenom", prenomData.value);
      sessionStorage.setItem("prenom", prenomData.value);
    }

    if (emailData?.value) {
      localStorage.setItem("email", emailData.value);
      sessionStorage.setItem("email", emailData.value);
    }

    console.log("‚úÖ Infos utilisateur restaur√©es !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la restauration des infos utilisateur :", error);
  }
}

// V√©rifie et rafra√Æchit le JWT au r√©veil de l'application (quand l'application revient en premier plan)
export async function checkAndRefreshOnWakeUp() {
  console.log("‚è∞ V√©rification du refresh au r√©veil...");

  const now = Date.now();
  const lastRefresh = Number(localStorage.getItem("lastRefreshTime")) || 0;

  if (now - lastRefresh < 5 * 60 * 1000) {
    console.log("üõë Refresh d√©j√† fait r√©cemment, on attend.");
    return;
  }

  console.log("üîç V√©rification de IndexedDB avant de restaurer les tokens...");
  const isDBReady = await verifyIndexedDBSetup();
  if (!isDBReady) {
    console.warn("‚ö†Ô∏è IndexedDB non disponible, pas de restauration possible.");
    return;
  }

  console.log("üõ†Ô∏è Restauration des tokens depuis IndexedDB...");
  await restoreTokensToIndexedDB();

  const storedRefreshToken = await getRefreshTokenFromDB();
if (!storedRefreshToken) {
    console.warn("‚ùå Aucun refresh token valide trouv√©.");
    return;
}

const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
if (jwt && !isJwtExpired(jwt)) {  // ‚úÖ V√©rification si le JWT est toujours valide
    console.log("‚úÖ JWT encore valide, pas besoin de refresh.");
    return;
}

console.log("üîÑ JWT expir√©, on tente un refresh...");
const newJwt = await refreshToken();

  if (newJwt) {
    localStorage.setItem("lastRefreshTime", now.toString());
    console.log("‚úÖ JWT rafra√Æchi avec succ√®s !");
  } else {
    console.warn("‚ùå √âchec du refresh token.");
  }
}


export function shouldRefreshJwt(jwt: any): boolean {
  if (jwt && typeof jwt === "object" && "value" in jwt) {
    jwt = jwt.value; // üî• Extraire la vraie valeur si c'est un objet
  }

  if (typeof jwt !== "string" || !jwt.includes(".")) {
    console.error("üö® JWT invalide ou manquant :", jwt);
    return false;
  }

  try {
    const tokenData = JSON.parse(atob(jwt.split(".")[1])); // D√©coder le JWT
    const exp = tokenData.exp * 1000; // Convertir en millisecondes
    const now = Date.now();

    return exp - now < 5 * 60 * 1000; // üî• Rafra√Æchir si < 5 min avant expiration
  } catch (error) {
    console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
    return false;
  }
}



// Fonction pour obtenir le r√¥le de l'utilisateur √† partir du JWT
export function getUserRole(): string | null {
const token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

if (!token) {
  console.warn("‚ùå Aucun JWT trouv√©, l'utilisateur n'est pas authentifi√©.");
  return null; // Si aucun JWT n'est trouv√©, l'utilisateur n'est pas authentifi√©
}

try {
  // D√©codage du JWT pour extraire le payload
  const decoded = JSON.parse(atob(token.split(".")[1]));
  
  // Retourne le r√¥le de l'utilisateur, ou null s'il n'existe pas
  return decoded.role || null; 
} catch (error) {
  console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
  return null; // Si le JWT est malform√©, retourne null
}
}


// Fonction pour restaurer les tokens dans IndexedDB


export async function restoreTokensToIndexedDB() {
  console.log("üîÑ V√©rification et restauration des tokens...");

  const indexedDBAvailable = await verifyIndexedDBSetup();
  if (!indexedDBAvailable) {
    console.warn("‚ùå Impossible d'utiliser IndexedDB.");
    return;
  }

  // üîç V√©rification des tokens dans localStorage, sessionStorage et cookies
  let storedJwt = sessionStorage.getItem("jwt") || localStorage.getItem("jwt");
  let storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

  // ‚úÖ V√©rification des cookies en fallback
  if (!storedJwt) {
    storedJwt = document.cookie.split("; ").find(row => row.startsWith("jwt="))?.split("=")[1] || null;
    if (storedJwt) console.log("üç™ JWT restaur√© depuis les cookies !");
  }

  if (!storedRefreshToken) {
    storedRefreshToken = document.cookie.split("; ").find(row => row.startsWith("refreshToken="))?.split("=")[1] || null;
    if (storedRefreshToken) console.log("üç™ Refresh Token restaur√© depuis les cookies !");
  }

  // ‚ùå Si aucun token n'est disponible, on arr√™te
  if (!storedJwt || !storedRefreshToken) {
    console.warn("‚ö†Ô∏è Impossible de restaurer IndexedDB : tokens manquants.");
    return;
  }

  console.log("üì• Restauration des tokens dans IndexedDB et autres stockages...");

  // ‚úÖ Stockage dans IndexedDB
  await updateJWTInIndexedDB(storedJwt);
  await updateRefreshTokenInDB(storedRefreshToken);

  // ‚úÖ Stockage dans localStorage et sessionStorage
  localStorage.setItem("jwt", storedJwt);
  sessionStorage.setItem("jwt", storedJwt);
  localStorage.setItem("refreshToken", storedRefreshToken);
  sessionStorage.setItem("refreshToken", storedRefreshToken);

  // ‚úÖ Mise √† jour du store Pinia
  const authStore = useAuthStore();
  authStore.setUserToken(storedJwt); // Met √† jour l'√©tat global du token
  authStore.setRefreshToken(storedRefreshToken);
  await authStore.fetchUserData(); // üî• Recharge les infos utilisateur si besoin

  console.log("‚úÖ IndexedDB, localStorage, sessionStorage et Pinia mis √† jour !");
}


// Fonction pour d√©finir les cookies pour le JWT et le refreshToken
export function setTokenCookies(jwt: string | undefined, refreshToken: string | undefined) {
  if (refreshToken) {
    const maxAge = 30 * 24 * 60 * 60; // 30 jours

    // üî• iOS PWA bloque "SameSite=Strict", on le met √† "None"
    if (jwt) {
      document.cookie = `jwt=${jwt}; Max-Age=${maxAge}; Secure; SameSite=None; path=/`;
      console.log("‚úÖ Cookie JWT d√©fini avec expiration longue !");
    }

    document.cookie = `refreshToken=${refreshToken}; Max-Age=${maxAge}; Secure; SameSite=None; path=/`;

    console.log("‚úÖ Cookie Refresh Token d√©fini avec expiration longue !");
  } else {
    console.warn("‚ùå Le refreshToken est undefined ou null, cookie non cr√©√©.");
  }
}





// Fonction pour v√©rifier si le JWT a expir√©
export function isJwtExpired(token: string | null): boolean {
  if (!token) {
    console.warn("‚ö†Ô∏è [isJwtExpired] Aucun token fourni.");
    return true;
  }

  // ‚úÖ V√©rification du format du token avec une regex robuste
  const jwtPattern = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/;
  if (!jwtPattern.test(token)) {
    console.warn("‚ö†Ô∏è [isJwtExpired] Token malform√© ou non-JWT d√©tect√© :", token);
    return true;
  }

  try {
    console.log("üîç [isJwtExpired] D√©codage du token...");

    const payloadBase64 = token.split(".")[1];

    // ‚úÖ S√©curiser le d√©codage Base64 pour √©viter une erreur
    const decodedPayload = JSON.parse(decodeBase64(payloadBase64));

    if (!decodedPayload.exp || typeof decodedPayload.exp !== "number") {
      console.warn("‚ö†Ô∏è [isJwtExpired] Le token ne contient pas d'expiration valide.");
      return true;
    }

    return decodedPayload.exp * 1000 < Date.now();
  } catch (error) {
    console.error("‚ùå [isJwtExpired] Erreur lors du d√©codage du JWT :", error);
    return true;
  }
}

// ‚úÖ Fonction de d√©codage Base64 robuste
function decodeBase64(str: string): string {
  try {
    return atob(str);
  } catch (error) {
    console.error("‚ùå Erreur lors du d√©codage Base64 :", error);
    return "";
  }
}



// V√©rifie et restaure les tokens depuis les diff√©rents stockages
export async function checkAndRestoreTokens(): Promise<boolean> {
  console.log("üîÑ V√©rification des tokens...");

  if (localStorage.getItem("session_expired") === "true") {
    console.warn("üö® La session a expir√©, arr√™t de la r√©cup√©ration des tokens.");
    return false;
  }

  // ‚úÖ Unification de la r√©cup√©ration du refreshToken
  let storedRefreshToken = 
    localStorage.getItem("refreshToken") || 
    sessionStorage.getItem("refreshToken") || 
    await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.warn("‚ùå Aucun refreshToken trouv√©, l'utilisateur risque d'√™tre d√©connect√©.");
    return false;
  }

  // ‚úÖ Stocker le refreshToken dans les cookies si absent
  if (!document.cookie.includes("refreshToken=")) {
    document.cookie = `refreshToken=${storedRefreshToken}; Secure; SameSite=Strict; path=/`;
    console.log("üç™ Refresh token restaur√© dans les cookies.");
  }

  // ‚úÖ Stocker le refreshToken dans les stockages s'il manque
  if (!localStorage.getItem("refreshToken")) {
    localStorage.setItem("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans LocalStorage.");
  }
  
  if (!sessionStorage.getItem("refreshToken")) {
    sessionStorage.setItem("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans SessionStorage.");
  }

  // ‚úÖ V√©rification du JWT
  let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
  if (!jwt || isJwtExpired(jwt)) {
    console.warn("üö® JWT manquant ou expir√©, tentative de rafra√Æchissement...");

    const newJwt = await refreshToken();
    if (!newJwt) {
      console.error("‚ùå Impossible de restaurer le JWT, l'utilisateur devra se reconnecter.");
      return false;
    }

    console.log("‚úÖ Nouveau JWT restaur√© avec succ√®s.");
    return true;
  }

  console.log("‚úÖ JWT valide, aucun rafra√Æchissement n√©cessaire.");
  return true;
}



// Fonction centralis√©e pour interagir avec les diff√©rents stockages (localStorage, sessionStorage, cookies, IndexedDB)
const storageManager = {
  async getTokenFromAllStorages(key: string): Promise<string | null> {
    const storedToken = sessionStorage.getItem(key) || localStorage.getItem(key);
    if (storedToken) return storedToken;

    const dbToken = await getJWTFromIndexedDB();  // √Ä d√©finir plus tard
    if (dbToken) return dbToken;

    const cookieToken = document.cookie.split("; ").find(row => row.startsWith(`${key}=`))?.split("=")[1];
    return cookieToken || null;
  },

  setTokenInAllStorages(key: string, token: string) {
    sessionStorage.setItem(key, token);
    localStorage.setItem(key, token);
    document.cookie = `${key}=${token}; Secure; SameSite=Strict; path=/`;
    console.log(`üì¶ Token "${key}" mis √† jour dans tous les stockages`);
  },

  removeTokenFromAllStorages(key: string) {
    sessionStorage.removeItem(key);
    localStorage.removeItem(key);
    document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;
    console.log(`üóëÔ∏è Token "${key}" supprim√© de tous les stockages`);
  }
};

export async function getRefreshTokenFromDB(): Promise<string | null> {
  console.log("üîÑ R√©cup√©ration du refresh token depuis IndexedDB...");

  // üîπ V√©rification de la disponibilit√© d'IndexedDB
  if (!("indexedDB" in window)) {
    console.warn("‚ö†Ô∏è IndexedDB non disponible sur ce navigateur.");
    return null;
  }

  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");
    const result = await store.get("refreshToken");

    await tx.done; // üî• Assure une fermeture propre de la transaction

    if (result?.value) {
      console.log("‚úÖ Refresh token trouv√© dans IndexedDB !");
      return result.value;
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
  }

  console.warn("‚ö†Ô∏è Aucun refresh token trouv√© !");
  return null;
}



// V√©rifie si IndexedDB est disponible et configur√©e
export async function verifyIndexedDBSetup(): Promise<boolean> {
if (!window.indexedDB) {
  console.error("‚ùå IndexedDB n'est pas support√© par ce navigateur !");
  return false; // Si IndexedDB n'est pas support√©, retourne false
}

try {
  // Essayer d'ouvrir ou de cr√©er la base de donn√©es IndexedDB
  const db = await openDB("AuthDB", 1, {
    upgrade(db) {
      // Si l'object store "authStore" n'existe pas, on le cr√©e
      if (!db.objectStoreNames.contains("authStore")) {
        db.createObjectStore("authStore", { keyPath: "key" });
        console.log("‚úÖ Object store 'authStore' cr√©√© dans IndexedDB !");
      }
    }
  });

  console.log("üîç IndexedDB v√©rifi√©e et pr√™te !");
  return true; // Si tout est ok, retourne true
} catch (error) {
  console.error("‚ùå Erreur lors de la v√©rification de IndexedDB :", error);
  return false; // En cas d'erreur, retourne false
}
}

// Fonction pour prot√©ger IndexedDB contre un nettoyage automatique
let indexedDBCleanupRunning = false; // üî• V√©rifie si la fonction tourne d√©j√†

export async function preventIndexedDBCleanup() {
  if (indexedDBCleanupRunning) return; // üöÄ √âvite plusieurs instances simultan√©es
  indexedDBCleanupRunning = true;

  console.log("üõ°Ô∏è Protection contre la suppression d'IndexedDB...");

  try {
    // Ouverture de la base de donn√©es IndexedDB
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    // Inscription d'une cl√© sp√©ciale pour maintenir IndexedDB en vie
    await store.put({ key: "keepAlive", value: Date.now() });

    console.log("‚úÖ IndexedDB maintenu en vie.");
  } catch (error) {
    console.warn("‚ö†Ô∏è Impossible de prot√©ger IndexedDB :", error);
  }

  // üîÑ Relance la fonction toutes les 24h
  setTimeout(() => {
    indexedDBCleanupRunning = false;
    preventIndexedDBCleanup();
  }, 24 * 60 * 60 * 1000);
}

let isRefreshing = false; // üî• Protection contre plusieurs refresh simultan√©s


export async function refreshToken(): Promise<string | null> {
  if (isRefreshing) {
    console.log("‚è≥ Un rafra√Æchissement est d√©j√† en cours.");
    return null;
  }

  if (refreshAttempts >= MAX_REFRESH_ATTEMPTS) {
    console.warn("‚õî Trop de tentatives de refresh, on arr√™te.");
    await handleRefreshFailure();
    return null;
  }

  isRefreshing = true; // üî• Active le verrou
  refreshAttempts++; // üöÄ Compte une tentative
  console.log("üîÑ Tentative de rafra√Æchissement du JWT...");

  let storedRefreshToken =
    localStorage.getItem("refreshToken") ||
    sessionStorage.getItem("refreshToken") ||
    await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.warn("‚ö†Ô∏è Aucun refresh token disponible.");
    await handleRefreshFailure();
    isRefreshing = false; // üîì Lib√®re le verrou
    return null;
  }

  console.log("üîë Refresh token envoy√© √† l'API :", storedRefreshToken);

  try {
    const url = `https://cors-proxy-37yu.onrender.com/https://script.google.com/macros/s/AKfycbxc69Alhr0V0-DqrHblDJonvPKFy8PbjhEA6nA4sC4aFCTJOCKO9t0Q-uaApC_vcXgyHA/exec?route=refresh&refreshtoken=${encodeURIComponent(storedRefreshToken)}`;
    const response = await fetch(url, { method: "GET" });

    if (!response.ok) {
      console.error(`üö® Erreur HTTP ${response.status}`);
      throw new Error(`HTTP ${response.status}`);
    }

    const data = await response.json();

    if (
      data.status === "success" &&
      typeof data.data?.jwt === "string" &&
      data.data.jwt.length > 50 &&
      typeof data.data?.refreshToken === "string" &&
      data.data.refreshToken.length > 10
    ) {
      console.log("‚úÖ Refresh r√©ussi !");
      await updateTokens(data.data.jwt, data.data.refreshToken);
      isRefreshing = false; // üîì Lib√®re le verrou
      refreshAttempts = 0; // üîÑ R√©initialise les tentatives
      return data.data.jwt;
    } else {
      throw new Error("R√©ponse API invalide ou token incorrect.");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du refresh :", error);
    await handleRefreshFailure();
    isRefreshing = false; // üîì Lib√®re le verrou
    return null;
  }
}

// Fonction pour mettre √† jour les tokens dans tous les stockages
export async function updateTokens(newJwt: string | null, newRefreshToken: string | null) {
  if (!newJwt || !newRefreshToken) {
    console.warn("‚ùå Token manquant, mise √† jour impossible.");
    return;
  }

  console.log("üîÑ Mise √† jour des tokens...");

  try {
    // ‚úÖ Mise √† jour dans localStorage et sessionStorage
    localStorage.setItem("jwt", newJwt);
    sessionStorage.setItem("jwt", newJwt);
    localStorage.setItem("refreshToken", newRefreshToken);
    sessionStorage.setItem("refreshToken", newRefreshToken);

    console.log("üì¶ Tokens mis √† jour en localStorage et sessionStorage.");

    // ‚úÖ Stocker l'expiration du refreshToken
    const newExpirationTime = Date.now() + 7 * 24 * 60 * 60 * 1000; // 7 jours
    localStorage.setItem("refreshTokenExpiration", newExpirationTime.toString());

    // ‚úÖ Mise √† jour dans IndexedDB
    await updateJWTInIndexedDB(newJwt);
    await updateRefreshTokenInDB(newRefreshToken);

    console.log("‚úÖ Tokens mis √† jour partout !");
  } catch (error) {
    console.error("‚ùå Erreur lors de la mise √† jour des tokens :", error);
  }
}

// ‚úÖ Mise √† jour du JWT dans IndexedDB
export async function updateJWTInIndexedDB(newJwt: string | null) {
  if (!newJwt) return;

  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");
    await store.put({ key: "jwt", value: newJwt });

    console.log("‚úÖ JWT mis √† jour dans IndexedDB :", newJwt);
  } catch (err) {
    console.warn("‚ö†Ô∏è Erreur lors de l'enregistrement du JWT dans IndexedDB :", err);
  }
}

// ‚úÖ Mise √† jour du refreshToken dans IndexedDB
export async function updateRefreshTokenInDB(newRefreshToken: string | null) {
  if (!newRefreshToken) return;

  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");
    await store.put({ key: "refreshToken", value: newRefreshToken });

    console.log("‚úÖ Refresh token mis √† jour dans IndexedDB :", newRefreshToken);
  } catch (err) {
    console.warn("‚ö†Ô∏è Erreur lors de l'enregistrement du refreshToken dans IndexedDB :", err);
  }
}


// Mise √† jour du refresh token dans IndexedDB
export async function updateRefreshTokenInDB(newRefreshToken: string | null) {
  if (!newRefreshToken) return;

  console.log("üîç Sauvegarde du refresh token...");

  await verifyIndexedDBSetup();

  const newExpirationTime = Date.now() + 7 * 24 * 60 * 60 * 1000;

  const db = await openDB("AuthDB", 1);
  const tx = db.transaction("authStore", "readwrite");
  const store = tx.objectStore("authStore");

  await store.put({ key: "refreshToken", value: newRefreshToken });
  await store.put({ key: "refreshTokenExpiration", value: newExpirationTime });

  // üî• Ajout pour meilleure persistance
  localStorage.setItem("refreshToken", newRefreshToken);
  document.cookie = `refreshToken=${newRefreshToken}; Max-Age=2592000; Secure; SameSite=None; path=/`;

  console.log("‚úÖ Refresh token sauvegard√© partout !");
}


// Fonction pour g√©rer l‚Äô√©chec de rafra√Æchissement du token
export async function handleRefreshFailure() {
  console.error("üö® Refresh token invalide ou expir√©. D√©connexion forc√©e...");

  alert("‚ö†Ô∏è Votre session a expir√©, veuillez vous reconnecter.");

  // ‚úÖ Utiliser logoutUser() au lieu de clearUserData()
  await logoutUser();

  return Promise.reject("D√©connexion forc√©e, veuillez vous reconnecter.");
}

// Nettoyage complet des donn√©es utilisateur
export async function clearUserData() {
  console.log("üßπ Nettoyage complet des donn√©es utilisateur...");

  // Supprimer toutes les donn√©es utilisateur dans localStorage
  Object.keys(localStorage).forEach(key => {
    if (
      key.startsWith("jwt") || 
      key.startsWith("refreshToken") || 
      key.startsWith("prenom") || 
      key.startsWith("userData_")
    ) {
      localStorage.removeItem(key);
      console.log(`üóëÔ∏è Cl√© supprim√©e : ${key}`);
    }
  });

  // Supprime toutes les donn√©es de sessionStorage
  try {
    sessionStorage.clear();
    console.log("üóëÔ∏è sessionStorage vid√© !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de sessionStorage :", error);
  }

  // Suppression cibl√©e dans IndexedDB
  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.delete("jwt");
    await store.delete("refreshToken");

    console.log("‚úÖ JWT et refreshToken supprim√©s de IndexedDB !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de IndexedDB :", error);
  }
}
// V√©rifie et rafra√Æchit le JWT si n√©cessaire
export async function checkAndRefreshJWT() {
await syncRefreshToken(); // Synchronisation avant de v√©rifier le JWT

// V√©rifie si le refresh token est disponible dans tous les stockages
let storedRefreshToken = await getRefreshTokenFromDB();
if (storedRefreshToken) {
  console.log("üîÑ V√©rification et restauration des autres stockages...");

  // Restaurer dans localStorage, sessionStorage, cookies si n√©cessaire
  if (!localStorage.getItem("refreshToken")) {
    storageManager.setTokenInAllStorages("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans LocalStorage.");
  }

  if (!sessionStorage.getItem("refreshToken")) {
    storageManager.setTokenInAllStorages("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans SessionStorage.");
  }

  const cookies = document.cookie.split("; ").find(row => row.startsWith("refreshToken="));
  if (!cookies) {
    document.cookie = `refreshToken=${storedRefreshToken}; Secure; SameSite=Strict; path=/`;
    console.log("üç™ Refresh token restaur√© dans les cookies.");
  }
}

const token = await getToken();
console.log("üîç Token r√©cup√©r√© :", token);

if (!token || isJwtExpired(token)) {
  console.warn("üö® Pas de JWT valide, tentative de rafra√Æchissement...");

  // Cherche le refreshToken dans cookies, IndexedDB et LocalStorage
  let storedRefreshToken = await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.error("‚ùå Aucun refresh token disponible, d√©connexion...");
    await logoutUser();
    return;
  }

  await refreshToken(); // Rafra√Æchit le JWT
  return;
}

try {
  const decoded = JSON.parse(atob(token.split(".")[1])); // V√©rifie si le JWT est bien d√©codable
  console.log(`‚è≥ JWT expire √† : ${new Date(decoded.exp * 1000).toLocaleString()}`);
} catch (e) {
  console.error("‚ùå JWT corrompu, for√ßage de d√©connexion.");
  await logoutUser();
}
}
export async function getRefreshTokenExpirationFromDB(): Promise<number> {
try {
  const db = await openDB("AuthDB", 1);
  const tx = db.transaction("authStore", "readonly");
  const store = tx.objectStore("authStore");
  const expirationEntry = await store.get("refreshTokenExpiration");
  return expirationEntry?.value || 0;
} catch (err) {
  console.warn("‚ö†Ô∏è Erreur lors de la r√©cup√©ration de l'expiration du refresh token depuis IndexedDB :", err);
  return 0;
}
}

export async function clearIndexedDBData() {
try {
  const db = await openDB("AuthDB", 1);
  const tx = db.transaction("authStore", "readwrite");
  const store = tx.objectStore("authStore");

  await store.clear();  // Efface toutes les donn√©es dans le store

  console.log("‚úÖ IndexedDB nettoy√©e !");
} catch (error) {
  console.error("‚ùå Erreur lors du nettoyage de IndexedDB :", error);
}
}

export async function syncRefreshToken() {
if (isSyncing) {
  console.log("üîÑ Sync d√©j√† en cours, on attend...");
  return;
}

isSyncing = true;

try {
  const dbToken = await getRefreshTokenFromDB();
  const localToken = localStorage.getItem("refreshToken");
  const cookieToken = document.cookie.split("; ").find(row => row.startsWith("refreshToken="))?.split("=")[1];

  if (!dbToken && !localToken && !cookieToken) {
    console.error("üö® AUCUN refresh token trouv√© ! Reset obligatoire !");
    return;
  }

  // Correction d‚Äôincoh√©rence
  if (dbToken && localToken && cookieToken && (dbToken !== localToken || dbToken !== cookieToken)) {
    console.warn("‚ö†Ô∏è Incoh√©rence d√©tect√©e entre Cookies, IndexedDB et LocalStorage. Correction...");
  
    const validToken =
      (dbToken && localToken)
        ? (dbToken.length > localToken.length ? dbToken : localToken)
        : dbToken || localToken || "";
  
    if (validToken) {
      storageManager.setTokenInAllStorages("refreshToken", validToken);
      await updateRefreshTokenInDB(validToken);
    } else {
      console.warn("‚ö†Ô∏è Aucun token valide trouv√©, stockage annul√©.");
    }
  }
} catch (error) {
  console.error("‚ùå Erreur de synchronisation :", error);
}

isSyncing = false;
}
export async function logoutUser() {
  console.log("üö® D√©connexion en cours...");

  try {
    // üõë Bloque imm√©diatement tout refresh en cours
    if (typeof refreshInProgress !== "undefined") {
      refreshInProgress = Promise.resolve(null);
    }

    // ‚úÖ Marquer la session comme expir√©e pour emp√™cher la r√©cup√©ration automatique
    localStorage.setItem("session_expired", "true");

    // ‚úÖ Affichage du message stylis√©
    const logoutMessage = document.createElement("div");
    logoutMessage.innerHTML = `
      <div class="logout-container">
        <div class="logout-spinner"></div>
        <p class="logout-text">D√©connexion en cours...</p>
      </div>
    `;
    
    // Styles CSS pour le message
    const style = document.createElement("style");
    style.innerHTML = `
      .logout-container {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        padding: 20px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        font-size: 18px;
        font-weight: bold;
        border-radius: 8px;
        display: flex;
        align-items: center;
        flex-direction: column;
        z-index: 9999;
        text-align: center;
        animation: fadeIn 0.3s ease-in-out;
      }

      .logout-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #ffffff;
        border-top: 4px solid transparent;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 10px;
      }

      .logout-text {
        margin: 0;
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }

      @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
      }
    `;

    document.head.appendChild(style);
    document.body.appendChild(logoutMessage);

    // üóëÔ∏è Suppression imm√©diate des tokens
    console.log("üóëÔ∏è Suppression des tokens...");
    sessionStorage.clear();
    localStorage.clear();

    console.log("üóëÔ∏è Suppression des cookies...");
    document.cookie.split(";").forEach((cookie) => {
      const [cookieName] = cookie.split("=");
      document.cookie = `${cookieName}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}; Secure; SameSite=None`;
    });

    console.log("üóëÔ∏è Nettoyage de IndexedDB...");
    await clearIndexedDBData();
    console.log("‚úÖ IndexedDB nettoy√©e !");

    // üîî D√©clencher un √©v√©nement pour informer les autres composants
    window.dispatchEvent(new Event("logout"));

    // ‚úÖ **Redirection apr√®s nettoyage**
    setTimeout(() => {
      console.log("üîÑ Redirection vers la page de connexion...");
      window.location.href = "/intro"; // üî• Force le rechargement de la page

    }, 2500); // üî• 2.5s pour bien voir le message

    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de la d√©connexion :", error);
    return false;
  }
}





// Fonction pour nettoyer les anciennes cl√©s de refresh token et synchroniser les diff√©rents stockages
export async function fixRefreshTokenStorage() {
console.trace("üìå Appel de fixRefreshTokenStorage"); // Affiche la trace d'appel pour d√©bogage
console.warn("üö® Nettoyage des anciennes cl√©s de refresh token ('refreshjwt')...");

// V√©rifie si le refreshToken est bien stock√© dans IndexedDB et localStorage
const db = await openDB("AuthDB", 1);
const tx = db.transaction("authStore", "readwrite");
const store = tx.objectStore("authStore");

// Suppression des anciennes cl√©s inutilis√©es
await store.delete("refreshjwt");
localStorage.removeItem("refreshjwt");

console.log("‚úÖ `refreshjwt` supprim√© de IndexedDB et localStorage !");

// Optionnellement, on peut synchroniser les refresh tokens entre les stockages si n√©cessaire
const storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
if (storedRefreshToken) {
  // S'il existe, on s'assure qu'il est mis √† jour dans IndexedDB
  await updateRefreshTokenInDB(storedRefreshToken);
  console.log("‚úÖ Refresh token synchronis√© dans IndexedDB !");
}
}
// Fonction pour restaurer la session de l'utilisateur (r√©cup√®re les tokens et les restaure dans les stockages)
export async function restoreSession() {
console.log("üîÑ Restauration de session...");

// V√©rifie si les tokens sont pr√©sents dans localStorage ou sessionStorage
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
const refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

if (!jwt || !refreshToken) {
  console.warn("‚ùå Tokens manquants. L'utilisateur doit se reconnecter.");
  return false; // Retourne false si aucun token n'est trouv√©
}

// Si les tokens sont trouv√©s, on les restaure dans IndexedDB
const indexedDBAvailable = await verifyIndexedDBSetup();  // V√©rifie si IndexedDB est pr√™te
if (!indexedDBAvailable) {
  console.warn("‚ùå Impossible d'utiliser IndexedDB pour restaurer les tokens.");
  return false; // Si IndexedDB n'est pas disponible, on retourne false
}

try {
  // Restaure le JWT et le refreshToken dans IndexedDB
  await updateJWTInIndexedDB(jwt);
  await updateRefreshTokenInDB(refreshToken);

  console.log("‚úÖ Session restaur√©e avec succ√®s !");
  return true; // Retourne true si la session est correctement restaur√©e
} catch (error) {
  console.error("‚ùå Erreur lors de la restauration de la session :", error);
  return false; // Retourne false en cas d'erreur
}
}
// Fonction pour planifier le rafra√Æchissement automatique du JWT
export function scheduleJwtRefresh() {
const refreshInterval = /Mobi|Android/i.test(navigator.userAgent) ? 2 * 60 * 1000 : 8 * 60 * 1000; // 2 minutes pour les mobiles, 8 minutes pour les autres

// Planifie une v√©rification et un rafra√Æchissement du JWT √† intervalle r√©gulier
setInterval(async () => {
  console.log("üîÑ V√©rification du JWT et du refresh token...");

  const refreshTokenExp = await getRefreshTokenExpirationFromDB();
  if (refreshTokenExp - Date.now() < 2 * 60 * 1000) {  // Si l'expiration du refreshToken approche
    console.warn("üö® Refresh token bient√¥t expir√© ! Tentative de r√©cup√©ration...");
    await restoreTokensToIndexedDB();  // Restaure les tokens dans IndexedDB si n√©cessaire
  }

  // Rafra√Æchit le JWT si n√©cessaire
  const newJwt = await refreshToken();
  if (!newJwt) {
    console.error("‚ùå Refresh √©chou√©, d√©connexion en cours...");
    await logoutUser();  // D√©connecte l'utilisateur en cas d'√©chec du refresh
  } else {
    console.log("‚úÖ JWT rafra√Æchi avec succ√®s !");
  }
}, refreshInterval);  // V√©rifie toutes les 2 ou 8 minutes
}
