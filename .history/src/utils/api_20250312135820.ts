declare global {
  interface Window {
    latestJWT?: string;
  }
}

import { openDB } from "idb";
import axios from "axios";
import router from "@/router/index.ts"
let refreshInProgress: Promise<string | null> | null = null;

// Fonction pour v√©rifier si l'utilisateur est connect√©
export function isUserLoggedIn(): boolean {
// V√©rifie la pr√©sence du JWT dans localStorage ou sessionStorage
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

// Si le JWT est trouv√©, l'utilisateur est connect√©
return !!jwt;
}

// Fonction pour v√©rifier si l'utilisateur est un administrateur
export function isUserAdmin(): boolean {
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

if (!jwt) {
  console.warn("‚ùå Aucun JWT trouv√©, l'utilisateur n'est pas authentifi√©.");
  return false; // Si aucun JWT n'est trouv√©, l'utilisateur n'est pas un admin
}

try {
  // D√©codage du JWT pour extraire le payload
  const decoded = JSON.parse(atob(jwt.split(".")[1]));
  
  // V√©rification du r√¥le dans le payload
  return decoded.role === "admin"; // Retourne true si l'utilisateur est admin
} catch (error) {
  console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
  return false; // Si le JWT est invalide ou malform√©, on consid√®re que l'utilisateur n'est pas admin
}
}

let refreshAttempts = 0; // Compteur de tentatives de refresh
const MAX_REFRESH_ATTEMPTS = 3; // Limite anti-boucle
let isSyncing = false; // Verrou global pour √©viter les boucles infinies
// Fonction pour r√©cup√©rer le token depuis localStorage, sessionStorage, IndexedDB ou cookies
export async function getToken(): Promise<string | null> {
// Priorit√© : localStorage > sessionStorage > IndexedDB > cookies
let token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

if (!token) {
  token = await getJWTFromIndexedDB();  // Appel √† IndexedDB si le token n'est pas dans les stockages locaux
}

if (!token) {
  const cookieToken = document.cookie.split("; ").find(row => row.startsWith("jwt="))?.split("=")[1];
  if (cookieToken) {
    token = cookieToken;
  }
}

return token || null;  // Retourne null si aucun token trouv√©
}
// Fonction pour r√©cup√©rer le JWT depuis IndexedDB
export async function getJWTFromIndexedDB(): Promise<string | null> {
await verifyIndexedDBSetup();  // V√©rification si IndexedDB est disponible

try {
  const db = await openDB("AuthDB", 1);
  const tx = db.transaction("authStore", "readonly");
  const store = tx.objectStore("authStore");
  const result = await store.get("jwt");

  return result?.value || null;  // Retourne le JWT ou null si non trouv√©
} catch (error) {
  console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB pour r√©cup√©rer le JWT :", error);
  return null;
}
}

// V√©rifie et rafra√Æchit le JWT au r√©veil de l'application (quand l'application revient en premier plan)
export async function checkAndRefreshOnWakeUp() {
  console.log("‚è∞ V√©rification du refresh au r√©veil...");

  const now = Date.now();
  const lastRefresh = Number(localStorage.getItem("lastRefreshTime")) || 0;

  if (now - lastRefresh < 5 * 60 * 1000) {
    console.log("üõë Refresh d√©j√† fait r√©cemment, on attend.");
    return;
  }

  console.log("üõ†Ô∏è Restauration des tokens depuis IndexedDB...");
  await restoreTokensToIndexedDB(); 

  const storedRefreshToken = await getRefreshTokenFromDB();
  if (!storedRefreshToken || isJwtExpired(storedRefreshToken)) {  // üõ†Ô∏è V√©rifie si le token est expir√© !
    console.warn("‚ùå Aucun refresh token valide trouv√©.");
    return;
  }

  console.log("üîÑ Tentative de refresh du JWT...");
  const newJwt = await refreshToken();
  if (newJwt) {
    localStorage.setItem("lastRefreshTime", now.toString());
    console.log("‚úÖ JWT rafra√Æchi avec succ√®s !");
  } else {
    console.warn("‚ùå √âchec du refresh token.");
  }
}


export function shouldRefreshJwt(jwt: string): boolean {
  if (!jwt) return false;
  
  try {
    const tokenData = JSON.parse(atob(jwt.split(".")[1])); // D√©coder le JWT
    const exp = tokenData.exp * 1000; // Convertir en millisecondes
    const now = Date.now();
    
    return exp - now < 5 * 60 * 1000; // üî• Rafra√Æchir si < 5 min avant expiration
  } catch (error) {
    console.error("Erreur lors du d√©codage du JWT :", error);
    return false;
  }
}

// Fonction pour obtenir le r√¥le de l'utilisateur √† partir du JWT
export function getUserRole(): string | null {
const token = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");

if (!token) {
  console.warn("‚ùå Aucun JWT trouv√©, l'utilisateur n'est pas authentifi√©.");
  return null; // Si aucun JWT n'est trouv√©, l'utilisateur n'est pas authentifi√©
}

try {
  // D√©codage du JWT pour extraire le payload
  const decoded = JSON.parse(atob(token.split(".")[1]));
  
  // Retourne le r√¥le de l'utilisateur, ou null s'il n'existe pas
  return decoded.role || null; 
} catch (error) {
  console.error("‚ùå Erreur lors du d√©codage du JWT :", error);
  return null; // Si le JWT est malform√©, retourne null
}
}


// Fonction pour restaurer les tokens dans IndexedDB
export async function restoreTokensToIndexedDB() {
  console.log("üîÑ V√©rification et restauration des tokens dans IndexedDB...");

  const indexedDBAvailable = await verifyIndexedDBSetup();
  if (!indexedDBAvailable) {
    console.warn("‚ùå Impossible d'utiliser IndexedDB.");
    return;
  }

  const storedJwt = sessionStorage.getItem("jwt") || localStorage.getItem("jwt");
  const storedRefreshToken = localStorage.getItem("refreshToken");

  if (!storedJwt || !storedRefreshToken) {
    console.warn("‚ö†Ô∏è Impossible de restaurer IndexedDB : donn√©es manquantes.");
    return;
  }

  console.log("üì• Restauration du JWT et refreshToken dans IndexedDB...");
  await updateJWTInIndexedDB(storedJwt);
  await updateRefreshTokenInDB(storedRefreshToken);

  console.log("‚úÖ IndexedDB restaur√© avec succ√®s !");
}

// Fonction pour d√©finir les cookies pour le JWT et le refreshToken
export function setTokenCookies(jwt: string | undefined, refreshToken: string | undefined) {
  if (refreshToken) {
    const maxAge = 30 * 24 * 60 * 60; // 30 jours

    // üî• iOS PWA bloque "SameSite=Strict", on le met √† "None"
    if (jwt) {
      document.cookie = `jwt=${jwt}; Max-Age=${maxAge}; Secure; SameSite=None; path=/`;
      console.log("‚úÖ Cookie JWT d√©fini avec expiration longue !");
    }

    document.cookie = `refreshToken=${refreshToken}; Max-Age=${maxAge}; Secure; SameSite=None; path=/`;

    console.log("‚úÖ Cookie Refresh Token d√©fini avec expiration longue !");
  } else {
    console.warn("‚ùå Le refreshToken est undefined ou null, cookie non cr√©√©.");
  }
}





// Fonction pour v√©rifier si le JWT a expir√©
export function isJwtExpired(token: string | null): boolean {
  if (!token || !token.includes(".") || token.split(".").length !== 3) {
    console.warn("‚ö†Ô∏è [isJwtExpired] Token malform√© ou non-JWT d√©tect√© :", token);
    return true;
  }

  try {
    console.log("üîç [isJwtExpired] D√©codage du token :", token); // üõ†Ô∏è Ajoute un log pour voir le token exact
    const payloadBase64 = token.split(".")[1];
    const decodedPayload = JSON.parse(atob(payloadBase64));
    return decodedPayload.exp * 1000 < Date.now();
  } catch (error) {
    console.error("‚ùå [isJwtExpired] Erreur lors du d√©codage du JWT :", error);
    return true;
  }
}


// V√©rifie et restaure les tokens depuis les diff√©rents stockages
export async function checkAndRestoreTokens() {
console.log("üîÑ V√©rification des tokens...");

// On r√©cup√®re les tokens depuis les diff√©rents stockages
let jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
let storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
if (storedRefreshToken) {
  document.cookie = `refreshToken=${storedRefreshToken}; Secure; SameSite=None; path=/`;
  console.log("üç™ Refresh token restaur√© dans les cookies.");
}
if (!storedRefreshToken) {
  console.warn("‚ùå Aucun refreshToken trouv√© dans LocalStorage ou SessionStorage.");
  return;
}

// Si le JWT ou le refreshToken sont manquants ou expir√©s
if (!jwt || isJwtExpired(jwt)) {
  console.warn("üö® JWT manquant ou expir√©, tentative de restauration...");

  // Tentative de r√©cup√©rer le refreshToken depuis IndexedDB ou cookies
  storedRefreshToken = await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.warn("‚ùå Aucun refreshToken trouv√©, l'utilisateur risque d'√™tre d√©connect√©.");
    return;
  }

  // Restauration des tokens dans localStorage et sessionStorage
  if (!localStorage.getItem("refreshToken")) {
    localStorage.setItem("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans LocalStorage.");
  }

  if (!sessionStorage.getItem("refreshToken")) {
    sessionStorage.setItem("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans SessionStorage.");
  }

  // Si le refreshToken n'est pas dans les cookies, on l'ajoute
  const cookieToken = document.cookie.split("; ").find(row => row.startsWith("refreshToken="))?.split("=")[1];
  if (!cookieToken) {
    document.cookie = `refreshToken=${storedRefreshToken}; Secure; SameSite=Strict; path=/`;
    console.log("üç™ Refresh token restaur√© dans les cookies.");
  }

  // Une fois le refreshToken restaur√©, on peut tenter de rafra√Æchir le JWT
  const newJwt = await refreshToken();
  if (!newJwt) {
    console.error("‚ùå Impossible de restaurer le JWT, l'utilisateur devra se reconnecter.");
    return;
  }

  console.log("‚úÖ Tokens restaur√©s avec succ√®s.");
} else {
  console.log("‚úÖ JWT valide, aucun rafra√Æchissement n√©cessaire.");
}
}



// Fonction centralis√©e pour interagir avec les diff√©rents stockages (localStorage, sessionStorage, cookies, IndexedDB)
const storageManager = {
  async getTokenFromAllStorages(key: string): Promise<string | null> {
    const storedToken = sessionStorage.getItem(key) || localStorage.getItem(key);
    if (storedToken) return storedToken;

    const dbToken = await getJWTFromIndexedDB();  // √Ä d√©finir plus tard
    if (dbToken) return dbToken;

    const cookieToken = document.cookie.split("; ").find(row => row.startsWith(`${key}=`))?.split("=")[1];
    return cookieToken || null;
  },

  setTokenInAllStorages(key: string, token: string) {
    sessionStorage.setItem(key, token);
    localStorage.setItem(key, token);
    document.cookie = `${key}=${token}; Secure; SameSite=Strict; path=/`;
    console.log(`üì¶ Token "${key}" mis √† jour dans tous les stockages`);
  },

  removeTokenFromAllStorages(key: string) {
    sessionStorage.removeItem(key);
    localStorage.removeItem(key);
    document.cookie = `${key}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;
    console.log(`üóëÔ∏è Token "${key}" supprim√© de tous les stockages`);
  }
};

export async function getRefreshTokenFromDB(): Promise<string | null> {
  console.log("üîÑ R√©cup√©ration du refresh token depuis IndexedDB...");

  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");
    const result = await store.get("refreshToken");

    if (result?.value) {
      console.log("‚úÖ Refresh token trouv√© dans IndexedDB !");
      return result.value;  // üî• On retourne directement depuis IndexedDB
    }
  } catch (error) {
    console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
  }

  console.warn("‚ö†Ô∏è Aucun refresh token trouv√© !");
  return null;
}


// V√©rifie si IndexedDB est disponible et configur√©e
export async function verifyIndexedDBSetup(): Promise<boolean> {
if (!window.indexedDB) {
  console.error("‚ùå IndexedDB n'est pas support√© par ce navigateur !");
  return false; // Si IndexedDB n'est pas support√©, retourne false
}

try {
  // Essayer d'ouvrir ou de cr√©er la base de donn√©es IndexedDB
  const db = await openDB("AuthDB", 1, {
    upgrade(db) {
      // Si l'object store "authStore" n'existe pas, on le cr√©e
      if (!db.objectStoreNames.contains("authStore")) {
        db.createObjectStore("authStore", { keyPath: "key" });
        console.log("‚úÖ Object store 'authStore' cr√©√© dans IndexedDB !");
      }
    }
  });

  console.log("üîç IndexedDB v√©rifi√©e et pr√™te !");
  return true; // Si tout est ok, retourne true
} catch (error) {
  console.error("‚ùå Erreur lors de la v√©rification de IndexedDB :", error);
  return false; // En cas d'erreur, retourne false
}
}

// Fonction pour prot√©ger IndexedDB contre un nettoyage automatique
export async function preventIndexedDBCleanup() {
console.log("üõ°Ô∏è Protection contre la suppression d'IndexedDB...");

// Ouverture de la base de donn√©es IndexedDB
const db = await openDB("AuthDB", 1);
const tx = db.transaction("authStore", "readwrite");
const store = tx.objectStore("authStore");

// Inscription d'une cl√© sp√©ciale pour maintenir IndexedDB en vie
await store.put({ key: "keepAlive", value: Date.now() });

setTimeout(preventIndexedDBCleanup, 24 * 60 * 60 * 1000); // Appel toutes les 24 heures pour pr√©venir le nettoyage
}

// Fonction de rafra√Æchissement du JWT
export async function refreshToken(): Promise<string | null> {
  if (refreshAttempts >= MAX_REFRESH_ATTEMPTS) {
    console.warn("‚õî Trop de tentatives de refresh, on arr√™te.");
    await handleRefreshFailure();
    return null; // Retourne null pour indiquer l'√©chec
  }

  console.log("üîÑ Tentative de rafra√Æchissement du JWT...");

  let storedRefreshToken = await getRefreshTokenFromDB();
  if (!storedRefreshToken) {
    console.warn("‚ö†Ô∏è Aucun refresh token disponible.");
    await handleRefreshFailure();
    return null;
  }

  console.log("üîë Refresh token envoy√© √† l'API :", storedRefreshToken);

  try {
    const url = `https://cors-proxy-37yu.onrender.com/https://script.google.com/macros/s/AKfycbxc69Alhr0V0-DqrHblDJonvPKFy8PbjhEA6nA4sC4aFCTJOCKO9t0Q-uaApC_vcXgyHA/exec?route=refresh&refreshtoken=${encodeURIComponent(storedRefreshToken)}`;
    const response = await fetch(url, { method: "GET" });

    if (!response.ok) {
      console.error(`üö® Erreur HTTP ${response.status}`);
      throw new Error(`HTTP ${response.status}`);
    }

    const data = await response.json();
    if (data.status === "success" && data.data?.jwt && data.data?.refreshToken) {
      console.log("‚úÖ Refresh r√©ussi !");
      await updateTokens(data.data.jwt, data.data.refreshToken);
      return data.data.jwt;
    } else {
      throw new Error("R√©ponse API invalide");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du refresh :", error);
    await handleRefreshFailure();
    return null;
  }
}
// Fonction pour mettre √† jour les tokens dans tous les stockages
export async function updateTokens(newJwt: string | null, newRefreshToken: string | null) {
  if (!newJwt || !newRefreshToken) {
    console.warn("‚ùå Token manquant, mise √† jour impossible.");
    return;
  }

  console.log("üîÑ Mise √† jour des tokens...");

  // Mettre √† jour les tokens dans tous les stockages
  storageManager.setTokenInAllStorages("jwt", newJwt);
  storageManager.setTokenInAllStorages("refreshToken", newRefreshToken);

  const newExpirationTime = Date.now() + 7 * 24 * 60 * 60 * 1000; // 7 jours
  localStorage.setItem("refreshTokenExpiration", newExpirationTime.toString());

  // Enregistrer dans IndexedDB
  await updateJWTInIndexedDB(newJwt);
  await updateRefreshTokenInDB(newRefreshToken);

  console.log("‚úÖ Tokens mis √† jour partout !");
} 
// Mise √† jour du JWT dans IndexedDB
export async function updateJWTInIndexedDB(newJwt: string | null) {
if (!newJwt) return;

try {
  const db = await openDB("AuthDB", 1);
  const tx = db.transaction("authStore", "readwrite");
  const store = tx.objectStore("authStore");
  await store.put({ key: "jwt", value: newJwt });

  console.log("‚úÖ JWT mis √† jour dans IndexedDB :", newJwt);
} catch (err) {
  console.warn("‚ö†Ô∏è Erreur lors de l'enregistrement du JWT dans IndexedDB :", err);
}
}

// Mise √† jour du refresh token dans IndexedDB
export async function updateRefreshTokenInDB(newRefreshToken: string | null) {
  if (!newRefreshToken) return;

  console.log("üîç Sauvegarde du refresh token...");

  await verifyIndexedDBSetup();

  const newExpirationTime = Date.now() + 7 * 24 * 60 * 60 * 1000;

  const db = await openDB("AuthDB", 1);
  const tx = db.transaction("authStore", "readwrite");
  const store = tx.objectStore("authStore");

  await store.put({ key: "refreshToken", value: newRefreshToken });
  await store.put({ key: "refreshTokenExpiration", value: newExpirationTime });

  // üî• Ajout pour meilleure persistance
  localStorage.setItem("refreshToken", newRefreshToken);
  document.cookie = `refreshToken=${newRefreshToken}; Max-Age=2592000; Secure; SameSite=None; path=/`;

  console.log("‚úÖ Refresh token sauvegard√© partout !");
}


// Fonction pour g√©rer l‚Äô√©chec de rafra√Æchissement du token
export async function handleRefreshFailure() {
  console.error("üö® Refresh token invalide ou expir√©. D√©connexion forc√©e...");
  alert("‚ö†Ô∏è Votre session a expir√©, veuillez vous reconnecter.");
  await clearUserData();
  console.warn("üõë Tokens corrompus d√©tect√©s, suppression forc√©e !");

  setTimeout(() => {
    window.location.href = import.meta.env.MODE === "production" ? "/app/login" : "/login";
  }, 500);
  return Promise.reject("D√©connexion forc√©e, veuillez vous reconnecter.");
}

// Nettoyage complet des donn√©es utilisateur
export async function clearUserData() {
  console.log("üßπ Nettoyage complet des donn√©es utilisateur...");

  // Supprimer toutes les donn√©es utilisateur dans localStorage
  Object.keys(localStorage).forEach(key => {
    if (
      key.startsWith("jwt") || 
      key.startsWith("refreshToken") || 
      key.startsWith("prenom") || 
      key.startsWith("userData_")
    ) {
      localStorage.removeItem(key);
      console.log(`üóëÔ∏è Cl√© supprim√©e : ${key}`);
    }
  });

  // Supprime toutes les donn√©es de sessionStorage
  try {
    sessionStorage.clear();
    console.log("üóëÔ∏è sessionStorage vid√© !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de sessionStorage :", error);
  }

  // Suppression cibl√©e dans IndexedDB
  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readwrite");
    const store = tx.objectStore("authStore");

    await store.delete("jwt");
    await store.delete("refreshToken");

    console.log("‚úÖ JWT et refreshToken supprim√©s de IndexedDB !");
  } catch (error) {
    console.error("‚ùå Erreur lors du nettoyage de IndexedDB :", error);
  }
}
// V√©rifie et rafra√Æchit le JWT si n√©cessaire
export async function checkAndRefreshJWT() {
await syncRefreshToken(); // Synchronisation avant de v√©rifier le JWT

// V√©rifie si le refresh token est disponible dans tous les stockages
let storedRefreshToken = await getRefreshTokenFromDB();
if (storedRefreshToken) {
  console.log("üîÑ V√©rification et restauration des autres stockages...");

  // Restaurer dans localStorage, sessionStorage, cookies si n√©cessaire
  if (!localStorage.getItem("refreshToken")) {
    storageManager.setTokenInAllStorages("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans LocalStorage.");
  }

  if (!sessionStorage.getItem("refreshToken")) {
    storageManager.setTokenInAllStorages("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans SessionStorage.");
  }

  const cookies = document.cookie.split("; ").find(row => row.startsWith("refreshToken="));
  if (!cookies) {
    document.cookie = `refreshToken=${storedRefreshToken}; Secure; SameSite=Strict; path=/`;
    console.log("üç™ Refresh token restaur√© dans les cookies.");
  }
}

const token = await getToken();
if (!token || isJwtExpired(token)) {
  console.warn("üö® Pas de JWT valide, tentative de rafra√Æchissement...");

  // Cherche le refreshToken dans cookies, IndexedDB et LocalStorage
  let storedRefreshToken = await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.error("‚ùå Aucun refresh token disponible, d√©connexion...");
    await logoutUser();
    return;
  }

  await refreshToken(); // Rafra√Æchit le JWT
  return;
}

try {
  const decoded = JSON.parse(atob(token.split(".")[1])); // V√©rifie si le JWT est bien d√©codable
  console.log(`‚è≥ JWT expire √† : ${new Date(decoded.exp * 1000).toLocaleString()}`);
} catch (e) {
  console.error("‚ùå JWT corrompu, for√ßage de d√©connexion.");
  await logoutUser();
}
}
export async function getRefreshTokenExpirationFromDB(): Promise<number> {
try {
  const db = await openDB("AuthDB", 1);
  const tx = db.transaction("authStore", "readonly");
  const store = tx.objectStore("authStore");
  const expirationEntry = await store.get("refreshTokenExpiration");
  return expirationEntry?.value || 0;
} catch (err) {
  console.warn("‚ö†Ô∏è Erreur lors de la r√©cup√©ration de l'expiration du refresh token depuis IndexedDB :", err);
  return 0;
}
}

export async function clearIndexedDBData() {
try {
  const db = await openDB("AuthDB", 1);
  const tx = db.transaction("authStore", "readwrite");
  const store = tx.objectStore("authStore");

  await store.clear();  // Efface toutes les donn√©es dans le store

  console.log("‚úÖ IndexedDB nettoy√©e !");
} catch (error) {
  console.error("‚ùå Erreur lors du nettoyage de IndexedDB :", error);
}
}

export async function syncRefreshToken() {
if (isSyncing) {
  console.log("üîÑ Sync d√©j√† en cours, on attend...");
  return;
}

isSyncing = true;

try {
  const dbToken = await getRefreshTokenFromDB();
  const localToken = localStorage.getItem("refreshToken");
  const cookieToken = document.cookie.split("; ").find(row => row.startsWith("refreshToken="))?.split("=")[1];

  if (!dbToken && !localToken && !cookieToken) {
    console.error("üö® AUCUN refresh token trouv√© ! Reset obligatoire !");
    return;
  }

  // Correction d‚Äôincoh√©rence
  if (dbToken && localToken && cookieToken && (dbToken !== localToken || dbToken !== cookieToken)) {
    console.warn("‚ö†Ô∏è Incoh√©rence d√©tect√©e entre Cookies, IndexedDB et LocalStorage. Correction...");
  
    const validToken =
      (dbToken && localToken)
        ? (dbToken.length > localToken.length ? dbToken : localToken)
        : dbToken || localToken || "";
  
    if (validToken) {
      storageManager.setTokenInAllStorages("refreshToken", validToken);
      await updateRefreshTokenInDB(validToken);
    } else {
      console.warn("‚ö†Ô∏è Aucun token valide trouv√©, stockage annul√©.");
    }
  }
} catch (error) {
  console.error("‚ùå Erreur de synchronisation :", error);
}

isSyncing = false;
}
export async function logoutUser() {
console.log("üö® D√©connexion en cours...");

try {
  // Bloque imm√©diatement tout refresh en cours
  if (typeof refreshInProgress !== "undefined") {
    refreshInProgress = Promise.resolve(null);
  }

  // Supprime tous les cookies (compatibilit√©)
  document.cookie.split(";").forEach((cookie) => {
    document.cookie = cookie
      .replace(/^ +/, "") // Supprime les espaces au d√©but
      .replace(/=.*/, "=;expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/"); // Expiration forc√©e
  });

  console.log("üóëÔ∏è Cookies supprim√©s !");

  // Supprime les donn√©es dans IndexedDB
  await clearIndexedDBData();

  // Supprime tous les tokens stock√©s
  await Promise.all([ 
    sessionStorage.clear(),
    localStorage.removeItem("jwt"),
    localStorage.removeItem("refreshToken"),
    localStorage.removeItem("prenom")
  ]);

  console.log("‚úÖ Donn√©es utilisateur nettoy√©es !");

  // D√©clenche un √©v√©nement pour informer les autres composants
  window.dispatchEvent(new Event("logout"));

  // Redirection apr√®s une courte pause
  setTimeout(() => {
    console.log("üîÑ Redirection vers la page de connexion...");
    window.location.href = "/login";
  }, 300);

  return true;
} catch (error) {
  console.error("‚ùå Erreur lors de la d√©connexion :", error);
  return false;
}
}
// Fonction pour nettoyer les anciennes cl√©s de refresh token et synchroniser les diff√©rents stockages
export async function fixRefreshTokenStorage() {
console.trace("üìå Appel de fixRefreshTokenStorage"); // Affiche la trace d'appel pour d√©bogage
console.warn("üö® Nettoyage des anciennes cl√©s de refresh token ('refreshjwt')...");

// V√©rifie si le refreshToken est bien stock√© dans IndexedDB et localStorage
const db = await openDB("AuthDB", 1);
const tx = db.transaction("authStore", "readwrite");
const store = tx.objectStore("authStore");

// Suppression des anciennes cl√©s inutilis√©es
await store.delete("refreshjwt");
localStorage.removeItem("refreshjwt");

console.log("‚úÖ `refreshjwt` supprim√© de IndexedDB et localStorage !");

// Optionnellement, on peut synchroniser les refresh tokens entre les stockages si n√©cessaire
const storedRefreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");
if (storedRefreshToken) {
  // S'il existe, on s'assure qu'il est mis √† jour dans IndexedDB
  await updateRefreshTokenInDB(storedRefreshToken);
  console.log("‚úÖ Refresh token synchronis√© dans IndexedDB !");
}
}
// Fonction pour restaurer la session de l'utilisateur (r√©cup√®re les tokens et les restaure dans les stockages)
export async function restoreSession() {
console.log("üîÑ Restauration de session...");

// V√©rifie si les tokens sont pr√©sents dans localStorage ou sessionStorage
const jwt = localStorage.getItem("jwt") || sessionStorage.getItem("jwt");
const refreshToken = localStorage.getItem("refreshToken") || sessionStorage.getItem("refreshToken");

if (!jwt || !refreshToken) {
  console.warn("‚ùå Tokens manquants. L'utilisateur doit se reconnecter.");
  return false; // Retourne false si aucun token n'est trouv√©
}

// Si les tokens sont trouv√©s, on les restaure dans IndexedDB
const indexedDBAvailable = await verifyIndexedDBSetup();  // V√©rifie si IndexedDB est pr√™te
if (!indexedDBAvailable) {
  console.warn("‚ùå Impossible d'utiliser IndexedDB pour restaurer les tokens.");
  return false; // Si IndexedDB n'est pas disponible, on retourne false
}

try {
  // Restaure le JWT et le refreshToken dans IndexedDB
  await updateJWTInIndexedDB(jwt);
  await updateRefreshTokenInDB(refreshToken);

  console.log("‚úÖ Session restaur√©e avec succ√®s !");
  return true; // Retourne true si la session est correctement restaur√©e
} catch (error) {
  console.error("‚ùå Erreur lors de la restauration de la session :", error);
  return false; // Retourne false en cas d'erreur
}
}
// Fonction pour planifier le rafra√Æchissement automatique du JWT
export function scheduleJwtRefresh() {
const refreshInterval = /Mobi|Android/i.test(navigator.userAgent) ? 2 * 60 * 1000 : 8 * 60 * 1000; // 2 minutes pour les mobiles, 8 minutes pour les autres

// Planifie une v√©rification et un rafra√Æchissement du JWT √† intervalle r√©gulier
setInterval(async () => {
  console.log("üîÑ V√©rification du JWT et du refresh token...");

  const refreshTokenExp = await getRefreshTokenExpirationFromDB();
  if (refreshTokenExp - Date.now() < 2 * 60 * 1000) {  // Si l'expiration du refreshToken approche
    console.warn("üö® Refresh token bient√¥t expir√© ! Tentative de r√©cup√©ration...");
    await restoreTokensToIndexedDB();  // Restaure les tokens dans IndexedDB si n√©cessaire
  }

  // Rafra√Æchit le JWT si n√©cessaire
  const newJwt = await refreshToken();
  if (!newJwt) {
    console.error("‚ùå Refresh √©chou√©, d√©connexion en cours...");
    await logoutUser();  // D√©connecte l'utilisateur en cas d'√©chec du refresh
  } else {
    console.log("‚úÖ JWT rafra√Æchi avec succ√®s !");
  }
}, refreshInterval);  // V√©rifie toutes les 2 ou 8 minutes
}
