declare global {
  interface Window {
      latestJWT?: string;
  }
}

import { openDB } from "idb";
import axios from "axios";
import router from "@/router/index.ts"

let currentRefreshPromise: Promise<string | null> | null = null; // Modifi√© ici
let refreshAttempts = 0; // üîÑ Compteur de tentatives de refresh
const MAX_REFRESH_ATTEMPTS = 3; // ‚õî Limite anti-boucle

let isRefreshing = false;
let refreshPromise: Promise<string | null> | null = null;

export async function getRefreshTokenFromDB() {
  console.log("üîÑ R√©cup√©ration du refresh token...");

  // üî• V√©rifie d'abord en sessionStorage
  const sessionStoredRefreshToken = sessionStorage.getItem("refreshToken");
  if (sessionStoredRefreshToken) {
    console.log("üì¶ Refresh token trouv√© en sessionStorage :", sessionStoredRefreshToken);
    await syncRefreshTokenStorage(sessionStoredRefreshToken);
    return sessionStoredRefreshToken;
  }

  // üîç V√©rifie LocalStorage
  const localStorageToken = localStorage.getItem("refreshToken");
  if (localStorageToken) {
    console.log("üì¶ Refresh token trouv√© dans LocalStorage :", localStorageToken);

    // ‚úÖ Restaurer imm√©diatement dans les autres stockages
    await syncRefreshTokenStorage(localStorageToken);
    return localStorageToken;
  }

  // üîÑ V√©rification des autres stockages...
  const storedToken = await checkOtherStorageForRefreshToken();
  return storedToken;
}

/**
 * ‚úÖ Fonction qui restaure le refreshToken dans tous les stockages
 */

async function checkOtherStorageForRefreshToken(): Promise<string | null> {
  // üîç V√©rifie IndexedDB
  await verifyIndexedDBSetup();
  try {
    const db = await openDB("AuthDB", 1);
    const tx = db.transaction("authStore", "readonly");
    const store = tx.objectStore("authStore");
    const storedRefreshTokenEntry = await store.get("refreshToken");

    if (storedRefreshTokenEntry?.value) {
      console.log("üíæ Refresh token trouv√© dans IndexedDB :", storedRefreshTokenEntry.value);
      return storedRefreshTokenEntry.value;
    }
  } catch (error) {
    console.error("‚ùå IndexedDB inaccessible :", error);
  }

  // üîç V√©rifie les Cookies
  const cookies = document.cookie.split("; ");
  const storedRefreshTokenCookie = cookies.find(row => row.startsWith("refreshToken="));
  if (storedRefreshTokenCookie) {
    const storedRefreshToken = storedRefreshTokenCookie.split("=")[1];
    console.log("üç™ Refresh token trouv√© dans les cookies :", storedRefreshToken);
    return storedRefreshToken;
  }

  console.error("üö® Aucun refresh token trouv√© !");
  return null;
}

/**
 * ‚úÖ Fonction qui restaure le refreshToken dans les autres stockages
 */
async function syncRefreshTokenStorage(storedRefreshToken: string) {
  console.log("üîÑ Synchronisation du refreshToken dans tous les stockages...");

  // ‚úÖ Restaurer dans IndexedDB
  await updateRefreshTokenInDB(storedRefreshToken);

  // ‚úÖ Restaurer dans SessionStorage
  if (!sessionStorage.getItem("refreshToken")) {
    sessionStorage.setItem("refreshToken", storedRefreshToken);
    console.log("üì¶ Refresh token restaur√© dans SessionStorage.");
  }

  // ‚úÖ Restaurer dans les cookies
  const cookies = document.cookie.split("; ").find(row => row.startsWith("refreshToken="));
  if (!cookies) {
    document.cookie = `refreshToken=${storedRefreshToken}; Secure; SameSite=Strict; path=/`;
    console.log("üç™ Refresh token restaur√© dans les cookies.");
  }
}

export function deleteAllCookies() {
  document.cookie.split(";").forEach((cookie) => {
    const name = cookie.split("=")[0].trim();
    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=.${location.hostname}`;
    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;
  });

  console.log("‚úÖ Tous les cookies supprim√©s !");
}

export async function restoreSession() {
  console.log("üîÑ Restauration de session...");
  return true; // üöÄ √Ä adapter en fonction de ton syst√®me d'authentification
}

// ‚úÖ Rafra√Æchissement automatique du JWT toutes les 10 minutes
export function scheduleJwtRefresh() {
  const refreshInterval = /Mobi|Android/i.test(navigator.userAgent) ? 2 * 60 * 1000 : 8 * 60 * 1000;

  setTimeout(async () => {
    console.log("üîÑ V√©rification du JWT et du refresh token...");

    const refreshTokenExp = await getRefreshTokenExpirationFromDB();
    if (refreshTokenExp - Date.now() < 2 * 60 * 1000) {
      console.warn("üö® Refresh token bient√¥t expir√© ! Tentative de r√©cup√©ration...");
      await restoreTokensToIndexedDB();
    }

    const newJwt = await refreshToken();
    if (!newJwt) {
      console.error("‚ùå Refresh √©chou√©, d√©connexion en cours...");
      await logoutUser();
    } else {
      console.log("‚úÖ JWT rafra√Æchi avec succ√®s !");
    }

    scheduleJwtRefresh(); // üîÑ Relancer apr√®s ex√©cution
  }, refreshInterval);
}

export async function verifyIndexedDBSetup() {
  if (!window.indexedDB) {
    console.error("‚ùå IndexedDB n'est pas support√© par ce navigateur !");
    return false; // ‚õî Emp√™cher les acc√®s futurs
  }

  try {
    const db = await openDB("AuthDB", 1, {
      upgrade(db) {
        if (!db.objectStoreNames.contains("authStore")) {
          db.createObjectStore("authStore", { keyPath: "key" });
          console.log("‚úÖ Object store 'authStore' recr√©√© !");
        }
      }
    });

    console.log("üîç IndexedDB v√©rifi√© !");
    return true;
  } catch (error) {
    console.error("‚ùå Erreur lors de l‚Äôacc√®s √† IndexedDB :", error);
    return false;
  }
}

export async function updateJWTInIndexedDB(newJwt: string) {
    if (!newJwt) return;

    try {
        const db = await openDB("AuthDB", 1);
        const tx = db.transaction("authStore", "readwrite");
        const store = tx.objectStore("authStore");
        await store.put({ key: "jwt", value: newJwt });

        console.log("‚úÖ JWT mis √† jour dans IndexedDB :", newJwt);
    } catch (err) {
        console.warn("‚ö†Ô∏è Erreur lors de l'enregistrement du JWT dans IndexedDB :", err);
    }
}

export async function getRefreshTokenExpirationFromDB() {
  try {
      const db = await openDB("AuthDB", 1);
      const tx = db.transaction("authStore", "readonly");
      const store = tx.objectStore("authStore");
      const expirationEntry = await store.get("refreshTokenExpiration");
      return expirationEntry?.value || 0;
  } catch (err) {
      console.warn("‚ö†Ô∏è Erreur lors de la r√©cup√©ration de l'expiration du refresh token depuis IndexedDB :", err);
      return 0;
  }
}

export async function restoreTokensToIndexedDB() {
  console.log("üîÑ V√©rification et restauration des tokens dans IndexedDB...");

  const indexedDBAvailable = await verifyIndexedDBSetup();
  if (!indexedDBAvailable) {
    console.warn("‚ùå Impossible d'utiliser IndexedDB.");
    return;
  }

  // üîç R√©cup√®re le JWT et le refreshToken depuis localStorage/sessionStorage
  const storedJwt = sessionStorage.getItem("jwt") || localStorage.getItem("jwt");
  const storedRefreshToken = localStorage.getItem("refreshToken");

  if (storedJwt) {
    console.log("üì• Restauration du JWT dans IndexedDB...");
    await updateJWTInIndexedDB(storedJwt);
  }

  if (storedRefreshToken) {
    console.log("üì• Restauration du refreshToken dans IndexedDB...");
    await updateRefreshTokenInDB(storedRefreshToken);
  }

  console.log("‚úÖ IndexedDB restaur√© avec les tokens !");
}

export async function getJWTFromIndexedDB() {
  await verifyIndexedDBSetup(); // üî• V√©rification avant de tenter un acc√®s

  try {
      const db = await openDB("AuthDB", 1);
      const tx = db.transaction("authStore", "readonly");
      const store = tx.objectStore("authStore");
      const result = await store.get("jwt");

      return result?.value || null;
  } catch (error) {
      console.error("‚ùå Erreur lors de l'acc√®s √† IndexedDB :", error);
      return null;
  }
}

export async function getToken(): Promise<string | null> {
  return localStorage.getItem("jwt") || sessionStorage.getItem("jwt") || await getJWTFromIndexedDB();
}

export async function refreshToken(): Promise<string | null> {
  console.log("üîÑ Tentative de rafra√Æchissement du JWT...");
  if (refreshAttempts >= MAX_REFRESH_ATTEMPTS) {
    console.warn("‚õî Trop de tentatives de refresh, on arr√™te.");
    await handleRefreshFailure();
    return null;
  }

  console.log("üîÑ Tentative de rafra√Æchissement du JWT...");

  let storedRefreshToken = localStorage.getItem("refreshToken") || await getRefreshTokenFromDB();

  if (!storedRefreshToken) {
    console.warn("‚ö†Ô∏è Aucun refresh token disponible.");
    await handleRefreshFailure();
    return null;
  }

  console.log("üîë Refresh token envoy√© √† l'API :", storedRefreshToken);

  try {
    const url = `https://cors-proxy-37yu.onrender.com/https://script.google.com/macros/s/AKfycbxc69Alhr0V0-DqrHblDJonvPKFy8PbjhEA6nA4sC4aFCTJOCKO9t0Q-uaApC_vcXgyHA/exec?route=refresh&refreshtoken=${encodeURIComponent(storedRefreshToken)}`;

    const response = await fetch(url, { method: "GET" });

    if (!response.ok) {
      console.error(`üö® Erreur HTTP ${response.status}`);
      throw new Error(`HTTP ${response.status}`);
    }

    const data = await response.json();
    if (data.status === "success" && data.data?.jwt && data.data?.refreshToken) {
      console.log("‚úÖ Refresh r√©ussi !");
      await updateTokens(data.data.jwt, data.data.refreshToken);
      return data.data.jwt;
    } else {
      throw new Error("R√©ponse API invalide");
    }
  } catch (error) {
    console.error("‚ùå Erreur lors du refresh :", error);
    await handleRefreshFailure();
    return null;
  }
}
